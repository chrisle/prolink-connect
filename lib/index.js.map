{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA;;AAEA;AACA,MAAM,IAA0C;AAChD,IAAI,iCAAO,CAAC,mFAA4B,CAAC,oCAAE,OAAO;AAAA;AAAA;AAAA,kGAAC;AACnD,IAAI,KAAK,EAIN;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6BAA6B;AACnD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;;;;AC7/BD;;AAEA;AACA,MAAM,IAA0C;AAChD,IAAI,iCAAO,CAAC,mFAA4B,CAAC,oCAAE,OAAO;AAAA;AAAA;AAAA,kGAAC;AACnD,IAAI,KAAK,EAIN;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK,EAAE,EAEV;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oHAAoH;AAC5I;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;;;;;;;;ACrpDD;;;;;GAKG;AACU,uBAAe,GAAG,IAAI,CAAC;AAEpC;;GAEG;AACU,qBAAa,GAAG,KAAK,CAAC;AAEnC;;GAEG;AACU,iBAAS,GAAG,KAAK,CAAC;AAE/B;;GAEG;AACU,mBAAW,GAAG,KAAK,CAAC;AAEjC;;GAEG;AACU,yBAAiB,GAAG,IAAI,CAAC;AAEtC,kBAAkB;AAClB;;GAEG;AACU,sBAAc,GAAG,UAAU,CAAC,EAAE,CACzC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAA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AE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,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","sources":["webpack://prolink-connect/./src/localdb/kaitai/rekordbox_anlz.ksy","webpack://prolink-connect/./src/localdb/kaitai/rekordbox_pdb.ksy","webpack://prolink-connect/./src/constants.ts","webpack://prolink-connect/./src/control/index.ts","webpack://prolink-connect/./src/db/getArtwork.ts","webpack://prolink-connect/./src/db/getMetadata.ts","webpack://prolink-connect/./src/db/getPlaylist.ts","webpack://prolink-connect/./src/db/getWaveforms.ts","webpack://prolink-connect/./src/db/index.ts","webpack://prolink-connect/./src/db/utils.ts","webpack://prolink-connect/./src/devices/index.ts","webpack://prolink-connect/./src/devices/utils.ts","webpack://prolink-connect/./src/entities.ts","webpack://prolink-connect/./src/index.ts","webpack://prolink-connect/./src/localdb/index.ts","webpack://prolink-connect/./src/localdb/orm.ts","webpack://prolink-connect/./src/localdb/rekordbox.ts","webpack://prolink-connect/./src/localdb/schema.ts","webpack://prolink-connect/./src/localdb/utils.ts","webpack://prolink-connect/./src/mixstatus/index.ts","webpack://prolink-connect/./src/mixstatus/utils.ts","webpack://prolink-connect/./src/network.ts","webpack://prolink-connect/./src/nfs/index.ts","webpack://prolink-connect/./src/nfs/programs.ts","webpack://prolink-connect/./src/nfs/rpc.ts","webpack://prolink-connect/./src/nfs/utils.ts","webpack://prolink-connect/./src/nfs/xdr.ts","webpack://prolink-connect/./src/remotedb/constants.ts","webpack://prolink-connect/./src/remotedb/fields.ts","webpack://prolink-connect/./src/remotedb/index.ts","webpack://prolink-connect/./src/remotedb/message/index.ts","webpack://prolink-connect/./src/remotedb/message/item.ts","webpack://prolink-connect/./src/remotedb/message/response.ts","webpack://prolink-connect/./src/remotedb/message/types.ts","webpack://prolink-connect/./src/remotedb/queries.ts","webpack://prolink-connect/./src/remotedb/utils.ts","webpack://prolink-connect/./src/status/index.ts","webpack://prolink-connect/./src/status/media.ts","webpack://prolink-connect/./src/status/types.ts","webpack://prolink-connect/./src/status/utils.ts","webpack://prolink-connect/./src/types.ts","webpack://prolink-connect/./src/utils/converters.ts","webpack://prolink-connect/./src/utils/index.ts","webpack://prolink-connect/./src/utils/udp.ts","webpack://prolink-connect/./src/virtualcdj/index.ts","webpack://prolink-connect/external commonjs \"@sentry/node\"","webpack://prolink-connect/external commonjs \"@sentry/tracing\"","webpack://prolink-connect/external commonjs \"async-mutex\"","webpack://prolink-connect/external commonjs \"better-sqlite3-multiple-ciphers\"","webpack://prolink-connect/external commonjs \"events\"","webpack://prolink-connect/external commonjs \"ip-address\"","webpack://prolink-connect/external commonjs \"js-xdr\"","webpack://prolink-connect/external commonjs \"js-xdr/lib/util\"","webpack://prolink-connect/external commonjs \"kaitai-struct\"","webpack://prolink-connect/external commonjs \"kaitai-struct/KaitaiStream\"","webpack://prolink-connect/external commonjs \"lodash\"","webpack://prolink-connect/external commonjs \"promise-retry\"","webpack://prolink-connect/external commonjs \"promise-socket\"","webpack://prolink-connect/external commonjs \"promise-timeout\"","webpack://prolink-connect/external node-commonjs \"crypto\"","webpack://prolink-connect/external node-commonjs \"dgram\"","webpack://prolink-connect/external node-commonjs \"net\"","webpack://prolink-connect/external node-commonjs \"os\"","webpack://prolink-connect/webpack/bootstrap","webpack://prolink-connect/webpack/before-startup","webpack://prolink-connect/webpack/startup","webpack://prolink-connect/webpack/after-startup"],"sourcesContent":["// This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['kaitai-struct/KaitaiStream'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(require('kaitai-struct/KaitaiStream'));\n  } else {\n    root.RekordboxAnlz = factory(root.KaitaiStream);\n  }\n}(this, function (KaitaiStream) {\n/**\n * These files are created by rekordbox when analyzing audio tracks\n * to facilitate DJ performance. They include waveforms, beat grids\n * (information about the precise time at which each beat occurs),\n * time indices to allow efficient seeking to specific positions\n * inside variable bit-rate audio streams, and lists of memory cues\n * and loop points. They are used by Pioneer professional DJ\n * equipment.\n * \n * The format has been reverse-engineered to facilitate sophisticated\n * integrations with light and laser shows, videos, and other musical\n * instruments, by supporting deep knowledge of what is playing and\n * what is coming next through monitoring the network communications\n * of the players.\n * @see {@link https://reverseengineering.stackexchange.com/questions/4311/help-reversing-a-edb-database-file-for-pioneers-rekordbox-software|Source}\n */\n\nvar RekordboxAnlz = (function() {\n  RekordboxAnlz.CueEntryStatus = Object.freeze({\n    DISABLED: 0,\n    ENABLED: 1,\n\n    0: \"DISABLED\",\n    1: \"ENABLED\",\n  });\n\n  RekordboxAnlz.CueListType = Object.freeze({\n    MEMORY_CUES: 0,\n    HOT_CUES: 1,\n\n    0: \"MEMORY_CUES\",\n    1: \"HOT_CUES\",\n  });\n\n  RekordboxAnlz.MoodHighPhrase = Object.freeze({\n    INTRO: 1,\n    UP: 2,\n    DOWN: 3,\n    CHORUS: 5,\n    OUTRO: 6,\n\n    1: \"INTRO\",\n    2: \"UP\",\n    3: \"DOWN\",\n    5: \"CHORUS\",\n    6: \"OUTRO\",\n  });\n\n  RekordboxAnlz.TrackBank = Object.freeze({\n    DEFAULT: 0,\n    COOL: 1,\n    NATURAL: 2,\n    HOT: 3,\n    SUBTLE: 4,\n    WARM: 5,\n    VIVID: 6,\n    CLUB_1: 7,\n    CLUB_2: 8,\n\n    0: \"DEFAULT\",\n    1: \"COOL\",\n    2: \"NATURAL\",\n    3: \"HOT\",\n    4: \"SUBTLE\",\n    5: \"WARM\",\n    6: \"VIVID\",\n    7: \"CLUB_1\",\n    8: \"CLUB_2\",\n  });\n\n  RekordboxAnlz.CueEntryType = Object.freeze({\n    MEMORY_CUE: 1,\n    LOOP: 2,\n\n    1: \"MEMORY_CUE\",\n    2: \"LOOP\",\n  });\n\n  RekordboxAnlz.SectionTags = Object.freeze({\n    CUES_2: 1346588466,\n    CUES: 1346588482,\n    PATH: 1347441736,\n    BEAT_GRID: 1347507290,\n    SONG_STRUCTURE: 1347638089,\n    VBR: 1347830354,\n    WAVE_PREVIEW: 1347895638,\n    WAVE_TINY: 1347900978,\n    WAVE_SCROLL: 1347900979,\n    WAVE_COLOR_PREVIEW: 1347900980,\n    WAVE_COLOR_SCROLL: 1347900981,\n\n    1346588466: \"CUES_2\",\n    1346588482: \"CUES\",\n    1347441736: \"PATH\",\n    1347507290: \"BEAT_GRID\",\n    1347638089: \"SONG_STRUCTURE\",\n    1347830354: \"VBR\",\n    1347895638: \"WAVE_PREVIEW\",\n    1347900978: \"WAVE_TINY\",\n    1347900979: \"WAVE_SCROLL\",\n    1347900980: \"WAVE_COLOR_PREVIEW\",\n    1347900981: \"WAVE_COLOR_SCROLL\",\n  });\n\n  RekordboxAnlz.TrackMood = Object.freeze({\n    HIGH: 1,\n    MID: 2,\n    LOW: 3,\n\n    1: \"HIGH\",\n    2: \"MID\",\n    3: \"LOW\",\n  });\n\n  RekordboxAnlz.MoodMidPhrase = Object.freeze({\n    INTRO: 1,\n    VERSE_1: 2,\n    VERSE_2: 3,\n    VERSE_3: 4,\n    VERSE_4: 5,\n    VERSE_5: 6,\n    VERSE_6: 7,\n    BRIDGE: 8,\n    CHORUS: 9,\n    OUTRO: 10,\n\n    1: \"INTRO\",\n    2: \"VERSE_1\",\n    3: \"VERSE_2\",\n    4: \"VERSE_3\",\n    5: \"VERSE_4\",\n    6: \"VERSE_5\",\n    7: \"VERSE_6\",\n    8: \"BRIDGE\",\n    9: \"CHORUS\",\n    10: \"OUTRO\",\n  });\n\n  RekordboxAnlz.MoodLowPhrase = Object.freeze({\n    INTRO: 1,\n    VERSE_1: 2,\n    VERSE_1B: 3,\n    VERSE_1C: 4,\n    VERSE_2: 5,\n    VERSE_2B: 6,\n    VERSE_2C: 7,\n    BRIDGE: 8,\n    CHORUS: 9,\n    OUTRO: 10,\n\n    1: \"INTRO\",\n    2: \"VERSE_1\",\n    3: \"VERSE_1B\",\n    4: \"VERSE_1C\",\n    5: \"VERSE_2\",\n    6: \"VERSE_2B\",\n    7: \"VERSE_2C\",\n    8: \"BRIDGE\",\n    9: \"CHORUS\",\n    10: \"OUTRO\",\n  });\n\n  function RekordboxAnlz(_io, _parent, _root) {\n    this._io = _io;\n    this._parent = _parent;\n    this._root = _root || this;\n\n    this._read();\n  }\n  RekordboxAnlz.prototype._read = function() {\n    this.magic = this._io.readBytes(4);\n    if (!((KaitaiStream.byteArrayCompare(this.magic, [80, 77, 65, 73]) == 0))) {\n      throw new KaitaiStream.ValidationNotEqualError([80, 77, 65, 73], this.magic, this._io, \"/seq/0\");\n    }\n    this.lenHeader = this._io.readU4be();\n    this.lenFile = this._io.readU4be();\n    this._unnamed3 = this._io.readBytes((this.lenHeader - this._io.pos));\n    this.sections = [];\n    var i = 0;\n    while (!this._io.isEof()) {\n      this.sections.push(new TaggedSection(this._io, this, this._root));\n      i++;\n    }\n  }\n\n  var PhraseMid = RekordboxAnlz.PhraseMid = (function() {\n    function PhraseMid(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PhraseMid.prototype._read = function() {\n      this.id = this._io.readU2be();\n    }\n\n    return PhraseMid;\n  })();\n\n  /**\n   * Stores the file path of the audio file to which this analysis\n   * applies.\n   */\n\n  var PathTag = RekordboxAnlz.PathTag = (function() {\n    function PathTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PathTag.prototype._read = function() {\n      this.lenPath = this._io.readU4be();\n      if (this.lenPath > 1) {\n        this.path = KaitaiStream.bytesToStr(this._io.readBytes((this.lenPath - 2)), \"utf-16be\");\n      }\n    }\n\n    return PathTag;\n  })();\n\n  /**\n   * Stores a waveform preview image suitable for display above\n   * the touch strip for jumping to a track position.\n   */\n\n  var WavePreviewTag = RekordboxAnlz.WavePreviewTag = (function() {\n    function WavePreviewTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    WavePreviewTag.prototype._read = function() {\n      this.lenPreview = this._io.readU4be();\n      this._unnamed1 = this._io.readU4be();\n      if (this._parent.lenTag > this._parent.lenHeader) {\n        this.data = this._io.readBytes(this.lenPreview);\n      }\n    }\n\n    /**\n     * The length, in bytes, of the preview data itself. This is\n     * slightly redundant because it can be computed from the\n     * length of the tag.\n     */\n\n    /**\n     * The actual bytes of the waveform preview.\n     */\n\n    return WavePreviewTag;\n  })();\n\n  /**\n   * Holds a list of all the beats found within the track, recording\n   * their bar position, the time at which they occur, and the tempo\n   * at that point.\n   */\n\n  var BeatGridTag = RekordboxAnlz.BeatGridTag = (function() {\n    function BeatGridTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    BeatGridTag.prototype._read = function() {\n      this._unnamed0 = this._io.readU4be();\n      this._unnamed1 = this._io.readU4be();\n      this.lenBeats = this._io.readU4be();\n      this.beats = new Array(this.lenBeats);\n      for (var i = 0; i < this.lenBeats; i++) {\n        this.beats[i] = new BeatGridBeat(this._io, this, this._root);\n      }\n    }\n\n    /**\n     * The number of beat entries which follow.\n     */\n\n    /**\n     * The entries of the beat grid.\n     */\n\n    return BeatGridTag;\n  })();\n\n  /**\n   * Stores the rest of the song structure tag, which can only be\n   * parsed after unmasking.\n   */\n\n  var SongStructureBody = RekordboxAnlz.SongStructureBody = (function() {\n    function SongStructureBody(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    SongStructureBody.prototype._read = function() {\n      this.mood = this._io.readU2be();\n      this._unnamed1 = this._io.readBytes(6);\n      this.endBeat = this._io.readU2be();\n      this._unnamed3 = this._io.readBytes(2);\n      this.bank = this._io.readU1();\n      this._unnamed5 = this._io.readBytes(1);\n      this.entries = new Array(this._parent.lenEntries);\n      for (var i = 0; i < this._parent.lenEntries; i++) {\n        this.entries[i] = new SongStructureEntry(this._io, this, this._root);\n      }\n    }\n\n    /**\n     * The mood which rekordbox assigns the track as a whole during phrase analysis.\n     */\n\n    /**\n     * The beat number at which the last phrase ends. The track may\n     * continue after the last phrase ends. If this is the case, it will\n     * mostly be silence.\n     */\n\n    /**\n     * The stylistic bank which can be assigned to the track in rekordbox Lighting mode.\n     */\n\n    return SongStructureBody;\n  })();\n\n  /**\n   * A larger, colorful waveform preview image suitable for display\n   * above the touch strip for jumping to a track position on newer\n   * high-resolution players.\n   */\n\n  var WaveColorPreviewTag = RekordboxAnlz.WaveColorPreviewTag = (function() {\n    function WaveColorPreviewTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    WaveColorPreviewTag.prototype._read = function() {\n      this.lenEntryBytes = this._io.readU4be();\n      this.lenEntries = this._io.readU4be();\n      this._unnamed2 = this._io.readU4be();\n      this.entries = this._io.readBytes((this.lenEntries * this.lenEntryBytes));\n    }\n\n    /**\n     * The size of each entry, in bytes. Seems to always be 6.\n     */\n\n    /**\n     * The number of waveform data points, each of which takes one\n     * byte for each of six channels of information.\n     */\n\n    return WaveColorPreviewTag;\n  })();\n\n  var PhraseHigh = RekordboxAnlz.PhraseHigh = (function() {\n    function PhraseHigh(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PhraseHigh.prototype._read = function() {\n      this.id = this._io.readU2be();\n    }\n\n    return PhraseHigh;\n  })();\n\n  /**\n   * A larger waveform image suitable for scrolling along as a track\n   * plays.\n   */\n\n  var WaveScrollTag = RekordboxAnlz.WaveScrollTag = (function() {\n    function WaveScrollTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    WaveScrollTag.prototype._read = function() {\n      this.lenEntryBytes = this._io.readU4be();\n      this.lenEntries = this._io.readU4be();\n      this._unnamed2 = this._io.readU4be();\n      this.entries = this._io.readBytes((this.lenEntries * this.lenEntryBytes));\n    }\n\n    /**\n     * The size of each entry, in bytes. Seems to always be 1.\n     */\n\n    /**\n     * The number of waveform data points, each of which takes one\n     * byte.\n     */\n\n    return WaveScrollTag;\n  })();\n\n  /**\n   * Stores the song structure, also known as phrases (intro, verse,\n   * bridge, chorus, up, down, outro).\n   */\n\n  var SongStructureTag = RekordboxAnlz.SongStructureTag = (function() {\n    function SongStructureTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    SongStructureTag.prototype._read = function() {\n      this.lenEntryBytes = this._io.readU4be();\n      this.lenEntries = this._io.readU2be();\n      this._raw__raw_body = this._io.readBytesFull();\n      this._raw_body = KaitaiStream.processXorMany(this._raw__raw_body, this.mask);\n      var _io__raw_body = new KaitaiStream(this._raw_body);\n      this.body = new SongStructureBody(_io__raw_body, this, this._root);\n    }\n    Object.defineProperty(SongStructureTag.prototype, 'c', {\n      get: function() {\n        if (this._m_c !== undefined)\n          return this._m_c;\n        this._m_c = this.lenEntries;\n        return this._m_c;\n      }\n    });\n    Object.defineProperty(SongStructureTag.prototype, 'mask', {\n      get: function() {\n        if (this._m_mask !== undefined)\n          return this._m_mask;\n        this._m_mask = new Uint8Array([(203 + this.c), (225 + this.c), (238 + this.c), (250 + this.c), (229 + this.c), (238 + this.c), (173 + this.c), (238 + this.c), (233 + this.c), (210 + this.c), (233 + this.c), (235 + this.c), (225 + this.c), (233 + this.c), (243 + this.c), (232 + this.c), (233 + this.c), (244 + this.c), (225 + this.c)]);\n        return this._m_mask;\n      }\n    });\n\n    /**\n     * The size of each entry, in bytes. Seems to always be 24.\n     */\n\n    /**\n     * The number of phrases.\n     */\n\n    /**\n     * The rest of the tag, which needs to be unmasked before it\n     * can be parsed.\n     */\n\n    return SongStructureTag;\n  })();\n\n  /**\n   * A cue extended list entry. Can either describe a memory cue or a\n   * loop.\n   */\n\n  var CueExtendedEntry = RekordboxAnlz.CueExtendedEntry = (function() {\n    function CueExtendedEntry(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    CueExtendedEntry.prototype._read = function() {\n      this.magic = this._io.readBytes(4);\n      if (!((KaitaiStream.byteArrayCompare(this.magic, [80, 67, 80, 50]) == 0))) {\n        throw new KaitaiStream.ValidationNotEqualError([80, 67, 80, 50], this.magic, this._io, \"/types/cue_extended_entry/seq/0\");\n      }\n      this.lenHeader = this._io.readU4be();\n      this.lenEntry = this._io.readU4be();\n      this.hotCue = this._io.readU4be();\n      this.type = this._io.readU1();\n      this._unnamed5 = this._io.readBytes(3);\n      this.time = this._io.readU4be();\n      this.loopTime = this._io.readU4be();\n      this.colorId = this._io.readU1();\n      this._unnamed9 = this._io.readBytes(11);\n      if (this.lenEntry > 43) {\n        this.lenComment = this._io.readU4be();\n      }\n      if (this.lenEntry > 43) {\n        this.comment = KaitaiStream.bytesToStr(this._io.readBytes(this.lenComment), \"utf-16be\");\n      }\n      if ((this.lenEntry - this.lenComment) > 44) {\n        this.colorCode = this._io.readU1();\n      }\n      if ((this.lenEntry - this.lenComment) > 45) {\n        this.colorRed = this._io.readU1();\n      }\n      if ((this.lenEntry - this.lenComment) > 46) {\n        this.colorGreen = this._io.readU1();\n      }\n      if ((this.lenEntry - this.lenComment) > 47) {\n        this.colorBlue = this._io.readU1();\n      }\n      if ((this.lenEntry - this.lenComment) > 48) {\n        this._unnamed16 = this._io.readBytes(((this.lenEntry - 48) - this.lenComment));\n      }\n    }\n\n    /**\n     * Identifies this as an extended cue list entry (cue point).\n     */\n\n    /**\n     * If zero, this is an ordinary memory cue, otherwise this a\n     * hot cue with the specified number.\n     */\n\n    /**\n     * Indicates whether this is a memory cue or a loop.\n     */\n\n    /**\n     * The position, in milliseconds, at which the cue point lies\n     * in the track.\n     */\n\n    /**\n     * The position, in milliseconds, at which the player loops\n     * back to the cue time if this is a loop.\n     */\n\n    /**\n     * References a row in the colors table if this is a memory cue or loop\n     * and has been assigned a color.\n     */\n\n    /**\n     * The comment assigned to this cue by the DJ, if any, with a trailing NUL.\n     */\n\n    /**\n     * A lookup value for a color table? We use this to index to the hot cue colors shown in rekordbox.\n     */\n\n    /**\n     * The red component of the hot cue color to be displayed.\n     */\n\n    /**\n     * The green component of the hot cue color to be displayed.\n     */\n\n    /**\n     * The blue component of the hot cue color to be displayed.\n     */\n\n    return CueExtendedEntry;\n  })();\n\n  /**\n   * Stores an index allowing rapid seeking to particular times\n   * within a variable-bitrate audio file.\n   */\n\n  var VbrTag = RekordboxAnlz.VbrTag = (function() {\n    function VbrTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    VbrTag.prototype._read = function() {\n      this._unnamed0 = this._io.readU4be();\n      this.index = new Array(400);\n      for (var i = 0; i < 400; i++) {\n        this.index[i] = this._io.readU4be();\n      }\n    }\n\n    return VbrTag;\n  })();\n\n  /**\n   * A song structure entry, represents a single phrase.\n   */\n\n  var SongStructureEntry = RekordboxAnlz.SongStructureEntry = (function() {\n    function SongStructureEntry(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    SongStructureEntry.prototype._read = function() {\n      this.phraseNumber = this._io.readU2be();\n      this.beatNumber = this._io.readU2be();\n      switch (this._parent.mood) {\n      case RekordboxAnlz.TrackMood.HIGH:\n        this.kind = new PhraseHigh(this._io, this, this._root);\n        break;\n      case RekordboxAnlz.TrackMood.MID:\n        this.kind = new PhraseMid(this._io, this, this._root);\n        break;\n      case RekordboxAnlz.TrackMood.LOW:\n        this.kind = new PhraseLow(this._io, this, this._root);\n        break;\n      default:\n        this.kind = new UnknownTag(this._io, this, this._root);\n        break;\n      }\n      this._unnamed3 = this._io.readBytes((this._parent._parent.lenEntryBytes - 9));\n      this.fillIn = this._io.readU1();\n      this.fillInBeatNumber = this._io.readU2be();\n    }\n\n    /**\n     * The absolute number of the phrase, starting at one.\n     */\n\n    /**\n     * The beat number at which the phrase starts.\n     */\n\n    /**\n     * The kind of phrase as displayed in rekordbox.\n     */\n\n    /**\n     * If nonzero, fill-in is present.\n     */\n\n    /**\n     * The beat number at which fill-in starts.\n     */\n\n    return SongStructureEntry;\n  })();\n\n  /**\n   * A cue list entry. Can either represent a memory cue or a loop.\n   */\n\n  var CueEntry = RekordboxAnlz.CueEntry = (function() {\n    function CueEntry(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    CueEntry.prototype._read = function() {\n      this.magic = this._io.readBytes(4);\n      if (!((KaitaiStream.byteArrayCompare(this.magic, [80, 67, 80, 84]) == 0))) {\n        throw new KaitaiStream.ValidationNotEqualError([80, 67, 80, 84], this.magic, this._io, \"/types/cue_entry/seq/0\");\n      }\n      this.lenHeader = this._io.readU4be();\n      this.lenEntry = this._io.readU4be();\n      this.hotCue = this._io.readU4be();\n      this.status = this._io.readU4be();\n      this._unnamed5 = this._io.readU4be();\n      this.orderFirst = this._io.readU2be();\n      this.orderLast = this._io.readU2be();\n      this.type = this._io.readU1();\n      this._unnamed9 = this._io.readBytes(3);\n      this.time = this._io.readU4be();\n      this.loopTime = this._io.readU4be();\n      this._unnamed12 = this._io.readBytes(16);\n    }\n\n    /**\n     * Identifies this as a cue list entry (cue point).\n     */\n\n    /**\n     * If zero, this is an ordinary memory cue, otherwise this a\n     * hot cue with the specified number.\n     */\n\n    /**\n     * If zero, this entry should be ignored.\n     */\n\n    /**\n     * @flesniak says: \"0xffff for first cue, 0,1,3 for next\"\n     */\n\n    /**\n     * @flesniak says: \"1,2,3 for first, second, third cue, 0xffff for last\"\n     */\n\n    /**\n     * Indicates whether this is a memory cue or a loop.\n     */\n\n    /**\n     * The position, in milliseconds, at which the cue point lies\n     * in the track.\n     */\n\n    /**\n     * The position, in milliseconds, at which the player loops\n     * back to the cue time if this is a loop.\n     */\n\n    return CueEntry;\n  })();\n\n  /**\n   * Describes an individual beat in a beat grid.\n   */\n\n  var BeatGridBeat = RekordboxAnlz.BeatGridBeat = (function() {\n    function BeatGridBeat(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    BeatGridBeat.prototype._read = function() {\n      this.beatNumber = this._io.readU2be();\n      this.tempo = this._io.readU2be();\n      this.time = this._io.readU4be();\n    }\n\n    /**\n     * The position of the beat within its musical bar, where beat 1\n     * is the down beat.\n     */\n\n    /**\n     * The tempo at the time of this beat, in beats per minute,\n     * multiplied by 100.\n     */\n\n    /**\n     * The time, in milliseconds, at which this beat occurs when\n     * the track is played at normal (100%) pitch.\n     */\n\n    return BeatGridBeat;\n  })();\n\n  /**\n   * A variation of cue_tag which was introduced with the nxs2 line,\n   * and adds descriptive names. (Still comes in two forms, either\n   * holding memory cues and loop points, or holding hot cues and\n   * loop points.) Also includes hot cues D through H and color assignment.\n   */\n\n  var CueExtendedTag = RekordboxAnlz.CueExtendedTag = (function() {\n    function CueExtendedTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    CueExtendedTag.prototype._read = function() {\n      this.type = this._io.readU4be();\n      this.lenCues = this._io.readU2be();\n      this._unnamed2 = this._io.readBytes(2);\n      this.cues = new Array(this.lenCues);\n      for (var i = 0; i < this.lenCues; i++) {\n        this.cues[i] = new CueExtendedEntry(this._io, this, this._root);\n      }\n    }\n\n    /**\n     * Identifies whether this tag stores ordinary or hot cues.\n     */\n\n    /**\n     * The length of the cue comment list.\n     */\n\n    return CueExtendedTag;\n  })();\n\n  var PhraseLow = RekordboxAnlz.PhraseLow = (function() {\n    function PhraseLow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PhraseLow.prototype._read = function() {\n      this.id = this._io.readU2be();\n    }\n\n    return PhraseLow;\n  })();\n\n  var UnknownTag = RekordboxAnlz.UnknownTag = (function() {\n    function UnknownTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    UnknownTag.prototype._read = function() {\n    }\n\n    return UnknownTag;\n  })();\n\n  /**\n   * A type-tagged file section, identified by a four-byte magic\n   * sequence, with a header specifying its length, and whose payload\n   * is determined by the type tag.\n   */\n\n  var TaggedSection = RekordboxAnlz.TaggedSection = (function() {\n    function TaggedSection(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    TaggedSection.prototype._read = function() {\n      this.fourcc = this._io.readS4be();\n      this.lenHeader = this._io.readU4be();\n      this.lenTag = this._io.readU4be();\n      switch (this.fourcc) {\n      case RekordboxAnlz.SectionTags.WAVE_COLOR_SCROLL:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new WaveColorScrollTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.WAVE_SCROLL:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new WaveScrollTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.VBR:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new VbrTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.CUES_2:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new CueExtendedTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.CUES:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new CueTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.SONG_STRUCTURE:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new SongStructureTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.BEAT_GRID:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new BeatGridTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.WAVE_PREVIEW:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new WavePreviewTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.WAVE_COLOR_PREVIEW:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new WaveColorPreviewTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.PATH:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new PathTag(_io__raw_body, this, this._root);\n        break;\n      case RekordboxAnlz.SectionTags.WAVE_TINY:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new WavePreviewTag(_io__raw_body, this, this._root);\n        break;\n      default:\n        this._raw_body = this._io.readBytes((this.lenTag - 12));\n        var _io__raw_body = new KaitaiStream(this._raw_body);\n        this.body = new UnknownTag(_io__raw_body, this, this._root);\n        break;\n      }\n    }\n\n    /**\n     * A tag value indicating what kind of section this is.\n     */\n\n    /**\n     * The size, in bytes, of the header portion of the tag.\n     */\n\n    /**\n     * The size, in bytes, of this entire tag, counting the header.\n     */\n\n    return TaggedSection;\n  })();\n\n  /**\n   * A larger, colorful waveform image suitable for scrolling along\n   * as a track plays on newer high-resolution hardware. Also\n   * contains a higher-resolution blue/white waveform.\n   */\n\n  var WaveColorScrollTag = RekordboxAnlz.WaveColorScrollTag = (function() {\n    function WaveColorScrollTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    WaveColorScrollTag.prototype._read = function() {\n      this.lenEntryBytes = this._io.readU4be();\n      this.lenEntries = this._io.readU4be();\n      this._unnamed2 = this._io.readU4be();\n      this.entries = this._io.readBytes((this.lenEntries * this.lenEntryBytes));\n    }\n\n    /**\n     * The size of each entry, in bytes. Seems to always be 2.\n     */\n\n    /**\n     * The number of columns of waveform data (this matches the\n     * non-color waveform length.\n     */\n\n    return WaveColorScrollTag;\n  })();\n\n  /**\n   * Stores either a list of ordinary memory cues and loop points, or\n   * a list of hot cues and loop points.\n   */\n\n  var CueTag = RekordboxAnlz.CueTag = (function() {\n    function CueTag(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    CueTag.prototype._read = function() {\n      this.type = this._io.readU4be();\n      this._unnamed1 = this._io.readBytes(2);\n      this.lenCues = this._io.readU2be();\n      this.memoryCount = this._io.readU4be();\n      this.cues = new Array(this.lenCues);\n      for (var i = 0; i < this.lenCues; i++) {\n        this.cues[i] = new CueEntry(this._io, this, this._root);\n      }\n    }\n\n    /**\n     * Identifies whether this tag stores ordinary or hot cues.\n     */\n\n    /**\n     * The length of the cue list.\n     */\n\n    /**\n     * Unsure what this means.\n     */\n\n    return CueTag;\n  })();\n\n  /**\n   * Identifies this as an analysis file.\n   */\n\n  /**\n   * The number of bytes of this header section.\n   */\n\n  /**\n   * The number of bytes in the entire file.\n   */\n\n  /**\n   * The remainder of the file is a sequence of type-tagged sections,\n   * identified by a four-byte magic sequence.\n   */\n\n  return RekordboxAnlz;\n})();\nreturn RekordboxAnlz;\n}));\n","// This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['kaitai-struct/KaitaiStream'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(require('kaitai-struct/KaitaiStream'));\n  } else {\n    root.RekordboxPdb = factory(root.KaitaiStream);\n  }\n}(this, function (KaitaiStream) {\n/**\n * This is a relational database format designed to be efficiently used\n * by very low power devices (there were deployments on 16 bit devices\n * with 32K of RAM). Today you are most likely to encounter it within\n * the Pioneer Professional DJ ecosystem, because it is the format that\n * their rekordbox software uses to write USB and SD media which can be\n * mounted in DJ controllers and used to play and mix music.\n * \n * It has been reverse-engineered to facilitate sophisticated\n * integrations with light and laser shows, videos, and other musical\n * instruments, by supporting deep knowledge of what is playing and\n * what is coming next through monitoring the network communications of\n * the players.\n * \n * The file is divided into fixed-size blocks. The first block has a\n * header that establishes the block size, and lists the tables\n * available in the database, identifying their types and the index of\n * the first of the series of linked pages that make up that table.\n * \n * Each table is made up of a series of rows which may be spread across\n * any number of pages. The pages start with a header describing the\n * page and linking to the next page. The rest of the page is used as a\n * heap: rows are scattered around it, and located using an index\n * structure that builds backwards from the end of the page. Each row\n * of a given type has a fixed size structure which links to any\n * variable-sized strings by their offsets within the page.\n * \n * As changes are made to the table, some records may become unused,\n * and there may be gaps within the heap that are too small to be used\n * by other data. There is a bit map in the row index that identifies\n * which rows are actually present. Rows that are not present must be\n * ignored: they do not contain valid (or even necessarily well-formed)\n * data.\n * \n * The majority of the work in reverse-engineering this format was\n * performed by @henrybetts and @flesniak, for which I am hugely\n * grateful. @GreyCat helped me learn the intricacies (and best\n * practices) of Kaitai far faster than I would have managed on my own.\n * @see {@link https://github.com/Deep-Symmetry/crate-digger/blob/master/doc/Analysis.pdf|Source}\n */\n\nvar RekordboxPdb = (function() {\n  RekordboxPdb.PageType = Object.freeze({\n    TRACKS: 0,\n    GENRES: 1,\n    ARTISTS: 2,\n    ALBUMS: 3,\n    LABELS: 4,\n    KEYS: 5,\n    COLORS: 6,\n    PLAYLIST_TREE: 7,\n    PLAYLIST_ENTRIES: 8,\n    UNKNOWN_9: 9,\n    UNKNOWN_10: 10,\n    UNKNOWN_11: 11,\n    UNKNOWN_12: 12,\n    ARTWORK: 13,\n    UNKNOWN_14: 14,\n    UNKNOWN_15: 15,\n    COLUMNS: 16,\n    UNKNOWN_17: 17,\n    UNKNOWN_18: 18,\n    HISTORY: 19,\n\n    0: \"TRACKS\",\n    1: \"GENRES\",\n    2: \"ARTISTS\",\n    3: \"ALBUMS\",\n    4: \"LABELS\",\n    5: \"KEYS\",\n    6: \"COLORS\",\n    7: \"PLAYLIST_TREE\",\n    8: \"PLAYLIST_ENTRIES\",\n    9: \"UNKNOWN_9\",\n    10: \"UNKNOWN_10\",\n    11: \"UNKNOWN_11\",\n    12: \"UNKNOWN_12\",\n    13: \"ARTWORK\",\n    14: \"UNKNOWN_14\",\n    15: \"UNKNOWN_15\",\n    16: \"COLUMNS\",\n    17: \"UNKNOWN_17\",\n    18: \"UNKNOWN_18\",\n    19: \"HISTORY\",\n  });\n\n  function RekordboxPdb(_io, _parent, _root) {\n    this._io = _io;\n    this._parent = _parent;\n    this._root = _root || this;\n\n    this._read();\n  }\n  RekordboxPdb.prototype._read = function() {\n    this._unnamed0 = this._io.readU4le();\n    this.lenPage = this._io.readU4le();\n    this.numTables = this._io.readU4le();\n    this.nextUnusedPage = this._io.readU4le();\n    this._unnamed4 = this._io.readU4le();\n    this.sequence = this._io.readU4le();\n    this.gap = this._io.readBytes(4);\n    if (!((KaitaiStream.byteArrayCompare(this.gap, [0, 0, 0, 0]) == 0))) {\n      throw new KaitaiStream.ValidationNotEqualError([0, 0, 0, 0], this.gap, this._io, \"/seq/6\");\n    }\n    this.tables = new Array(this.numTables);\n    for (var i = 0; i < this.numTables; i++) {\n      this.tables[i] = new Table(this._io, this, this._root);\n    }\n  }\n\n  /**\n   * A variable length string which can be stored in a variety of\n   * different encodings.\n   */\n\n  var DeviceSqlString = RekordboxPdb.DeviceSqlString = (function() {\n    function DeviceSqlString(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    DeviceSqlString.prototype._read = function() {\n      this.lengthAndKind = this._io.readU1();\n      switch (this.lengthAndKind) {\n      case 64:\n        this.body = new DeviceSqlLongAscii(this._io, this, this._root);\n        break;\n      case 144:\n        this.body = new DeviceSqlLongUtf16le(this._io, this, this._root);\n        break;\n      default:\n        this.body = new DeviceSqlShortAscii(this._io, this, this._root, this.lengthAndKind);\n        break;\n      }\n    }\n\n    /**\n     * Mangled length of an ordinary ASCII string if odd, or a flag\n     * indicating another encoding with a longer length value to\n     * follow.\n     */\n\n    return DeviceSqlString;\n  })();\n\n  /**\n   * A row that holds a playlist name, ID, indication of whether it\n   * is an ordinary playlist or a folder of other playlists, a link\n   * to its parent folder, and its sort order.\n   */\n\n  var PlaylistTreeRow = RekordboxPdb.PlaylistTreeRow = (function() {\n    function PlaylistTreeRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PlaylistTreeRow.prototype._read = function() {\n      this.parentId = this._io.readU4le();\n      this._unnamed1 = this._io.readBytes(4);\n      this.sortOrder = this._io.readU4le();\n      this.id = this._io.readU4le();\n      this.rawIsFolder = this._io.readU4le();\n      this.name = new DeviceSqlString(this._io, this, this._root);\n    }\n    Object.defineProperty(PlaylistTreeRow.prototype, 'isFolder', {\n      get: function() {\n        if (this._m_isFolder !== undefined)\n          return this._m_isFolder;\n        this._m_isFolder = this.rawIsFolder != 0;\n        return this._m_isFolder;\n      }\n    });\n\n    /**\n     * The ID of the `playlist_tree_row` in which this one can be\n     * found, or `0` if this playlist exists at the root level.\n     */\n\n    /**\n     * The order in which the entries of this playlist are sorted.\n     */\n\n    /**\n     * The unique identifier by which this playlist or folder can\n     * be requested and linked from other rows.\n     */\n\n    /**\n     * Has a non-zero value if this is actually a folder rather\n     * than a playlist.\n     */\n\n    /**\n     * The variable-length string naming the playlist.\n     */\n\n    return PlaylistTreeRow;\n  })();\n\n  /**\n   * A row that holds a color name and the associated ID.\n   */\n\n  var ColorRow = RekordboxPdb.ColorRow = (function() {\n    function ColorRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    ColorRow.prototype._read = function() {\n      this._unnamed0 = this._io.readBytes(5);\n      this.id = this._io.readU2le();\n      this._unnamed2 = this._io.readU1();\n      this.name = new DeviceSqlString(this._io, this, this._root);\n    }\n\n    /**\n     * The unique identifier by which this color can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * The variable-length string naming the color.\n     */\n\n    return ColorRow;\n  })();\n\n  /**\n   * An ASCII-encoded string up to 127 bytes long.\n   */\n\n  var DeviceSqlShortAscii = RekordboxPdb.DeviceSqlShortAscii = (function() {\n    function DeviceSqlShortAscii(_io, _parent, _root, mangledLength) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n      this.mangledLength = mangledLength;\n\n      this._read();\n    }\n    DeviceSqlShortAscii.prototype._read = function() {\n      if ( ((KaitaiStream.mod(this.mangledLength, 2) > 0) && (this.length >= 0)) ) {\n        this.text = KaitaiStream.bytesToStr(this._io.readBytes(this.length), \"ascii\");\n      }\n    }\n\n    /**\n     * The un-mangled length of the string, in bytes.\n     */\n    Object.defineProperty(DeviceSqlShortAscii.prototype, 'length', {\n      get: function() {\n        if (this._m_length !== undefined)\n          return this._m_length;\n        this._m_length = (Math.floor((this.mangledLength - 1) / 2) - 1);\n        return this._m_length;\n      }\n    });\n\n    /**\n     * The content of the string.\n     */\n\n    /**\n     * Contains the actual length, incremented, doubled, and\n     * incremented again. Go figure.\n     */\n\n    return DeviceSqlShortAscii;\n  })();\n\n  /**\n   * A row that holds an album name and ID.\n   */\n\n  var AlbumRow = RekordboxPdb.AlbumRow = (function() {\n    function AlbumRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    AlbumRow.prototype._read = function() {\n      this._unnamed0 = this._io.readU2le();\n      this.indexShift = this._io.readU2le();\n      this._unnamed2 = this._io.readU4le();\n      this.artistId = this._io.readU4le();\n      this.id = this._io.readU4le();\n      this._unnamed5 = this._io.readU4le();\n      this._unnamed6 = this._io.readU1();\n      this.ofsName = this._io.readU1();\n    }\n\n    /**\n     * The name of this album.\n     */\n    Object.defineProperty(AlbumRow.prototype, 'name', {\n      get: function() {\n        if (this._m_name !== undefined)\n          return this._m_name;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsName));\n        this._m_name = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_name;\n      }\n    });\n\n    /**\n     * Some kind of magic word? Usually 0x80, 0x00.\n     */\n\n    /**\n     * TODO name from @flesniak, but what does it mean?\n     */\n\n    /**\n     * Identifies the artist associated with the album.\n     */\n\n    /**\n     * The unique identifier by which this album can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * @flesniak says: \"alwayx 0x03, maybe an unindexed empty string\"\n     */\n\n    /**\n     * The location of the variable-length name string, relative to\n     * the start of this row.\n     */\n\n    return AlbumRow;\n  })();\n\n  /**\n   * A table page, consisting of a short header describing the\n   * content of the page and linking to the next page, followed by a\n   * heap in which row data is found. At the end of the page there is\n   * an index which locates all rows present in the heap via their\n   * offsets past the end of the page header.\n   */\n\n  var Page = RekordboxPdb.Page = (function() {\n    function Page(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    Page.prototype._read = function() {\n      this.gap = this._io.readBytes(4);\n      if (!((KaitaiStream.byteArrayCompare(this.gap, [0, 0, 0, 0]) == 0))) {\n        throw new KaitaiStream.ValidationNotEqualError([0, 0, 0, 0], this.gap, this._io, \"/types/page/seq/0\");\n      }\n      this.pageIndex = this._io.readU4le();\n      this.type = this._io.readU4le();\n      this.nextPage = new PageRef(this._io, this, this._root);\n      this._unnamed4 = this._io.readU4le();\n      this._unnamed5 = this._io.readBytes(4);\n      this.numRowsSmall = this._io.readU1();\n      this._unnamed7 = this._io.readU1();\n      this._unnamed8 = this._io.readU1();\n      this.pageFlags = this._io.readU1();\n      this.freeSize = this._io.readU2le();\n      this.usedSize = this._io.readU2le();\n      this._unnamed12 = this._io.readU2le();\n      this.numRowsLarge = this._io.readU2le();\n      this._unnamed14 = this._io.readU2le();\n      this._unnamed15 = this._io.readU2le();\n      if (false) {\n        this.heap = this._io.readBytesFull();\n      }\n    }\n\n    /**\n     * The number of rows on this page (controls the number of row\n     * index entries there are, but some of those may not be marked\n     * as present in the table due to deletion).\n     */\n    Object.defineProperty(Page.prototype, 'numRows', {\n      get: function() {\n        if (this._m_numRows !== undefined)\n          return this._m_numRows;\n        this._m_numRows = ( ((this.numRowsLarge > this.numRowsSmall) && (this.numRowsLarge != 8191))  ? this.numRowsLarge : this.numRowsSmall);\n        return this._m_numRows;\n      }\n    });\n\n    /**\n     * The number of row groups that are present in the index. Each\n     * group can hold up to sixteen rows. All but the final one\n     * will hold sixteen rows.\n     */\n    Object.defineProperty(Page.prototype, 'numGroups', {\n      get: function() {\n        if (this._m_numGroups !== undefined)\n          return this._m_numGroups;\n        this._m_numGroups = (Math.floor((this.numRows - 1) / 16) + 1);\n        return this._m_numGroups;\n      }\n    });\n\n    /**\n     * The actual row groups making up the row index. Each group\n     * can hold up to sixteen rows. Non-data pages do not have\n     * actual rows, and attempting to parse them can crash.\n     */\n    Object.defineProperty(Page.prototype, 'rowGroups', {\n      get: function() {\n        if (this._m_rowGroups !== undefined)\n          return this._m_rowGroups;\n        if (this.isDataPage) {\n          this._m_rowGroups = new Array(this.numGroups);\n          for (var i = 0; i < this.numGroups; i++) {\n            this._m_rowGroups[i] = new RowGroup(this._io, this, this._root, i);\n          }\n        }\n        return this._m_rowGroups;\n      }\n    });\n    Object.defineProperty(Page.prototype, 'heapPos', {\n      get: function() {\n        if (this._m_heapPos !== undefined)\n          return this._m_heapPos;\n        this._m_heapPos = this._io.pos;\n        return this._m_heapPos;\n      }\n    });\n    Object.defineProperty(Page.prototype, 'isDataPage', {\n      get: function() {\n        if (this._m_isDataPage !== undefined)\n          return this._m_isDataPage;\n        this._m_isDataPage = (this.pageFlags & 64) == 0;\n        return this._m_isDataPage;\n      }\n    });\n\n    /**\n     * Only exposed until\n     * https://github.com/kaitai-io/kaitai_struct/issues/825 can be\n     * fixed.\n     */\n\n    /**\n     * Matches the index we used to look up the page, sanity check?\n     */\n\n    /**\n     * Identifies the type of information stored in the rows of this page.\n     */\n\n    /**\n     * Index of the next page containing this type of rows. Points past\n     * the end of the file if there are no more.\n     */\n\n    /**\n     * @flesniak said: \"sequence number (0->1: 8->13, 1->2: 22, 2->3: 27)\"\n     */\n\n    /**\n     * Holds the value used for `num_rows` (see below) unless\n     * `num_rows_large` is larger (but not equal to `0x1fff`). This\n     * seems like some strange mechanism to deal with the fact that\n     * lots of tiny entries, such as are found in the\n     * `playlist_entries` table, are too big to count with a single\n     * byte. But why not just always use `num_rows_large`, then?\n     */\n\n    /**\n     * @flesniak said: \"a bitmask (1st track: 32)\"\n     */\n\n    /**\n     * @flesniak said: \"often 0, sometimes larger, esp. for pages\n     * with high real_entry_count (e.g. 12 for 101 entries)\"\n     */\n\n    /**\n     * @flesniak said: \"strange pages: 0x44, 0x64; otherwise seen: 0x24, 0x34\"\n     */\n\n    /**\n     * Unused space (in bytes) in the page heap, excluding the row\n     * index at end of page.\n     */\n\n    /**\n     * The number of bytes that are in use in the page heap.\n     */\n\n    /**\n     * @flesniak said: \"(0->1: 2)\"\n     */\n\n    /**\n     * Holds the value used for `num_rows` (as described above)\n     * when that is too large to fit into `num_rows_small`, and\n     * that situation seems to be indicated when this value is\n     * larger than `num_rows_small`, but not equal to `0x1fff`.\n     * This seems like some strange mechanism to deal with the fact\n     * that lots of tiny entries, such as are found in the\n     * `playlist_entries` table, are too big to count with a single\n     * byte. But why not just always use this value, then?\n     */\n\n    /**\n     * @flesniak said: \"1004 for strange blocks, 0 otherwise\"\n     */\n\n    /**\n     * @flesniak said: \"always 0 except 1 for history pages, num\n     * entries for strange pages?\"\n     */\n\n    return Page;\n  })();\n\n  /**\n   * A group of row indices, which are built backwards from the end\n   * of the page. Holds up to sixteen row offsets, along with a bit\n   * mask that indicates whether each row is actually present in the\n   * table.\n   */\n\n  var RowGroup = RekordboxPdb.RowGroup = (function() {\n    function RowGroup(_io, _parent, _root, groupIndex) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n      this.groupIndex = groupIndex;\n\n      this._read();\n    }\n    RowGroup.prototype._read = function() {\n    }\n\n    /**\n     * The starting point of this group of row indices.\n     */\n    Object.defineProperty(RowGroup.prototype, 'base', {\n      get: function() {\n        if (this._m_base !== undefined)\n          return this._m_base;\n        this._m_base = (this._root.lenPage - (this.groupIndex * 36));\n        return this._m_base;\n      }\n    });\n\n    /**\n     * Each bit specifies whether a particular row is present. The\n     * low order bit corresponds to the first row in this index,\n     * whose offset immediately precedes these flag bits. The\n     * second bit corresponds to the row whose offset precedes\n     * that, and so on.\n     */\n    Object.defineProperty(RowGroup.prototype, 'rowPresentFlags', {\n      get: function() {\n        if (this._m_rowPresentFlags !== undefined)\n          return this._m_rowPresentFlags;\n        var _pos = this._io.pos;\n        this._io.seek((this.base - 4));\n        this._m_rowPresentFlags = this._io.readU2le();\n        this._io.seek(_pos);\n        return this._m_rowPresentFlags;\n      }\n    });\n\n    /**\n     * The row offsets in this group.\n     */\n    Object.defineProperty(RowGroup.prototype, 'rows', {\n      get: function() {\n        if (this._m_rows !== undefined)\n          return this._m_rows;\n        this._m_rows = new Array((this.groupIndex < (this._parent.numGroups - 1) ? 16 : (KaitaiStream.mod((this._parent.numRows - 1), 16) + 1)));\n        for (var i = 0; i < (this.groupIndex < (this._parent.numGroups - 1) ? 16 : (KaitaiStream.mod((this._parent.numRows - 1), 16) + 1)); i++) {\n          this._m_rows[i] = new RowRef(this._io, this, this._root, i);\n        }\n        return this._m_rows;\n      }\n    });\n\n    /**\n     * Identifies which group is being generated. They build backwards\n     * from the end of the page.\n     */\n\n    return RowGroup;\n  })();\n\n  /**\n   * A row that holds a genre name and the associated ID.\n   */\n\n  var GenreRow = RekordboxPdb.GenreRow = (function() {\n    function GenreRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    GenreRow.prototype._read = function() {\n      this.id = this._io.readU4le();\n      this.name = new DeviceSqlString(this._io, this, this._root);\n    }\n\n    /**\n     * The unique identifier by which this genre can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * The variable-length string naming the genre.\n     */\n\n    return GenreRow;\n  })();\n\n  /**\n   * A row that holds the path to an album art image file and the\n   * associated artwork ID.\n   */\n\n  var ArtworkRow = RekordboxPdb.ArtworkRow = (function() {\n    function ArtworkRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    ArtworkRow.prototype._read = function() {\n      this.id = this._io.readU4le();\n      this.path = new DeviceSqlString(this._io, this, this._root);\n    }\n\n    /**\n     * The unique identifier by which this art can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * The variable-length file path string at which the art file\n     * can be found.\n     */\n\n    return ArtworkRow;\n  })();\n\n  /**\n   * An ASCII-encoded string preceded by a two-byte length field.\n   */\n\n  var DeviceSqlLongAscii = RekordboxPdb.DeviceSqlLongAscii = (function() {\n    function DeviceSqlLongAscii(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    DeviceSqlLongAscii.prototype._read = function() {\n      this.length = this._io.readU2le();\n      this.text = KaitaiStream.bytesToStr(this._io.readBytes(this.length), \"ascii\");\n    }\n\n    /**\n     * Contains the length of the string in bytes.\n     */\n\n    /**\n     * The content of the string.\n     */\n\n    return DeviceSqlLongAscii;\n  })();\n\n  /**\n   * A row that holds an artist name and ID.\n   */\n\n  var ArtistRow = RekordboxPdb.ArtistRow = (function() {\n    function ArtistRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    ArtistRow.prototype._read = function() {\n      this.subtype = this._io.readU2le();\n      this.indexShift = this._io.readU2le();\n      this.id = this._io.readU4le();\n      this._unnamed3 = this._io.readU1();\n      this.ofsNameNear = this._io.readU1();\n    }\n\n    /**\n     * For names that might be further than 0xff bytes from the\n     * start of this row, this holds a two-byte offset, and is\n     * signalled by the subtype value.\n     */\n    Object.defineProperty(ArtistRow.prototype, 'ofsNameFar', {\n      get: function() {\n        if (this._m_ofsNameFar !== undefined)\n          return this._m_ofsNameFar;\n        if (this.subtype == 100) {\n          var _pos = this._io.pos;\n          this._io.seek((this._parent.rowBase + 10));\n          this._m_ofsNameFar = this._io.readU2le();\n          this._io.seek(_pos);\n        }\n        return this._m_ofsNameFar;\n      }\n    });\n\n    /**\n     * The name of this artist.\n     */\n    Object.defineProperty(ArtistRow.prototype, 'name', {\n      get: function() {\n        if (this._m_name !== undefined)\n          return this._m_name;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + (this.subtype == 100 ? this.ofsNameFar : this.ofsNameNear)));\n        this._m_name = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_name;\n      }\n    });\n\n    /**\n     * Usually 0x60, but 0x64 means we have a long name offset\n     * embedded in the row.\n     */\n\n    /**\n     * TODO name from @flesniak, but what does it mean?\n     */\n\n    /**\n     * The unique identifier by which this artist can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * @flesniak says: \"always 0x03, maybe an unindexed empty string\"\n     */\n\n    /**\n     * The location of the variable-length name string, relative to\n     * the start of this row, unless subtype is 0x64.\n     */\n\n    return ArtistRow;\n  })();\n\n  /**\n   * An index which points to a table page (its offset can be found\n   * by multiplying the index by the `page_len` value in the file\n   * header). This type allows the linked page to be lazy loaded.\n   */\n\n  var PageRef = RekordboxPdb.PageRef = (function() {\n    function PageRef(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PageRef.prototype._read = function() {\n      this.index = this._io.readU4le();\n    }\n\n    /**\n     * When referenced, loads the specified page and parses its\n     * contents appropriately for the type of data it contains.\n     */\n    Object.defineProperty(PageRef.prototype, 'body', {\n      get: function() {\n        if (this._m_body !== undefined)\n          return this._m_body;\n        var io = this._root._io;\n        var _pos = io.pos;\n        io.seek((this._root.lenPage * this.index));\n        this._raw__m_body = io.readBytes(this._root.lenPage);\n        var _io__raw__m_body = new KaitaiStream(this._raw__m_body);\n        this._m_body = new Page(_io__raw__m_body, this, this._root);\n        io.seek(_pos);\n        return this._m_body;\n      }\n    });\n\n    /**\n     * Identifies the desired page number.\n     */\n\n    return PageRef;\n  })();\n\n  /**\n   * A row that describes a track that can be played, with many\n   * details about the music, and links to other tables like artists,\n   * albums, keys, etc.\n   */\n\n  var TrackRow = RekordboxPdb.TrackRow = (function() {\n    function TrackRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    TrackRow.prototype._read = function() {\n      this._unnamed0 = this._io.readU2le();\n      this.indexShift = this._io.readU2le();\n      this.bitmask = this._io.readU4le();\n      this.sampleRate = this._io.readU4le();\n      this.composerId = this._io.readU4le();\n      this.fileSize = this._io.readU4le();\n      this._unnamed6 = this._io.readU4le();\n      this._unnamed7 = this._io.readU2le();\n      this._unnamed8 = this._io.readU2le();\n      this.artworkId = this._io.readU4le();\n      this.keyId = this._io.readU4le();\n      this.originalArtistId = this._io.readU4le();\n      this.labelId = this._io.readU4le();\n      this.remixerId = this._io.readU4le();\n      this.bitrate = this._io.readU4le();\n      this.trackNumber = this._io.readU4le();\n      this.tempo = this._io.readU4le();\n      this.genreId = this._io.readU4le();\n      this.albumId = this._io.readU4le();\n      this.artistId = this._io.readU4le();\n      this.id = this._io.readU4le();\n      this.discNumber = this._io.readU2le();\n      this.playCount = this._io.readU2le();\n      this.year = this._io.readU2le();\n      this.sampleDepth = this._io.readU2le();\n      this.duration = this._io.readU2le();\n      this._unnamed26 = this._io.readU2le();\n      this.colorId = this._io.readU1();\n      this.rating = this._io.readU1();\n      this._unnamed29 = this._io.readU2le();\n      this._unnamed30 = this._io.readU2le();\n      this.ofsStrings = new Array(21);\n      for (var i = 0; i < 21; i++) {\n        this.ofsStrings[i] = this._io.readU2le();\n      }\n    }\n\n    /**\n     * A string of unknown purpose, usually empty.\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString8', {\n      get: function() {\n        if (this._m_unknownString8 !== undefined)\n          return this._m_unknownString8;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[18]));\n        this._m_unknownString8 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString8;\n      }\n    });\n\n    /**\n     * A string of unknown purpose, usually empty.\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString6', {\n      get: function() {\n        if (this._m_unknownString6 !== undefined)\n          return this._m_unknownString6;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[9]));\n        this._m_unknownString6 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString6;\n      }\n    });\n\n    /**\n     * A string containing the date this track was analyzed by rekordbox.\n     */\n    Object.defineProperty(TrackRow.prototype, 'analyzeDate', {\n      get: function() {\n        if (this._m_analyzeDate !== undefined)\n          return this._m_analyzeDate;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[15]));\n        this._m_analyzeDate = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_analyzeDate;\n      }\n    });\n\n    /**\n     * The file path of the track audio file.\n     */\n    Object.defineProperty(TrackRow.prototype, 'filePath', {\n      get: function() {\n        if (this._m_filePath !== undefined)\n          return this._m_filePath;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[20]));\n        this._m_filePath = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_filePath;\n      }\n    });\n\n    /**\n     * A string whose value is always either empty or \"ON\", and\n     * which apparently for some insane reason is used, rather than\n     * a single bit somewhere, to control whether hot-cues are\n     * auto-loaded for the track.\n     */\n    Object.defineProperty(TrackRow.prototype, 'autoloadHotcues', {\n      get: function() {\n        if (this._m_autoloadHotcues !== undefined)\n          return this._m_autoloadHotcues;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[7]));\n        this._m_autoloadHotcues = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_autoloadHotcues;\n      }\n    });\n\n    /**\n     * A string containing the date this track was added to the collection.\n     */\n    Object.defineProperty(TrackRow.prototype, 'dateAdded', {\n      get: function() {\n        if (this._m_dateAdded !== undefined)\n          return this._m_dateAdded;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[10]));\n        this._m_dateAdded = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_dateAdded;\n      }\n    });\n\n    /**\n     * A string of unknown purpose; @flesniak said \"strange\n     * strings, often zero length, sometimes low binary values\n     * 0x01/0x02 as content\"\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString3', {\n      get: function() {\n        if (this._m_unknownString3 !== undefined)\n          return this._m_unknownString3;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[3]));\n        this._m_unknownString3 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString3;\n      }\n    });\n\n    /**\n     * A string of unknown purpose, which @flesnik named.\n     */\n    Object.defineProperty(TrackRow.prototype, 'texter', {\n      get: function() {\n        if (this._m_texter !== undefined)\n          return this._m_texter;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[1]));\n        this._m_texter = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_texter;\n      }\n    });\n\n    /**\n     * A string whose value is always either empty or \"ON\", and\n     * which apparently for some insane reason is used, rather than\n     * a single bit somewhere, to control whether the track\n     * information is visible on Kuvo.\n     */\n    Object.defineProperty(TrackRow.prototype, 'kuvoPublic', {\n      get: function() {\n        if (this._m_kuvoPublic !== undefined)\n          return this._m_kuvoPublic;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[6]));\n        this._m_kuvoPublic = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_kuvoPublic;\n      }\n    });\n\n    /**\n     * A string naming the remix of the track, if known.\n     */\n    Object.defineProperty(TrackRow.prototype, 'mixName', {\n      get: function() {\n        if (this._m_mixName !== undefined)\n          return this._m_mixName;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[12]));\n        this._m_mixName = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_mixName;\n      }\n    });\n\n    /**\n     * A string of unknown purpose.\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString5', {\n      get: function() {\n        if (this._m_unknownString5 !== undefined)\n          return this._m_unknownString5;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[8]));\n        this._m_unknownString5 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString5;\n      }\n    });\n\n    /**\n     * A string of unknown purpose; @flesniak said \"strange\n     * strings, often zero length, sometimes low binary values\n     * 0x01/0x02 as content\"\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString4', {\n      get: function() {\n        if (this._m_unknownString4 !== undefined)\n          return this._m_unknownString4;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[4]));\n        this._m_unknownString4 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString4;\n      }\n    });\n\n    /**\n     * A string of unknown purpose, which @flesnik named.\n     */\n    Object.defineProperty(TrackRow.prototype, 'message', {\n      get: function() {\n        if (this._m_message !== undefined)\n          return this._m_message;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[5]));\n        this._m_message = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_message;\n      }\n    });\n\n    /**\n     * A string of unknown purpose; @flesniak said \"thought\n     * tracknumber -> wrong!\"\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString2', {\n      get: function() {\n        if (this._m_unknownString2 !== undefined)\n          return this._m_unknownString2;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[2]));\n        this._m_unknownString2 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString2;\n      }\n    });\n\n    /**\n     * International Standard Recording Code of track\n     * when known (in mangled format).\n     */\n    Object.defineProperty(TrackRow.prototype, 'isrc', {\n      get: function() {\n        if (this._m_isrc !== undefined)\n          return this._m_isrc;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[0]));\n        this._m_isrc = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_isrc;\n      }\n    });\n\n    /**\n     * A string of unknown purpose, usually empty.\n     */\n    Object.defineProperty(TrackRow.prototype, 'unknownString7', {\n      get: function() {\n        if (this._m_unknownString7 !== undefined)\n          return this._m_unknownString7;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[13]));\n        this._m_unknownString7 = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_unknownString7;\n      }\n    });\n\n    /**\n     * The file name of the track audio file.\n     */\n    Object.defineProperty(TrackRow.prototype, 'filename', {\n      get: function() {\n        if (this._m_filename !== undefined)\n          return this._m_filename;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[19]));\n        this._m_filename = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_filename;\n      }\n    });\n\n    /**\n     * The file path of the track analysis, which allows rapid\n     * seeking to particular times in variable bit-rate files,\n     * jumping to particular beats, visual waveform previews, and\n     * stores cue points and loops.\n     */\n    Object.defineProperty(TrackRow.prototype, 'analyzePath', {\n      get: function() {\n        if (this._m_analyzePath !== undefined)\n          return this._m_analyzePath;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[14]));\n        this._m_analyzePath = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_analyzePath;\n      }\n    });\n\n    /**\n     * The comment assigned to the track by the DJ, if any.\n     */\n    Object.defineProperty(TrackRow.prototype, 'comment', {\n      get: function() {\n        if (this._m_comment !== undefined)\n          return this._m_comment;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[16]));\n        this._m_comment = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_comment;\n      }\n    });\n\n    /**\n     * A string containing the date this track was released, if known.\n     */\n    Object.defineProperty(TrackRow.prototype, 'releaseDate', {\n      get: function() {\n        if (this._m_releaseDate !== undefined)\n          return this._m_releaseDate;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[11]));\n        this._m_releaseDate = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_releaseDate;\n      }\n    });\n\n    /**\n     * The title of the track.\n     */\n    Object.defineProperty(TrackRow.prototype, 'title', {\n      get: function() {\n        if (this._m_title !== undefined)\n          return this._m_title;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.rowBase + this.ofsStrings[17]));\n        this._m_title = new DeviceSqlString(this._io, this, this._root);\n        this._io.seek(_pos);\n        return this._m_title;\n      }\n    });\n\n    /**\n     * Some kind of magic word? Usually 0x24, 0x00.\n     */\n\n    /**\n     * TODO name from @flesniak, but what does it mean?\n     */\n\n    /**\n     * TODO what do the bits mean?\n     */\n\n    /**\n     * Playback sample rate of the audio file.\n     */\n\n    /**\n     * References a row in the artist table if the composer is\n     * known.\n     */\n\n    /**\n     * The length of the audio file, in bytes.\n     */\n\n    /**\n     * Some ID? Purpose as yet unknown.\n     */\n\n    /**\n     * From @flesniak: \"always 19048?\"\n     */\n\n    /**\n     * From @flesniak: \"always 30967?\"\n     */\n\n    /**\n     * References a row in the artwork table if there is album art.\n     */\n\n    /**\n     * References a row in the keys table if the track has a known\n     * main musical key.\n     */\n\n    /**\n     * References a row in the artwork table if this is a cover\n     * performance and the original artist is known.\n     */\n\n    /**\n     * References a row in the labels table if the track has a\n     * known record label.\n     */\n\n    /**\n     * References a row in the artists table if the track has a\n     * known remixer.\n     */\n\n    /**\n     * Playback bit rate of the audio file.\n     */\n\n    /**\n     * The position of the track within an album.\n     */\n\n    /**\n     * The tempo at the start of the track in beats per minute,\n     * multiplied by 100.\n     */\n\n    /**\n     * References a row in the genres table if the track has a\n     * known musical genre.\n     */\n\n    /**\n     * References a row in the albums table if the track has a\n     * known album.\n     */\n\n    /**\n     * References a row in the artists table if the track has a\n     * known performer.\n     */\n\n    /**\n     * The id by which this track can be looked up; players will\n     * report this value in their status packets when they are\n     * playing the track.\n     */\n\n    /**\n     * The number of the disc on which this track is found, if it\n     * is known to be part of a multi-disc album.\n     */\n\n    /**\n     * The number of times this track has been played.\n     */\n\n    /**\n     * The year in which this track was released.\n     */\n\n    /**\n     * The number of bits per sample of the audio file.\n     */\n\n    /**\n     * The length, in seconds, of the track when played at normal\n     * speed.\n     */\n\n    /**\n     * From @flesniak: \"always 41?\"\n     */\n\n    /**\n     * References a row in the colors table if the track has been\n     * assigned a color.\n     */\n\n    /**\n     * The number of stars to display for the track, 0 to 5.\n     */\n\n    /**\n     * From @flesniak: \"always 1?\"\n     */\n\n    /**\n     * From @flesniak: \"alternating 2 or 3\"\n     */\n\n    /**\n     * The location, relative to the start of this row, of a\n     * variety of variable-length strings.\n     */\n\n    return TrackRow;\n  })();\n\n  /**\n   * A row that holds a musical key and the associated ID.\n   */\n\n  var KeyRow = RekordboxPdb.KeyRow = (function() {\n    function KeyRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    KeyRow.prototype._read = function() {\n      this.id = this._io.readU4le();\n      this.id2 = this._io.readU4le();\n      this.name = new DeviceSqlString(this._io, this, this._root);\n    }\n\n    /**\n     * The unique identifier by which this key can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * Seems to be a second copy of the ID?\n     */\n\n    /**\n     * The variable-length string naming the key.\n     */\n\n    return KeyRow;\n  })();\n\n  /**\n   * A row that associates a track with a position in a playlist.\n   */\n\n  var PlaylistEntryRow = RekordboxPdb.PlaylistEntryRow = (function() {\n    function PlaylistEntryRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    PlaylistEntryRow.prototype._read = function() {\n      this.entryIndex = this._io.readU4le();\n      this.trackId = this._io.readU4le();\n      this.playlistId = this._io.readU4le();\n    }\n\n    /**\n     * The position within the playlist represented by this entry.\n     */\n\n    /**\n     * The track found at this position in the playlist.\n     */\n\n    /**\n     * The playlist to which this entry belongs.\n     */\n\n    return PlaylistEntryRow;\n  })();\n\n  /**\n   * A row that holds a label name and the associated ID.\n   */\n\n  var LabelRow = RekordboxPdb.LabelRow = (function() {\n    function LabelRow(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    LabelRow.prototype._read = function() {\n      this.id = this._io.readU4le();\n      this.name = new DeviceSqlString(this._io, this, this._root);\n    }\n\n    /**\n     * The unique identifier by which this label can be requested\n     * and linked from other rows (such as tracks).\n     */\n\n    /**\n     * The variable-length string naming the label.\n     */\n\n    return LabelRow;\n  })();\n\n  /**\n   * A UTF-16LE-encoded string preceded by a two-byte length field.\n   */\n\n  var DeviceSqlLongUtf16le = RekordboxPdb.DeviceSqlLongUtf16le = (function() {\n    function DeviceSqlLongUtf16le(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    DeviceSqlLongUtf16le.prototype._read = function() {\n      this.length = this._io.readU2le();\n      this._unnamed1 = this._io.readU1();\n      this.text = KaitaiStream.bytesToStr(this._io.readBytes((this.length - 4)), \"utf-16le\");\n    }\n\n    /**\n     * Contains the length of the string in bytes, including two trailing nulls.\n     */\n\n    /**\n     * The content of the string.\n     */\n\n    return DeviceSqlLongUtf16le;\n  })();\n\n  /**\n   * Each table is a linked list of pages containing rows of a single\n   * type. This header describes the nature of the table and links to\n   * its pages by index.\n   */\n\n  var Table = RekordboxPdb.Table = (function() {\n    function Table(_io, _parent, _root) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n\n      this._read();\n    }\n    Table.prototype._read = function() {\n      this.type = this._io.readU4le();\n      this.emptyCandidate = this._io.readU4le();\n      this.firstPage = new PageRef(this._io, this, this._root);\n      this.lastPage = new PageRef(this._io, this, this._root);\n    }\n\n    /**\n     * Identifies the kind of rows that are found in this table.\n     */\n\n    /**\n     * Links to the chain of pages making up that table. The first\n     * page seems to always contain similar garbage patterns and\n     * zero rows, but the next page it links to contains the start\n     * of the meaningful data rows.\n     */\n\n    /**\n     * Holds the index of the last page that makes up this table.\n     * When following the linked list of pages of the table, you\n     * either need to stop when you reach this page, or when you\n     * notice that the `next_page` link you followed took you to a\n     * page of a different `type`.\n     */\n\n    return Table;\n  })();\n\n  /**\n   * An offset which points to a row in the table, whose actual\n   * presence is controlled by one of the bits in\n   * `row_present_flags`. This instance allows the row itself to be\n   * lazily loaded, unless it is not present, in which case there is\n   * no content to be loaded.\n   */\n\n  var RowRef = RekordboxPdb.RowRef = (function() {\n    function RowRef(_io, _parent, _root, rowIndex) {\n      this._io = _io;\n      this._parent = _parent;\n      this._root = _root || this;\n      this.rowIndex = rowIndex;\n\n      this._read();\n    }\n    RowRef.prototype._read = function() {\n    }\n\n    /**\n     * The offset of the start of the row (in bytes past the end of\n     * the page header).\n     */\n    Object.defineProperty(RowRef.prototype, 'ofsRow', {\n      get: function() {\n        if (this._m_ofsRow !== undefined)\n          return this._m_ofsRow;\n        var _pos = this._io.pos;\n        this._io.seek((this._parent.base - (6 + (2 * this.rowIndex))));\n        this._m_ofsRow = this._io.readU2le();\n        this._io.seek(_pos);\n        return this._m_ofsRow;\n      }\n    });\n\n    /**\n     * The location of this row relative to the start of the page.\n     * A variety of pointers (such as all device_sql_string values)\n     * are calculated with respect to this position.\n     */\n    Object.defineProperty(RowRef.prototype, 'rowBase', {\n      get: function() {\n        if (this._m_rowBase !== undefined)\n          return this._m_rowBase;\n        this._m_rowBase = (this.ofsRow + this._parent._parent.heapPos);\n        return this._m_rowBase;\n      }\n    });\n\n    /**\n     * Indicates whether the row index considers this row to be\n     * present in the table. Will be `false` if the row has been\n     * deleted.\n     */\n    Object.defineProperty(RowRef.prototype, 'present', {\n      get: function() {\n        if (this._m_present !== undefined)\n          return this._m_present;\n        this._m_present = (((this._parent.rowPresentFlags >>> this.rowIndex) & 1) != 0 ? true : false);\n        return this._m_present;\n      }\n    });\n\n    /**\n     * The actual content of the row, as long as it is present.\n     */\n    Object.defineProperty(RowRef.prototype, 'body', {\n      get: function() {\n        if (this._m_body !== undefined)\n          return this._m_body;\n        if (this.present) {\n          var _pos = this._io.pos;\n          this._io.seek(this.rowBase);\n          switch (this._parent._parent.type) {\n          case RekordboxPdb.PageType.PLAYLIST_TREE:\n            this._m_body = new PlaylistTreeRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.KEYS:\n            this._m_body = new KeyRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.ARTISTS:\n            this._m_body = new ArtistRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.ALBUMS:\n            this._m_body = new AlbumRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.GENRES:\n            this._m_body = new GenreRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.ARTWORK:\n            this._m_body = new ArtworkRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.PLAYLIST_ENTRIES:\n            this._m_body = new PlaylistEntryRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.LABELS:\n            this._m_body = new LabelRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.TRACKS:\n            this._m_body = new TrackRow(this._io, this, this._root);\n            break;\n          case RekordboxPdb.PageType.COLORS:\n            this._m_body = new ColorRow(this._io, this, this._root);\n            break;\n          }\n          this._io.seek(_pos);\n        }\n        return this._m_body;\n      }\n    });\n\n    /**\n     * Identifies which row within the row index this reference\n     * came from, so the correct flag can be checked for the row\n     * presence and the correct row offset can be found.\n     */\n\n    return RowRef;\n  })();\n\n  /**\n   * Unknown purpose, perhaps an unoriginal signature, seems to\n   * always have the value 0.\n   */\n\n  /**\n   * The database page size, in bytes. Pages are referred to by\n   * index, so this size is needed to calculate their offset, and\n   * table pages have a row index structure which is built from the\n   * end of the page backwards, so finding that also requires this\n   * value.\n   */\n\n  /**\n   * Determines the number of table entries that are present. Each\n   * table is a linked list of pages containing rows of a particular\n   * type.\n   */\n\n  /**\n   * @flesinak said: \"Not used as any `empty_candidate`, points\n   * past the end of the file.\"\n   */\n\n  /**\n   * @flesniak said: \"Always incremented by at least one,\n   * sometimes by two or three.\"\n   */\n\n  /**\n   * Only exposed until\n   * https://github.com/kaitai-io/kaitai_struct/issues/825 can be\n   * fixed.\n   */\n\n  /**\n   * Describes and links to the tables present in the database.\n   */\n\n  return RekordboxPdb;\n})();\nreturn RekordboxPdb;\n}));\n","/**\n * The default virtual CDJ ID to use.\n *\n * This particular ID is out of the 1-6 range, thus will not be able to request\n * metadata via the remotedb for CDJs.\n */\nexport const DEFAULT_VCDJ_ID = 0x07;\n\n/**\n * The port on which devices on the prolink network announce themselves.\n */\nexport const ANNOUNCE_PORT = 50000;\n\n/**\n * The port on which devices on the prolink network send beat timing information.\n */\nexport const BEAT_PORT = 50001;\n\n/**\n * The port on which devices on the prolink network announce themselves.\n */\nexport const STATUS_PORT = 50002;\n\n/**\n * The ammount of time in ms between sending each announcment packet.\n */\nexport const ANNOUNCE_INTERVAL = 1500;\n\n// prettier-ignore\n/**\n * All UDP packets on the PRO DJ LINK network start with this magic header.\n */\nexport const PROLINK_HEADER = Uint8Array.of(\n  0x51, 0x73, 0x70, 0x74, 0x31,\n  0x57, 0x6d, 0x4a, 0x4f, 0x4c\n);\n\n/**\n * VirtualCDJName is the name given to the Virtual CDJ device.\n */\nexport const VIRTUAL_CDJ_NAME = 'prolink-typescript';\n\n/**\n * VirtualCDJFirmware is a string indicating the firmware version reported with\n * status packets.\n */\nexport const VIRTUAL_CDJ_FIRMWARE = '1.43';\n","import {Socket} from 'dgram';\n\nimport {BEAT_PORT, PROLINK_HEADER} from 'src/constants';\nimport {CDJStatus, Device} from 'src/types';\nimport {buildName} from 'src/utils';\nimport {udpSend} from 'src/utils/udp';\n\ninterface Options {\n  hostDevice: Device;\n  device: Device;\n  playState: CDJStatus.PlayState.Cued | CDJStatus.PlayState.Playing;\n}\n\nconst STATE_MAP = {\n  [CDJStatus.PlayState.Cued]: 0x01,\n  [CDJStatus.PlayState.Playing]: 0x00,\n};\n\n/**\n * Generates the packet used to control the playstate of CDJs\n */\nexport const makePlaystatePacket = ({hostDevice, device, playState}: Options) =>\n  Uint8Array.from([\n    ...PROLINK_HEADER,\n    ...[0x02],\n    ...buildName(hostDevice),\n    ...[0x01, 0x00],\n    ...[hostDevice.id],\n    ...[0x00, 0x04],\n    ...new Array(4)\n      .fill(0x00)\n      .map((_, i) => (i === device.id ? STATE_MAP[playState] : 0)),\n  ]);\n\nexport default class Control {\n  #hostDevice: Device;\n  /**\n   * The socket used to send control packets\n   */\n  #beatSocket: Socket;\n\n  constructor(beatSocket: Socket, hostDevice: Device) {\n    this.#beatSocket = beatSocket;\n    this.#hostDevice = hostDevice;\n  }\n\n  /**\n   * Start or stop a CDJ on the network\n   */\n  async setPlayState(device: Device, playState: Options['playState']) {\n    const packet = makePlaystatePacket({hostDevice: this.#hostDevice, device, playState});\n    await udpSend(this.#beatSocket, packet, BEAT_PORT, device.ip.address);\n  }\n}\n","import * as Sentry from '@sentry/node';\nimport {Span} from '@sentry/tracing';\n\nimport {Track} from 'src/entities';\nimport LocalDatabase from 'src/localdb';\nimport {fetchFile} from 'src/nfs';\nimport RemoteDatabase, {MenuTarget, Query} from 'src/remotedb';\nimport {Device, DeviceID, MediaSlot, TrackType} from 'src/types';\n\nexport interface Options {\n  /**\n   * The device to query the track artwork off of\n   */\n  deviceId: DeviceID;\n  /**\n   * The media slot the track is present in\n   */\n  trackSlot: MediaSlot;\n  /**\n   * The type of track we are querying artwork for\n   */\n  trackType: TrackType;\n  /**\n   * The track to lookup artwork for\n   */\n  track: Track;\n  /**\n   * The Sentry transaction span\n   */\n  span?: Span;\n}\n\nexport async function viaRemote(remote: RemoteDatabase, opts: Required<Options>) {\n  const {deviceId, trackSlot, trackType, track, span} = opts;\n\n  const conn = await remote.get(deviceId);\n  if (conn === null) {\n    return null;\n  }\n\n  if (track.artwork === null) {\n    return null;\n  }\n\n  const queryDescriptor = {\n    trackSlot,\n    trackType,\n    menuTarget: MenuTarget.Main,\n  };\n\n  return conn.query({\n    queryDescriptor,\n    query: Query.GetArtwork,\n    args: {artworkId: track.artwork.id},\n    span,\n  });\n}\n\nexport async function viaLocal(\n  local: LocalDatabase,\n  device: Device,\n  opts: Required<Options>\n) {\n  const {deviceId, trackSlot, track} = opts;\n\n  if (trackSlot !== MediaSlot.USB && trackSlot !== MediaSlot.SD) {\n    throw new Error('Expected USB or SD slot for remote database query');\n  }\n\n  const conn = await local.get(deviceId, trackSlot);\n  if (conn === null) {\n    return null;\n  }\n\n  if (track.artwork === null || track.artwork.path === undefined) {\n    return null;\n  }\n\n  try {\n    return fetchFile({device, slot: trackSlot, path: track.artwork.path});\n  } catch (error) {\n    Sentry.captureException(error);\n    return null;\n  }\n}\n","import {Span} from '@sentry/tracing';\n\nimport LocalDatabase from 'src/localdb';\nimport {loadAnlz} from 'src/localdb/rekordbox';\nimport RemoteDatabase, {MenuTarget, Query} from 'src/remotedb';\nimport {Device, DeviceID, MediaSlot, TrackType} from 'src/types';\n\nimport {anlzLoader} from './utils';\n\nexport interface Options {\n  /**\n   * The device to query the track metadata from\n   */\n  deviceId: DeviceID;\n  /**\n   * The media slot the track is present in\n   */\n  trackSlot: MediaSlot;\n  /**\n   * The type of track we are querying for\n   */\n  trackType: TrackType;\n  /**\n   * The track id to retrive metadata for\n   */\n  trackId: number;\n  /**\n   * The Sentry transaction span\n   */\n  span?: Span;\n}\n\nexport async function viaRemote(remote: RemoteDatabase, opts: Required<Options>) {\n  const {deviceId, trackSlot, trackType, trackId, span} = opts;\n\n  const conn = await remote.get(deviceId);\n  if (conn === null) {\n    return null;\n  }\n\n  const queryDescriptor = {\n    trackSlot,\n    trackType,\n    menuTarget: MenuTarget.Main,\n  };\n\n  const track = await conn.query({\n    queryDescriptor,\n    query: Query.GetMetadata,\n    args: {trackId},\n    span,\n  });\n\n  track.filePath = await conn.query({\n    queryDescriptor,\n    query: Query.GetTrackInfo,\n    args: {trackId},\n    span,\n  });\n\n  track.beatGrid = await conn.query({\n    queryDescriptor,\n    query: Query.GetBeatGrid,\n    args: {trackId},\n    span,\n  });\n\n  return track;\n}\n\nexport async function viaLocal(\n  local: LocalDatabase,\n  device: Device,\n  opts: Required<Options>\n) {\n  const {deviceId, trackSlot, trackId} = opts;\n\n  if (trackSlot !== MediaSlot.USB && trackSlot !== MediaSlot.SD) {\n    throw new Error('Expected USB or SD slot for local database query');\n  }\n\n  const orm = await local.get(deviceId, trackSlot);\n  if (orm === null) {\n    return null;\n  }\n\n  const track = orm.findTrack(trackId);\n\n  if (track === null) {\n    return null;\n  }\n\n  const anlz = await loadAnlz(track, 'DAT', anlzLoader({device, slot: trackSlot}));\n\n  track.beatGrid = anlz.beatGrid;\n  track.cueAndLoops = anlz.cueAndLoops;\n\n  return track;\n}\n","import {Span} from '@sentry/tracing';\n\nimport {Playlist} from 'src/entities';\nimport LocalDatabase from 'src/localdb';\nimport RemoteDatabase, {MenuTarget, Query} from 'src/remotedb';\nimport {DeviceID, MediaSlot, PlaylistContents, TrackType} from 'src/types';\n\nexport interface Options {\n  /**\n   * The playlist or folder to query the entries of. This may be left as\n   * undefined to retrieve the root playlist.\n   */\n  playlist?: Playlist;\n  /**\n   * The device to query the track metadata from\n   */\n  deviceId: DeviceID;\n  /**\n   * The media slot the track is present in\n   */\n  mediaSlot: MediaSlot;\n  /**\n   * The Sentry transaction span\n   */\n  span?: Span;\n}\n\nexport async function viaRemote(remote: RemoteDatabase, opts: Options) {\n  const {playlist, deviceId, mediaSlot, span} = opts;\n\n  const conn = await remote.get(deviceId);\n  if (conn === null) {\n    return null;\n  }\n\n  const queryDescriptor = {\n    trackSlot: mediaSlot,\n    trackType: TrackType.RB,\n    menuTarget: MenuTarget.Main,\n  };\n\n  const id = playlist?.id;\n  const isFolderRequest = playlist?.isFolder ?? true;\n\n  const {folders, playlists, trackEntries} = await conn.query({\n    queryDescriptor,\n    query: Query.MenuPlaylist,\n    args: {id, isFolderRequest},\n    span,\n  });\n\n  const iterateTracks = async function* () {\n    for (const entry of trackEntries) {\n      if (!conn) {\n        break;\n      }\n\n      yield conn.query({\n        queryDescriptor,\n        query: Query.GetMetadata,\n        args: {trackId: entry.id},\n        span,\n      });\n    }\n  };\n\n  const tracks = {[Symbol.asyncIterator]: iterateTracks};\n  const totalTracks = trackEntries.length;\n\n  return {folders, playlists, tracks, totalTracks} as PlaylistContents;\n}\n\nexport async function viaLocal(local: LocalDatabase, opts: Options) {\n  const {playlist, deviceId, mediaSlot} = opts;\n\n  if (mediaSlot !== MediaSlot.USB && mediaSlot !== MediaSlot.SD) {\n    throw new Error('Expected USB or SD slot for local database query');\n  }\n\n  const orm = await local.get(deviceId, mediaSlot);\n  if (orm === null) {\n    return null;\n  }\n\n  const {folders, playlists, trackEntries} = orm.findPlaylist(playlist?.id);\n\n  const iterateTracks = async function* () {\n    for (const entry of trackEntries) {\n      if (!orm) {\n        break;\n      }\n      yield orm.findTrack(entry.id);\n    }\n  };\n\n  const tracks = {[Symbol.asyncIterator]: iterateTracks};\n  const totalTracks = trackEntries.length;\n\n  return {folders, playlists, tracks, totalTracks} as PlaylistContents;\n}\n","import {Span} from '@sentry/tracing';\n\nimport {Track} from 'src/entities';\nimport LocalDatabase from 'src/localdb';\nimport {loadAnlz} from 'src/localdb/rekordbox';\nimport RemoteDatabase, {MenuTarget, Query} from 'src/remotedb';\nimport {Device, DeviceID, MediaSlot, TrackType, Waveforms} from 'src/types';\n\nimport {anlzLoader} from './utils';\n\nexport interface Options {\n  /**\n   * The device to query the track waveforms off of\n   */\n  deviceId: DeviceID;\n  /**\n   * The media slot the track is present in\n   */\n  trackSlot: MediaSlot;\n  /**\n   * The type of track we are querying waveforms for\n   */\n  trackType: TrackType;\n  /**\n   * The track to lookup waveforms for\n   */\n  track: Track;\n  /**\n   * The Sentry transaction span\n   */\n  span?: Span;\n}\n\nexport async function viaRemote(remote: RemoteDatabase, opts: Required<Options>) {\n  const {deviceId, trackSlot, trackType, track, span} = opts;\n\n  const conn = await remote.get(deviceId);\n  if (conn === null) {\n    return null;\n  }\n\n  const queryDescriptor = {\n    trackSlot,\n    trackType,\n    menuTarget: MenuTarget.Main,\n  };\n\n  const waveformHd = await conn.query({\n    queryDescriptor,\n    query: Query.GetWaveformHD,\n    args: {trackId: track.id},\n    span,\n  });\n\n  return {waveformHd} as Waveforms;\n}\n\nexport async function viaLocal(\n  local: LocalDatabase,\n  device: Device,\n  opts: Required<Options>\n) {\n  const {deviceId, trackSlot, track} = opts;\n\n  if (trackSlot !== MediaSlot.USB && trackSlot !== MediaSlot.SD) {\n    throw new Error('Expected USB or SD slot for remote database query');\n  }\n\n  const conn = await local.get(deviceId, trackSlot);\n  if (conn === null) {\n    return null;\n  }\n\n  const anlz = await loadAnlz(track, 'EXT', anlzLoader({device, slot: trackSlot}));\n\n  return {waveformHd: anlz.waveformHd} as Waveforms;\n}\n","import * as Sentry from '@sentry/node';\nimport {SpanStatus} from '@sentry/tracing';\n\nimport DeviceManager from 'src/devices';\nimport {Track} from 'src/entities';\nimport LocalDatabase from 'src/localdb';\nimport RemoteDatabase from 'src/remotedb';\nimport {\n  Device,\n  DeviceType,\n  MediaSlot,\n  PlaylistContents,\n  TrackType,\n  Waveforms,\n} from 'src/types';\nimport {getSlotName, getTrackTypeName} from 'src/utils';\n\nimport * as GetArtwork from './getArtwork';\nimport * as GetMetadata from './getMetadata';\nimport * as GetPlaylist from './getPlaylist';\nimport * as GetWaveforms from './getWaveforms';\n\nenum LookupStrategy {\n  Remote,\n  Local,\n  NoneAvailable,\n}\n\n/**\n * A Database is the central service used to query devices on the prolink\n * network for information from their databases.\n */\nclass Database {\n  #hostDevice: Device;\n  #deviceManager: DeviceManager;\n  /**\n   * The local database service, used when querying media devices connected\n   * directly to CDJs containing a rekordbox formatted database.\n   */\n  #localDatabase: LocalDatabase;\n  /**\n   * The remote database service, used when querying the Rekordbox software or a\n   * CDJ with an unanalyzed media device connected (when possible).\n   */\n  #remoteDatabase: RemoteDatabase;\n\n  constructor(\n    hostDevice: Device,\n    local: LocalDatabase,\n    remote: RemoteDatabase,\n    deviceManager: DeviceManager\n  ) {\n    this.#hostDevice = hostDevice;\n    this.#localDatabase = local;\n    this.#remoteDatabase = remote;\n    this.#deviceManager = deviceManager;\n  }\n\n  #getTrackLookupStrategy = (device: Device, type: TrackType) => {\n    const isUnanalyzed = type === TrackType.AudioCD || type === TrackType.Unanalyzed;\n    const requiresCdjRemote =\n      device.type === DeviceType.CDJ && isUnanalyzed && this.cdjSupportsRemotedb;\n\n    return device.type === DeviceType.Rekordbox || requiresCdjRemote\n      ? LookupStrategy.Remote\n      : device.type === DeviceType.CDJ && type === TrackType.RB\n      ? LookupStrategy.Local\n      : LookupStrategy.NoneAvailable;\n  };\n\n  #getMediaLookupStrategy = (device: Device, slot: MediaSlot) =>\n    device.type === DeviceType.Rekordbox && slot === MediaSlot.RB\n      ? LookupStrategy.Remote\n      : device.type === DeviceType.Rekordbox\n      ? LookupStrategy.NoneAvailable\n      : LookupStrategy.Local;\n\n  /**\n   * Reports weather or not the CDJs can be communcated to over the remote\n   * database protocol. This is important when trying to query for unanalyzed or\n   * compact disc tracks.\n   */\n  get cdjSupportsRemotedb() {\n    return this.#hostDevice.id > 0 && this.#hostDevice.id < 7;\n  }\n\n  /**\n   * Retrieve metadata for a track on a specfic device slot.\n   */\n  async getMetadata(opts: GetMetadata.Options) {\n    const {deviceId, trackType, trackSlot, span} = opts;\n\n    const tx = span\n      ? span.startChild({op: 'dbGetMetadata'})\n      : Sentry.startTransaction({name: 'dbGetMetadata'});\n\n    tx.setTag('deviceId', deviceId.toString());\n    tx.setTag('trackType', getTrackTypeName(trackType));\n    tx.setTag('trackSlot', getSlotName(trackSlot));\n\n    const callOpts = {...opts, span: tx};\n\n    const device = await this.#deviceManager.getDeviceEnsured(deviceId);\n    if (device === null) {\n      return null;\n    }\n\n    const strategy = this.#getTrackLookupStrategy(device, trackType);\n    let track: Track | null = null;\n\n    if (strategy === LookupStrategy.Remote) {\n      track = await GetMetadata.viaRemote(this.#remoteDatabase, callOpts);\n    }\n\n    if (strategy === LookupStrategy.Local) {\n      track = await GetMetadata.viaLocal(this.#localDatabase, device, callOpts);\n    }\n\n    if (strategy === LookupStrategy.NoneAvailable) {\n      tx.setStatus(SpanStatus.Unavailable);\n    }\n\n    tx.finish();\n\n    return track;\n  }\n\n  /**\n   * Retrives the artwork for a track on a specific device slot.\n   */\n  async getArtwork(opts: GetArtwork.Options) {\n    const {deviceId, trackType, trackSlot, span} = opts;\n\n    const tx = span\n      ? span.startChild({op: 'dbGetArtwork'})\n      : Sentry.startTransaction({name: 'dbGetArtwork'});\n\n    tx.setTag('deviceId', deviceId.toString());\n    tx.setTag('trackType', getTrackTypeName(trackType));\n    tx.setTag('trackSlot', getSlotName(trackSlot));\n\n    const callOpts = {...opts, span: tx};\n\n    const device = await this.#deviceManager.getDeviceEnsured(deviceId);\n    if (device === null) {\n      return null;\n    }\n\n    const strategy = this.#getTrackLookupStrategy(device, trackType);\n    let artwork: Buffer | null = null;\n\n    if (strategy === LookupStrategy.Remote) {\n      artwork = await GetArtwork.viaRemote(this.#remoteDatabase, callOpts);\n    }\n\n    if (strategy === LookupStrategy.Local) {\n      artwork = await GetArtwork.viaLocal(this.#localDatabase, device, callOpts);\n    }\n\n    if (strategy === LookupStrategy.NoneAvailable) {\n      tx.setStatus(SpanStatus.Unavailable);\n    }\n\n    tx.finish();\n\n    return artwork;\n  }\n\n  /**\n   * Retrives the waveforms for a track on a specific device slot.\n   */\n  async getWaveforms(opts: GetArtwork.Options) {\n    const {deviceId, trackType, trackSlot, span} = opts;\n\n    const tx = span\n      ? span.startChild({op: 'dbGetWaveforms'})\n      : Sentry.startTransaction({name: 'dbGetWaveforms'});\n\n    tx.setTag('deviceId', deviceId.toString());\n    tx.setTag('trackType', getTrackTypeName(trackType));\n    tx.setTag('trackSlot', getSlotName(trackSlot));\n\n    const callOpts = {...opts, span: tx};\n\n    const device = await this.#deviceManager.getDeviceEnsured(deviceId);\n    if (device === null) {\n      return null;\n    }\n\n    const strategy = this.#getTrackLookupStrategy(device, trackType);\n    let waveforms: Waveforms | null = null;\n\n    if (strategy === LookupStrategy.Remote) {\n      waveforms = await GetWaveforms.viaRemote(this.#remoteDatabase, callOpts);\n    }\n\n    if (strategy === LookupStrategy.Local) {\n      waveforms = await GetWaveforms.viaLocal(this.#localDatabase, device, callOpts);\n    }\n\n    if (strategy === LookupStrategy.NoneAvailable) {\n      tx.setStatus(SpanStatus.Unavailable);\n    }\n\n    tx.finish();\n\n    return waveforms;\n  }\n\n  /**\n   * Retrieve folders, playlists, and tracks within the playlist tree. The id\n   * may be left undefined to query the root of the playlist tree.\n   *\n   * NOTE: You will never receive a track list and playlists or folders at the\n   * same time. But the API is simpler to combine the lookup for these.\n   */\n  async getPlaylist(opts: GetPlaylist.Options) {\n    const {deviceId, mediaSlot, span} = opts;\n\n    const tx = span\n      ? span.startChild({op: 'dbGetPlaylist'})\n      : Sentry.startTransaction({name: 'dbGetPlaylist'});\n\n    tx.setTag('deviceId', deviceId.toString());\n    tx.setTag('mediaSlot', getSlotName(mediaSlot));\n\n    const callOpts = {...opts, span: tx};\n\n    const device = await this.#deviceManager.getDeviceEnsured(deviceId);\n    if (device === null) {\n      return null;\n    }\n\n    const strategy = this.#getMediaLookupStrategy(device, mediaSlot);\n    let contents: PlaylistContents | null = null;\n\n    if (strategy === LookupStrategy.Remote) {\n      contents = await GetPlaylist.viaRemote(this.#remoteDatabase, callOpts);\n    }\n\n    if (strategy === LookupStrategy.Local) {\n      contents = await GetPlaylist.viaLocal(this.#localDatabase, callOpts);\n    }\n\n    if (strategy === LookupStrategy.NoneAvailable) {\n      tx.setStatus(SpanStatus.Unavailable);\n    }\n\n    tx.finish();\n\n    return contents;\n  }\n}\n\nexport default Database;\n","import {fetchFile} from 'src/nfs';\nimport {Device, MediaSlot} from 'src/types';\n\ninterface AnlzLoaderOpts {\n  device: Device;\n  slot: MediaSlot.RB | MediaSlot.USB | MediaSlot.SD;\n}\n\nexport function anlzLoader(opts: AnlzLoaderOpts) {\n  return (path: string) => fetchFile({...opts, path});\n}\n","import StrictEventEmitter from 'strict-event-emitter-types';\n\nimport {Socket} from 'dgram';\nimport {EventEmitter} from 'events';\n\nimport {VIRTUAL_CDJ_NAME} from 'src/constants';\nimport {Device, DeviceID} from 'src/types';\n\nimport {deviceFromPacket} from './utils';\n\ninterface Config {\n  /**\n   * Time in milliseconds after which a device is considered to have\n   * disconnected if it has not broadcast an announcment.\n   *\n   * @default 10000 ms\n   */\n  deviceTimeout?: number;\n}\n\nconst defaultConfig = {\n  deviceTimeout: 10000,\n};\n\n/**\n * The upper bound in milliseconds to wait when looking for a device to be on\n * the network when using the `getDeviceEnsured` method.\n */\nconst ENSURED_TIMEOUT = 2000;\n\n/**\n * The configuration object that may be passed to reconfigure the manager\n */\ntype ConfigEditable = Omit<Config, 'announceSocket'>;\n\n/**\n * The interface the device manager event emitter should follow\n */\ninterface DeviceEvents {\n  /**\n   * Fired when a new device becomes available on the network\n   */\n  connected: (device: Device) => void;\n  /**\n   * Fired when a device has not announced itself on the network for the\n   * specified timeout.\n   */\n  disconnected: (device: Device) => void;\n  /**\n   * Fired every time the device announces itself on the network\n   */\n  announced: (device: Device) => void;\n}\n\ntype Emitter = StrictEventEmitter<EventEmitter, DeviceEvents>;\n\n/**\n * The device manager is responsible for tracking devices that appear on the\n * prolink network, providing an API to react to devices livecycle events as\n * they connect and disconnect form the network.\n */\nclass DeviceManager {\n  /**\n   * Device manager configuration\n   */\n  #config: Required<Config>;\n  /**\n   * The map of all active devices currently available on the network.\n   */\n  #devices = new Map<DeviceID, Device>();\n  /**\n   * Tracks device timeout handlers, as devices announce themselves these\n   * timeouts will be updated.\n   */\n  #deviceTimeouts = new Map<DeviceID, NodeJS.Timeout>();\n  /**\n   * The EventEmitter which will be used to trigger device lifecycle events\n   */\n  #emitter: Emitter = new EventEmitter();\n\n  constructor(announceSocket: Socket, config?: Config) {\n    this.#config = {...defaultConfig, ...config};\n\n    // Begin listening for device announcments\n    announceSocket.on('message', this.#handleAnnounce);\n  }\n\n  // Bind public event emitter interface\n  on: Emitter['on'] = this.#emitter.addListener.bind(this.#emitter);\n  off: Emitter['off'] = this.#emitter.removeListener.bind(this.#emitter);\n  once: Emitter['once'] = this.#emitter.once.bind(this.#emitter);\n\n  /**\n   * Get active devices on the network.\n   */\n  get devices() {\n    return this.#devices;\n  }\n\n  /**\n   * Waits for a specific device ID to appear on the network, with a\n   * configurable timeout, in which case it will resolve with null.\n   */\n  async getDeviceEnsured(id: DeviceID, timeout: number = ENSURED_TIMEOUT) {\n    const existingDevice = this.devices.get(id);\n\n    if (existingDevice !== undefined) {\n      return existingDevice;\n    }\n\n    let handler: ((device: Device) => void) | undefined;\n\n    // Wait for the device to be connected\n    const devicePromise = new Promise<Device>(resolve => {\n      handler = (device: Device) => device.id === id && resolve(device);\n      this.on('connected', handler);\n    });\n\n    const device = await Promise.race([\n      devicePromise,\n      new Promise<null>(r => setTimeout(() => r(null), timeout)),\n    ]);\n    this.off('connected', handler!);\n\n    return device;\n  }\n\n  reconfigure(config: ConfigEditable) {\n    this.#config = {...this.#config, ...config};\n  }\n\n  #handleAnnounce = (message: Buffer) => {\n    const device = deviceFromPacket(message);\n\n    if (device === null) {\n      return;\n    }\n\n    if (device.name === VIRTUAL_CDJ_NAME) {\n      return;\n    }\n\n    // Device has not checked in before\n    if (!this.#devices.has(device.id)) {\n      this.#devices.set(device.id, device);\n      this.#emitter.emit('connected', device);\n    }\n\n    this.#emitter.emit('announced', device);\n\n    // Reset the device timeout handler\n    const activeTimeout = this.#deviceTimeouts.get(device.id);\n    if (activeTimeout) {\n      clearTimeout(activeTimeout);\n    }\n\n    const timeout = this.#config.deviceTimeout;\n    const newTimeout = setTimeout(this.#handleDisconnect, timeout, device);\n    this.#deviceTimeouts.set(device.id, newTimeout);\n  };\n\n  #handleDisconnect = (removedDevice: Device) => {\n    this.#devices.delete(removedDevice.id);\n    this.#deviceTimeouts.delete(removedDevice.id);\n\n    this.#emitter.emit('disconnected', removedDevice);\n  };\n}\n\nexport default DeviceManager;\n","import * as ip from 'ip-address';\n\nimport {PROLINK_HEADER} from 'src/constants';\nimport {Device} from 'src/types';\n\n/**\n * Converts a announce packet to a device object.\n */\nexport function deviceFromPacket(packet: Buffer) {\n  if (packet.indexOf(PROLINK_HEADER) !== 0) {\n    throw new Error('Announce packet does not start with expected header');\n  }\n\n  if (packet[0x0a] !== 0x06) {\n    return null;\n  }\n\n  const name = packet\n    .slice(0x0c, 0x0c + 20)\n    .toString()\n    .replace(/\\0/g, '');\n\n  const device: Device = {\n    name,\n    id: packet[0x24],\n    type: packet[0x34],\n    macAddr: new Uint8Array(packet.slice(0x26, 0x26 + 6)),\n    ip: ip.Address4.fromInteger(packet.readUInt32BE(0x2c)),\n  };\n\n  return device;\n}\n","import {BeatGrid, CueAndLoop, WaveformHD} from 'src/types';\n\n/**\n * Documentation type strictly for use with entities that have foreign key\n * attributes.\n */\nexport enum EntityFK {\n  WithFKs,\n  WithRelations,\n}\n\nexport interface Artwork {\n  id: number;\n  path?: string;\n}\n\nexport interface Key {\n  id: number;\n  name: string;\n}\n\nexport interface Label {\n  id: number;\n  name: string;\n}\n\nexport interface Color {\n  id: number;\n  name: string;\n}\n\nexport interface Genre {\n  id: number;\n  name: string;\n}\n\nexport interface Album {\n  id: number;\n  name: string;\n}\n\nexport interface Artist {\n  id: number;\n  name: string;\n}\n\nexport interface Playlist {\n  id: number;\n  name: string;\n  isFolder: boolean;\n  parentId: number | null;\n}\n\ninterface PlaylistEntryRelations {\n  track: Track;\n}\n\ninterface PlaylistEntryFks {\n  playlistId: number;\n  trackId: number;\n}\n\nexport type PlaylistEntry<withFKs extends EntityFK = EntityFK.WithRelations> = {\n  id: number;\n  sortIndex: number;\n} & (withFKs extends EntityFK.WithFKs ? PlaylistEntryFks : PlaylistEntryRelations);\n\ninterface TrackRelations {\n  artwork: Artwork | null;\n  artist: Artist | null;\n  originalArtist: Artist | null;\n  remixer: Artist | null;\n  composer: Artist | null;\n  album: Album | null;\n  label: Label | null;\n  genre: Genre | null;\n  color: Color | null;\n  key: Key | null;\n}\n\ninterface TrackFks {\n  artworkId?: number;\n  artistId?: number;\n  originalArtistId?: number;\n  remixerId?: number;\n  composerId?: number;\n  albumId?: number;\n  labelId?: number;\n  genreId?: number;\n  colorId?: number;\n  keyId?: number;\n}\n\n/**\n * Represents a track.\n *\n * Note, fields that are not optional will be set for all database request\n * methods.\n */\nexport type Track<withFKs extends EntityFK = EntityFK.WithRelations> = {\n  id: number;\n  title: string;\n  duration: number;\n  bitrate?: number;\n  tempo: number;\n  rating: number;\n  comment: string;\n  filePath: string;\n  fileName: string;\n  trackNumber?: number;\n  discNumber?: number;\n  sampleRate?: number;\n  sampleDepth?: number;\n  playCount?: number;\n  year?: number;\n  mixName?: string;\n  autoloadHotcues?: boolean;\n  kuvoPublic?: boolean;\n  fileSize?: number;\n  analyzePath?: string;\n  releaseDate?: string;\n  analyzeDate?: Date;\n  dateAdded?: Date;\n\n  /**\n   * Embedded beat grid information\n   */\n  beatGrid: BeatGrid | null;\n\n  /**\n   * Embedded cue and loop information\n   */\n  cueAndLoops: CueAndLoop[] | null;\n\n  /**\n   * Embedded HD Waveform information\n   */\n  waveformHd: WaveformHD | null;\n} & (withFKs extends EntityFK.WithFKs ? TrackFks : TrackRelations);\n","export * from './entities';\nexport * from './mixstatus';\nexport * from './network';\n\n// Types are exported last to avoid overwriting values with type-only exports\nexport * from './types';\n","import * as Sentry from '@sentry/node';\nimport {Mutex} from 'async-mutex';\nimport StrictEventEmitter from 'strict-event-emitter-types';\n\nimport {createHash} from 'crypto';\nimport {EventEmitter} from 'events';\n\nimport DeviceManager from 'src/devices';\nimport {fetchFile, FetchProgress} from 'src/nfs';\nimport StatusEmitter from 'src/status';\nimport {\n  Device,\n  DeviceID,\n  DeviceType,\n  MediaSlot,\n  MediaSlotInfo,\n  TrackType,\n} from 'src/types';\nimport {getSlotName} from 'src/utils';\n\nimport {MetadataORM} from './orm';\nimport {hydrateDatabase, HydrationProgress} from './rekordbox';\n\n/**\n * Rekordbox databases will only exist within these two slots\n */\ntype DatabaseSlot = MediaSlot.USB | MediaSlot.SD;\n\ninterface CommonProgressOpts {\n  /**\n   * The device progress is being reported for\n   */\n  device: Device;\n  /**\n   * The media slot progress is being reported for\n   */\n  slot: MediaSlot;\n}\n\ntype DownloadProgressOpts = CommonProgressOpts & {\n  /**\n   * The current progress of the fetch\n   */\n  progress: FetchProgress;\n};\n\ntype HydrationProgressOpts = CommonProgressOpts & {\n  /**\n   * The current progress of the database hydration\n   */\n  progress: HydrationProgress;\n};\n\ntype HydrationDoneOpts = CommonProgressOpts;\n\n/**\n * Events that may be triggered  by the LocalDatabase emitter\n */\ninterface DatabaseEvents {\n  /**\n   * Triggered when we are fetching a database from a CDJ\n   */\n  fetchProgress: (opts: DownloadProgressOpts) => void;\n  /**\n   * Triggered when we are hydrating a rekordbox database into the in-memory\n   * sqlite database.\n   */\n  hydrationProgress: (opts: HydrationProgressOpts) => void;\n  /**\n   * Triggered when the database has been fully hydrated.\n   *\n   * There is a period of time between hydrationProgress reporting 100% copletion,\n   * and the database being flushed, so it may be useful to wait for this event\n   * before considering the databas to be fully hydrated.\n   */\n  hydrationDone: (opts: HydrationDoneOpts) => void;\n}\n\ntype Emitter = StrictEventEmitter<EventEmitter, DatabaseEvents>;\n\ninterface DatabaseItem {\n  /**\n   * The uniquity identifier of the database\n   */\n  id: string;\n  /**\n   * The media device plugged into the device\n   */\n  media: MediaSlotInfo;\n  /**\n   * The MetadataORM service instance for the active connection\n   */\n  orm: MetadataORM;\n}\n\n/**\n * Compute the identifier for media device in a CDJ. This is used to determine\n * if we have already hydrated the device or not into our local database.\n */\nconst getMediaId = (info: MediaSlotInfo) => {\n  const inputs = [\n    info.deviceId,\n    info.slot,\n    info.name,\n    info.freeBytes,\n    info.totalBytes,\n    info.trackCount,\n    info.createdDate,\n  ];\n\n  return createHash('sha256').update(inputs.join('.'), 'utf8').digest().toString();\n};\n\n/**\n * The local database is responsible for syncing the remote rekordbox databases\n * of media slots on a device into in-memory sqlite databases.\n *\n * This service will attempt to ensure the in-memory databases for each media\n * device that is connected to a CDJ is locally kept in sync. Fetching the\n * database for any media slot of it's not already cached.\n */\nclass LocalDatabase {\n  #hostDevice: Device;\n  #deviceManager: DeviceManager;\n  #statusEmitter: StatusEmitter;\n  /**\n   * The EventEmitter that will report database events\n   */\n  #emitter: Emitter = new EventEmitter();\n  /**\n   * Locks for each device slot: ${device.id}-${slot}. Used when making track\n   * requets.\n   */\n  #slotLocks = new Map<string, Mutex>();\n  /**\n   * The current available databases\n   */\n  #dbs: DatabaseItem[] = [];\n\n  constructor(\n    hostDevice: Device,\n    deviceManager: DeviceManager,\n    statusEmitter: StatusEmitter\n  ) {\n    this.#hostDevice = hostDevice;\n    this.#deviceManager = deviceManager;\n    this.#statusEmitter = statusEmitter;\n\n    deviceManager.on('disconnected', this.#handleDeviceRemoved);\n  }\n\n  // Bind public event emitter interface\n  on: Emitter['on'] = this.#emitter.addListener.bind(this.#emitter);\n  off: Emitter['off'] = this.#emitter.removeListener.bind(this.#emitter);\n  once: Emitter['once'] = this.#emitter.once.bind(this.#emitter);\n\n  /**\n   * Disconnects the local database connection for the specified device\n   */\n  disconnectForDevice(device: Device) {\n    this.#handleDeviceRemoved(device);\n  }\n\n  /**\n   * Closes the database connection and removes the database entry when a\n   * device is removed.\n   */\n  #handleDeviceRemoved = (device: Device) => {\n    this.#dbs.find(db => db.media.deviceId === device.id)?.orm.close();\n    this.#dbs = this.#dbs.filter(db => db.media.deviceId !== device.id);\n  };\n\n  /**\n   * Downloads and hydrates a new in-memory sqlite database\n   */\n  #hydrateDatabase = async (device: Device, slot: DatabaseSlot, media: MediaSlotInfo) => {\n    const tx = Sentry.startTransaction({name: 'hydrateDatabase'});\n\n    tx.setTag('slot', getSlotName(media.slot));\n    tx.setData('numTracks', media.trackCount.toString());\n\n    const dbCreateTx = tx.startChild({op: 'setupDatabase'});\n    const orm = new MetadataORM();\n    dbCreateTx.finish();\n\n    let pdbData = Buffer.alloc(0);\n\n    const fetchPdbData = async (path: string) =>\n      (pdbData = await fetchFile({\n        device,\n        slot,\n        path,\n        span: tx,\n        onProgress: progress =>\n          this.#emitter.emit('fetchProgress', {device, slot, progress}),\n      }));\n\n    // Rekordbox exports to both the `.PIONEER` and `PIONEER` folder, depending\n    // on the media devices filesystem (HFS, FAT32, etc). Unfortuantely there's no\n    // way for us to know the type of filesystem, so we have to try both\n    const path = 'PIONEER/rekordbox/export.pdb';\n\n    // Attempt to be semi-smart and first try the path coorelating to the OS\n    // they're running this on. The assumption is they may have used the same\n    // machine to export their tracks on.\n    const attemptOrder =\n      process.platform === 'win32' ? [path, `.${path}`] : [`.${path}`, path];\n\n    try {\n      await fetchPdbData(attemptOrder[0]);\n    } catch {\n      await fetchPdbData(attemptOrder[1]);\n    }\n\n    await hydrateDatabase({\n      orm,\n      pdbData,\n      span: tx,\n      onProgress: progress =>\n        this.#emitter.emit('hydrationProgress', {device, slot, progress}),\n    });\n    this.#emitter.emit('hydrationDone', {device, slot});\n\n    const db = {orm, media, id: getMediaId(media)};\n    this.#dbs.push(db);\n\n    tx.finish();\n\n    return db;\n  };\n\n  /**\n   * Gets the sqlite ORM service for to a database hydrated with the media\n   * metadata for the provided device slot.\n   *\n   * If the database has not already been hydrated this will first hydrate the\n   * database, which may take some time depending on the size of the database.\n   *\n   * @returns null if no rekordbox media present\n   */\n  async get(deviceId: DeviceID, slot: DatabaseSlot) {\n    const lockKey = `${deviceId}-${slot}`;\n    const lock =\n      this.#slotLocks.get(lockKey) ??\n      this.#slotLocks.set(lockKey, new Mutex()).get(lockKey)!;\n\n    const device = this.#deviceManager.devices.get(deviceId);\n    if (device === undefined) {\n      return null;\n    }\n\n    if (device.type !== DeviceType.CDJ) {\n      throw new Error('Cannot create database from devices that are not CDJs');\n    }\n\n    const media = await this.#statusEmitter.queryMediaSlot({\n      hostDevice: this.#hostDevice,\n      device,\n      slot,\n    });\n\n    if (media.tracksType !== TrackType.RB) {\n      return null;\n    }\n\n    const id = getMediaId(media);\n\n    // Aquire a lock for this device slot that will not release until we've\n    // guarnteed the existance of the database.\n    const db = await lock.runExclusive(\n      () =>\n        this.#dbs.find(db => db.id === id) ?? this.#hydrateDatabase(device, slot, media)\n    );\n\n    return db.orm;\n  }\n\n  /**\n   * Preload the databases for all connected devices.\n   */\n  async preload() {\n    const loaders = [...this.#deviceManager.devices.values()]\n      .filter(device => device.type === DeviceType.CDJ)\n      .map(device =>\n        Promise.all([\n          this.get(device.id, MediaSlot.USB),\n          this.get(device.id, MediaSlot.SD),\n        ])\n      );\n\n    await Promise.all(loaders);\n  }\n}\n\nexport default LocalDatabase;\n","import sqlite3 from 'better-sqlite3-multiple-ciphers';\nimport {camelCase, mapKeys, mapValues, partition, snakeCase} from 'lodash';\n\nimport {EntityFK, Playlist, PlaylistEntry, Track} from 'src/entities';\n\nimport {generateSchema} from './schema';\n\n/**\n * Table names availble\n */\nexport enum Table {\n  Artist = 'artist',\n  Album = 'album',\n  Genre = 'genre',\n  Color = 'color',\n  Label = 'label',\n  Key = 'key',\n  Artwork = 'artwork',\n  Playlist = 'playlist',\n  PlaylistEntry = 'playlist_entry',\n  Track = 'track',\n}\n\nconst trackRelations = [\n  'artwork',\n  'artist',\n  'originalArtist',\n  'remixer',\n  'composer',\n  'album',\n  'label',\n  'genre',\n  'color',\n  'key',\n];\n\nconst trackRelationTableMap: Record<string, string> = {\n  originalArtist: 'artist',\n  remixer: 'artist',\n  composer: 'artist',\n};\n\n/**\n * Object Relation Mapper as an abstraction ontop of a local database\n * connection.\n *\n * May be used to populate a metadata database and query objects.\n */\nexport class MetadataORM {\n  #conn: sqlite3.Database;\n\n  constructor() {\n    this.#conn = sqlite3(':memory:');\n    this.#conn.exec(generateSchema());\n  }\n\n  close() {\n    this.#conn.close();\n  }\n\n  /**\n   * Insert a entity object into the database.\n   */\n  insertEntity(table: Table, object: Record<string, any>) {\n    const fields = Object.entries<any>(object);\n\n    const slots = fields.map(f => `:${f[0]}`).join(', ');\n    const columns = fields.map(f => snakeCase(f[0])).join(', ');\n\n    const stmt = this.#conn.prepare(\n      `insert into ${table} (${columns}) values (${slots})`\n    );\n\n    // Translate date and booleans\n    const data = mapValues(object, value =>\n      value instanceof Date\n        ? value.toISOString()\n        : typeof value === 'boolean'\n        ? Number(value)\n        : value\n    );\n\n    stmt.run(data);\n  }\n\n  /**\n   * Locate a track by ID in the database\n   */\n  findTrack(id: number): Track {\n    const row: Record<string, any> = this.#conn\n      .prepare(`select * from ${Table.Track} where id = ?`)\n      .get(id) as any;\n\n    // Map row columns to camel case compatability\n    const trackRow = mapKeys(row, (_, k) => camelCase(k)) as Track<EntityFK.WithFKs>;\n\n    trackRow.beatGrid = null;\n    trackRow.cueAndLoops = null;\n    trackRow.waveformHd = null;\n\n    // Explicitly restore dates and booleans\n    trackRow.autoloadHotcues = !!trackRow.autoloadHotcues;\n    trackRow.kuvoPublic = !!trackRow.kuvoPublic;\n\n    // Explicity restore date objects\n    trackRow.analyzeDate = new Date(trackRow.analyzeDate as any);\n    trackRow.dateAdded = new Date(trackRow.dateAdded as any);\n\n    // Query all track relationships\n    const track = trackRow as any;\n\n    for (const relation of trackRelations) {\n      const fkName = `${relation}Id`;\n\n      const fk = track[fkName];\n      const table = snakeCase(trackRelationTableMap[relation] ?? relation);\n\n      // Swap fk for relation key\n      delete track[fkName];\n      track[relation] = null;\n\n      if (fk === null) {\n        continue;\n      }\n\n      const relationItem: Record<string, any> = this.#conn\n        .prepare(`select * from ${table} where id = ?`)\n        .get(fk) as any;\n\n      track[relation] = relationItem;\n    }\n\n    return track as Track;\n  }\n\n  /**\n   * Query for a list of {folders, playlists, tracks} given a playlist ID. If\n   * no ID is provided the root list is queried.\n   *\n   * Note that when tracks are returned there will be no folders or playslists.\n   * But the API here is simpler to assume there could be.\n   *\n   * Tracks are returned in the order they are placed on the playlist.\n   */\n  findPlaylist(playlistId?: number) {\n    const parentCondition = playlistId === undefined ? 'parent_id is ?' : 'parent_id = ?';\n\n    // Lookup playlists / folders for this playlist ID\n    const playlistRows: Array<Record<string, any>> = this.#conn\n      .prepare(`select * from ${Table.Playlist} where ${parentCondition}`)\n      .all(playlistId) as any[];\n\n    const [folders, playlists] = partition(\n      playlistRows.map(row => mapKeys(row, (_, k) => camelCase(k)) as Playlist),\n      p => p.isFolder\n    );\n\n    const entryRows: Array<Record<string, any>> = this.#conn\n      .prepare(`select * from ${Table.PlaylistEntry} where playlist_id = ?`)\n      .all(playlistId) as any[];\n\n    const trackEntries = entryRows.map(\n      row => mapKeys(row, (_, k) => camelCase(k)) as PlaylistEntry<EntityFK.WithFKs>\n    );\n\n    return {folders, playlists, trackEntries};\n  }\n}\n","import * as Sentry from '@sentry/node';\nimport {Span} from '@sentry/tracing';\nimport {KaitaiStream} from 'kaitai-struct';\n\nimport {\n  Album,\n  Artist,\n  Artwork,\n  Color,\n  EntityFK,\n  Genre,\n  Key,\n  Label,\n  Playlist,\n  PlaylistEntry,\n  Track,\n} from 'src/entities';\nimport RekordboxAnlz from 'src/localdb/kaitai/rekordbox_anlz.ksy';\nimport RekordboxPdb from 'src/localdb/kaitai/rekordbox_pdb.ksy';\nimport {MetadataORM, Table} from 'src/localdb/orm';\nimport {makeCueLoopEntry} from 'src/localdb/utils';\nimport {BeatGrid, CueAndLoop, HotcueButton, WaveformHD} from 'src/types';\nimport {convertWaveformHDData} from 'src/utils/converters';\n\n// NOTE: Kaitai doesn't currently have a good typescript exporter, so we will\n//       be making liberal usage of any in these utilities. We still guarantee\n//       a fully typed public interface of this module.\n\n/**\n * The provided function should resolve ANLZ files into buffers. Typically\n * you would just read the file, but in the case of the prolink network, this\n * would handle loading the file over NFS.\n */\ntype AnlzResolver = (path: string) => Promise<Buffer>;\n\n/**\n * Data returned from loading DAT anlz files\n */\ninterface AnlzResponseDAT {\n  /**\n   * Embedded beat grid information\n   */\n  beatGrid: BeatGrid | null;\n  /**\n   * Embedded cue and loop information\n   */\n  cueAndLoops: CueAndLoop[] | null;\n}\n\n/**\n * Data returned from loading EXT anlz files\n */\ninterface AnlzResponseEXT {\n  /**\n   * HD Waveform information\n   */\n  waveformHd: WaveformHD | null;\n}\n\ninterface AnlzResponse {\n  DAT: AnlzResponseDAT;\n  EXT: AnlzResponseEXT;\n}\n\n/**\n * Details about the current state of the hydtration task\n */\nexport interface HydrationProgress {\n  /**\n   * The specific table that progress is being reported for\n   */\n  table: string;\n  /**\n   * The total progress steps for this table\n   */\n  total: number;\n  /**\n   * The completed number of progress steps\n   */\n  complete: number;\n}\n\n/**\n * Options to hydrate the database\n */\ninterface Options {\n  /**\n   * The metadata ORM of which the tables will be hydrated\n   */\n  orm: MetadataORM;\n  /**\n   * This buffer should contain the Rekordbox pdb file contents. It will be\n   * used to do the hydration\n   */\n  pdbData: Buffer;\n  /**\n   * Sentry tracing span for the parent transaction\n   */\n  span?: Span;\n  /**\n   * For larger music collections, it may take some time to load everything,\n   * especially when limited by IO. When hydration progresses this function\n   * will be called.\n   */\n  onProgress?: (progress: HydrationProgress) => void;\n}\n\n/**\n * Given a rekordbox pdb file contents. This function will hydrate the provided\n * database with all entities from the Rekordbox database. This includes all\n * track metadata, including analyzed metadata (such as beatgrids and waveforms).\n */\nexport async function hydrateDatabase({pdbData, span, ...options}: Options) {\n  const hydrator = new RekordboxHydrator(options);\n  await hydrator.hydrateFromPdb(pdbData, span);\n}\n\n/**\n * Loads the ANLZ data of a Track entity from the analyzePath.\n */\nexport async function loadAnlz<T extends keyof AnlzResponse>(\n  track: Track,\n  type: T,\n  anlzResolver: AnlzResolver\n): Promise<AnlzResponse[T]> {\n  const path = `${track.analyzePath}.${type}`;\n  const anlzData = await anlzResolver(path);\n\n  const stream = new KaitaiStream(anlzData);\n  const anlz = new RekordboxAnlz(stream);\n\n  const result = {} as AnlzResponse[T];\n  const resultDat = result as AnlzResponseDAT;\n  const resultExt = result as AnlzResponseEXT;\n\n  for (const section of anlz.sections) {\n    if (section.fourcc === SectionTags.BEAT_GRID) {\n      resultDat.beatGrid = makeBeatGrid(section);\n      continue;\n    }\n    if (section.fourcc === SectionTags.CUES) {\n      resultDat.cueAndLoops = makeCueAndLoop(section);\n      continue;\n    }\n    if (section.fourcc === SectionTags.WAVE_COLOR_SCROLL) {\n      resultExt.waveformHd = makeWaveformHd(section);\n      continue;\n    }\n\n    // TODO: The following sections haven't yet been extracted into the local\n    //       database.\n    //\n    // [SectionTags.CUES_2]: null,             <- In the EXT file\n    // [SectionTags.SONG_STRUCTURE]: null,     <- In the EXT file\n    // [SectionTags.WAVE_PREVIEW]: null,\n    // [SectionTags.WAVE_SCROLL]: null,\n    // [SectionTags.WAVE_COLOR_PREVIEW]: null, <- In the EXT file\n  }\n\n  return result;\n}\n\n/**\n * This service provides utilities for translating rekordbox database (pdb_ and\n * analysis (ANLZ) files into the common entity types used in this library.\n */\nclass RekordboxHydrator {\n  #orm: MetadataORM;\n  #onProgress: (progress: HydrationProgress) => void;\n\n  constructor({orm, onProgress}: Omit<Options, 'pdbData'>) {\n    this.#orm = orm;\n    this.#onProgress = onProgress ?? (() => null);\n  }\n\n  /**\n   * Extract entries from a rekordbox pdb file and hydrate the passed database\n   * connection with entities derived from the rekordbox entries.\n   */\n  async hydrateFromPdb(pdbData: Buffer, span?: Span) {\n    const tx = span\n      ? span.startChild({op: 'hydrateFromPdb'})\n      : Sentry.startTransaction({name: 'hydrateFromPdb'});\n\n    const parseTx = tx.startChild({op: 'parsePdbData', data: {size: pdbData.length}});\n    const stream = new KaitaiStream(pdbData);\n    const db = new RekordboxPdb(stream);\n    parseTx.finish();\n\n    const hydrateTx = tx.startChild({op: 'hydration'});\n    await Promise.all(\n      db.tables.map((table: any) => this.hydrateFromTable(table, hydrateTx))\n    );\n    hydrateTx.finish();\n\n    tx.finish();\n  }\n\n  /**\n   * Hydrate the database with entities from the provided RekordboxPdb table.\n   * See pdbEntityCreators for how tables are mapped into database entities.\n   */\n  async hydrateFromTable(table: any, span: Span) {\n    const tableName = pdbTables[table.type];\n    const createObject = pdbEntityCreators[table.type];\n\n    const tx = span.startChild({op: 'hydrateFromTable', description: tableName});\n\n    if (createObject === undefined) {\n      return;\n    }\n\n    let totalSaved = 0;\n    let totalItems = 0;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const _ of tableRows(table)) {\n      totalItems++;\n    }\n\n    tx.setData('items', totalItems);\n\n    for (const row of tableRows(table)) {\n      this.#orm.insertEntity(tableName, createObject(row));\n      this.#onProgress({complete: ++totalSaved, table: tableName, total: totalItems});\n\n      // Allow additional tasks to occur during hydration\n      await new Promise(r => setTimeout(r, 0));\n    }\n\n    tx.finish();\n  }\n}\n\n/**\n * Utility generator that pages through a table and yields every present row.\n * This flattens the concept of rowGroups and refs.\n */\nfunction* tableRows(table: any) {\n  const {firstPage, lastPage} = table;\n\n  let pageRef = firstPage;\n  do {\n    const page = pageRef.body;\n\n    // Adjust our page ref for the next iteration. We do this early in our loop\n    // so we can break without having to remember to update for the next iter.\n    pageRef = page.nextPage;\n\n    // Ignore non-data pages. Not sure what these are for?\n    if (!page.isDataPage) {\n      continue;\n    }\n\n    const rows = page.rowGroups\n      .map((group: any) => group.rows)\n      .flat()\n      .filter((row: any) => row.present);\n\n    for (const row of rows) {\n      yield row.body;\n    }\n  } while (pageRef.index <= lastPage.index);\n}\n\ninterface IdAndNameEntity {\n  id: number;\n  name: string;\n}\n\nconst ensureDate = (date: Date) =>\n  date instanceof Date && !isNaN(date.valueOf()) ? date : undefined;\n\n/**\n * Utility to create a hydrator that hydrates the provided entity with the id\n * and name properties from the row.\n */\nconst makeIdNameHydrator =\n  <T extends IdAndNameEntity>() =>\n  (row: any) =>\n    ({\n      id: row.id,\n      name: row.name.body.text ?? '',\n    }) as T;\n\n/**\n * Translates a pdb track row entry to a {@link Track} entity.\n */\nfunction createTrack(trackRow: any) {\n  const analyzePath: string | undefined = trackRow.analyzePath.body.text;\n\n  const track: Track<EntityFK.WithFKs> = {\n    id: trackRow.id,\n    title: trackRow.title.body.text,\n    trackNumber: trackRow.trackNumber,\n    discNumber: trackRow.discNumber,\n    duration: trackRow.duration,\n    sampleRate: trackRow.sampleRate,\n    sampleDepth: trackRow.sampleDepth,\n    bitrate: trackRow.bitrate,\n    tempo: trackRow.tempo / 100,\n    playCount: trackRow.playCount,\n    year: trackRow.year,\n    rating: trackRow.rating,\n    mixName: trackRow.mixName.body.text,\n    comment: trackRow.comment.body.text,\n    autoloadHotcues: trackRow.autoloadHotcues.body.text === 'ON',\n    kuvoPublic: trackRow.kuvoPublic.body.text === 'ON',\n    filePath: trackRow.filePath.body.text,\n    fileName: trackRow.filename.body.text,\n    fileSize: trackRow.fileSize,\n    releaseDate: trackRow.releaseDate.body.text,\n    analyzeDate: ensureDate(new Date(trackRow.analyzeDate.body.text)),\n    dateAdded: ensureDate(new Date(trackRow.dateAdded.body.text)),\n\n    // The analyze file comes in 3 forms\n    //\n    //  1. A `DAT` file, which is missing some extended information, for the older\n    //     Pioneer equipment (likely due to memory constraints).\n    //\n    //  2. A `EXT` file which includes colored waveforms and other extended data.\n    //\n    //  3. A `EX2` file -- currently unknown\n    //\n    // We noramlize this path by trimming the DAT extension off. Later we will\n    // try and read whatever is available.\n    analyzePath: analyzePath?.substring(0, analyzePath.length - 4),\n\n    artworkId: trackRow.artworkId || null,\n    artistId: trackRow.artistId || null,\n    originalArtistId: trackRow.originalArtistId || null,\n    remixerId: trackRow.remixerId || null,\n    composerId: trackRow.composerId || null,\n    albumId: trackRow.albumId || null,\n    labelId: trackRow.labelId || null,\n    genreId: trackRow.genreId || null,\n    colorId: trackRow.colorId || null,\n    keyId: trackRow.keyId || null,\n\n    // NOTE: There are a few additional columns that will be hydrated through\n    // the analyze files (given the analyzePath) which we do not assign here.\n    beatGrid: null,\n    cueAndLoops: null,\n    waveformHd: null,\n  };\n\n  return track;\n}\n\n/**\n * Translates a pdb playlist row entry into a {@link Playlist} entity.\n */\nfunction createPlaylist(playlistRow: any) {\n  const playlist: Playlist = {\n    id: playlistRow.id,\n    name: playlistRow.name.body.text,\n    isFolder: playlistRow.rawIsFolder !== 0,\n    parentId: playlistRow.parentId || null,\n  };\n\n  return playlist;\n}\n\n/**\n * Translates a pdb playlist track entry into a {@link PlaylistTrack} entity.\n */\nfunction createPlaylistEntry(playlistTrackRow: any) {\n  const entry: PlaylistEntry<EntityFK.WithFKs> = {\n    id: playlistTrackRow.id,\n    sortIndex: playlistTrackRow.entryIndex,\n    playlistId: playlistTrackRow.playlistId,\n    trackId: playlistTrackRow.trackId,\n  };\n\n  return entry;\n}\n\n/**\n * Translates a pdb artwork entry into a {@link Artwork} entity.\n */\nfunction createArtworkEntry(artworkRow: any) {\n  const art: Artwork = {\n    id: artworkRow.id,\n    path: artworkRow.path.body.text,\n  };\n\n  return art;\n}\n\n/**\n * Fill beatgrid data from the ANLZ section\n */\nfunction makeBeatGrid(data: any) {\n  return data.body.beats.map((beat: any) => ({\n    offset: beat.time,\n    bpm: beat.tempo / 100,\n    count: beat.beatNumber,\n  }));\n}\n\n/**\n * Fill cue and loop data from the ANLZ section\n */\nfunction makeCueAndLoop(data: any) {\n  return data.body.cues.map((entry: any) => {\n    // Cues with the status 0 are likely leftovers that were removed\n\n    const button = entry.hotCue === 0 ? false : (entry.type as HotcueButton);\n    const isCue = entry.type === 0x01;\n    const isLoop = entry.type === 0x02;\n\n    // NOTE: Unlike the remotedb, these entries are already in milliseconds.\n    const offset = entry.time;\n    const length = entry.loopTime - offset;\n\n    return makeCueLoopEntry(isCue, isLoop, offset, length, button);\n  });\n}\n\n/**\n * Fill waveform HD data from the ANLZ section\n */\nfunction makeWaveformHd(data: any) {\n  return convertWaveformHDData(Buffer.from(data.body.entries));\n}\n\nconst {PageType} = RekordboxPdb;\nconst {SectionTags} = RekordboxAnlz;\n\n/**\n * Maps rekordbox pdb table types to orm table names.\n */\nconst pdbTables = {\n  [PageType.TRACKS]: Table.Track,\n  [PageType.ARTISTS]: Table.Artist,\n  [PageType.GENRES]: Table.Genre,\n  [PageType.ALBUMS]: Table.Album,\n  [PageType.LABELS]: Table.Label,\n  [PageType.COLORS]: Table.Color,\n  [PageType.KEYS]: Table.Key,\n  [PageType.ARTWORK]: Table.Artwork,\n  [PageType.PLAYLIST_TREE]: Table.Playlist,\n  [PageType.PLAYLIST_ENTRIES]: Table.PlaylistEntry,\n};\n\n/**\n * Maps rekordbox pdb table types to functions that create entity objects for\n * the passed pdb row.\n */\nconst pdbEntityCreators = {\n  [PageType.TRACKS]: createTrack,\n  [PageType.ARTISTS]: makeIdNameHydrator<Artist>(),\n  [PageType.GENRES]: makeIdNameHydrator<Genre>(),\n  [PageType.ALBUMS]: makeIdNameHydrator<Album>(),\n  [PageType.LABELS]: makeIdNameHydrator<Label>(),\n  [PageType.COLORS]: makeIdNameHydrator<Color>(),\n  [PageType.KEYS]: makeIdNameHydrator<Key>(),\n  [PageType.ARTWORK]: createArtworkEntry,\n  [PageType.PLAYLIST_TREE]: createPlaylist,\n  [PageType.PLAYLIST_ENTRIES]: createPlaylistEntry,\n\n  // TODO: Register PageType.HISTORY\n};\n","import {Table} from './orm';\n\nexport const generateSchema = () => `\n  CREATE TABLE '${Table.Artist}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Album}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Genre}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Color}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Label}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Key}' (\n    'id' integer not null primary key,\n    'name' varchar not null\n  );\n  CREATE TABLE '${Table.Artwork}' (\n    'id' integer not null primary key,\n    'path' varchar not null\n  );\n  CREATE TABLE '${Table.Track}' (\n    'id' integer not null primary key,\n    'title' varchar not null,\n    'duration' integer not null,\n    'bitrate' integer not null,\n    'tempo' integer not null,\n    'rating' integer not null,\n    'comment' varchar not null,\n    'file_path' varchar not null,\n    'file_name' varchar not null,\n    'track_number' integer not null,\n    'disc_number' integer not null,\n    'sample_rate' integer not null,\n    'sample_depth' integer not null,\n    'play_count' integer not null,\n    'year' integer not null,\n    'mix_name' varchar not null,\n    'autoload_hotcues' integer not null,\n    'kuvo_public' integer not null,\n    'file_size' integer not null,\n    'analyze_path' varchar not null,\n    'release_date' varchar not null,\n    'analyze_date' datetime,\n    'date_added' datetime,\n    'beat_grid' text null,\n    'cue_and_loops' text null,\n    'waveform_hd' text null,\n    'artwork_id' integer null,\n    'artist_id' integer null,\n    'original_artist_id' integer null,\n    'remixer_id' integer null,\n    'composer_id' integer null,\n    'album_id' integer null,\n    'label_id' integer null,\n    'genre_id' integer null,\n    'color_id' integer null,\n    'key_id' integer null\n  );\n  CREATE TABLE '${Table.Playlist}' (\n    'id' integer not null primary key,\n    'is_folder' integer not null,\n    'name' varchar not null,\n    'parent_id' integer null\n  );\n  CREATE TABLE '${Table.PlaylistEntry}' (\n    'id' integer not null primary key,\n    'sort_index' integer not null,\n    'playlist_id' integer null,\n    'track_id' integer null\n  );\n  CREATE INDEX 'track_artwork_id_index'           on '${Table.Track}' ('artwork_id');\n  CREATE INDEX 'track_artist_id_index'            on '${Table.Track}' ('artist_id');\n  CREATE INDEX 'track_original_artist_id_index'   on '${Table.Track}' ('original_artist_id');\n  CREATE INDEX 'track_remixer_id_index'           on '${Table.Track}' ('remixer_id');\n  CREATE INDEX 'track_composer_id_index'          on '${Table.Track}' ('composer_id');\n  CREATE INDEX 'track_album_id_index'             on '${Table.Track}' ('album_id');\n  CREATE INDEX 'track_label_id_index'             on '${Table.Track}' ('label_id');\n  CREATE INDEX 'track_genre_id_index'             on '${Table.Track}' ('genre_id');\n  CREATE INDEX 'track_color_id_index'             on '${Table.Track}' ('color_id');\n  CREATE INDEX 'track_key_id_index'               on '${Table.Track}' ('key_id');\n  CREATE INDEX 'playlist_parent_id_index'         on '${Table.Playlist}' ('parent_id');\n  CREATE INDEX 'playlist_entry_playlist_id_index' on '${Table.PlaylistEntry}' ('playlist_id');\n  CREATE INDEX 'playlist_entry_track_id_index'    on '${Table.PlaylistEntry}' ('track_id');\n`;\n","import {CueAndLoop, HotcueButton} from 'src/types';\n\n/**\n * Create a CueAndLoop entry given common parameters\n */\nexport const makeCueLoopEntry = (\n  isCue: boolean,\n  isLoop: boolean,\n  offset: number,\n  length: number,\n  button: false | HotcueButton\n): null | CueAndLoop =>\n  button !== false\n    ? isLoop\n      ? {type: 'hot_loop', offset, length, button}\n      : {type: 'hot_cue', offset, button}\n    : isLoop\n    ? {type: 'loop', offset, length}\n    : isCue\n    ? {type: 'cue_point', offset}\n    : null;\n","import StrictEventEmitter from 'strict-event-emitter-types';\n\nimport {EventEmitter} from 'events';\n\nimport {CDJStatus, DeviceID, MixstatusMode} from 'src/types';\nimport {bpmToSeconds} from 'src/utils';\n\nimport {isPlaying, isStopping} from './utils';\n\nexport interface MixstatusConfig {\n  /**\n   * Selects the mixstatus reporting mode\n   */\n  mode: MixstatusMode;\n  /**\n   * Specifies the duration in seconds that no tracks must be on air. This can\n   * be thought of as how long 'air silence' is reasonable in a set before a\n   * separate one is considered have begun.\n   *\n   * @default 30 (half a minute)\n   */\n  timeBetweenSets: number;\n  /**\n   * Indicates if the status objects reported should have their on-air flag\n   * read. Setting this to false will degrade the functionality of the processor\n   * such that it will not consider the value of isOnAir and always assume CDJs\n   * are live.\n   *\n   * @default true\n   */\n  useOnAirStatus: boolean;\n  /**\n   * Configures how many beats a track may not be live or playing for it to\n   * still be considered active.\n   *\n   * @default 8 (two bars)\n   */\n  allowedInterruptBeats: number;\n  /**\n   * Configures how many beats the track must consecutively be playing for\n   * (since the beat it was cued at) until the track is considered to be\n   * active.\n   *\n   * Used for MixstatusMode.SmartTiming\n   *\n   * @default 128 (2 phrases)\n   */\n  beatsUntilReported: number;\n}\n\nconst defaultConfig: MixstatusConfig = {\n  mode: MixstatusMode.SmartTiming,\n  timeBetweenSets: 30,\n  allowedInterruptBeats: 8,\n  beatsUntilReported: 128,\n  useOnAirStatus: true,\n};\n\n/**\n * The interface the mix status event emitter should follow\n */\ninterface MixstatusEvents {\n  /**\n   * Fired when a track is considered to be on-air and is being heard by the\n   * audiance\n   */\n  nowPlaying: (state: CDJStatus.State) => void;\n  /**\n   * Fired when a track has stopped and is completley offair\n   */\n  stopped: (opt: {deviceId: DeviceID}) => void;\n  /**\n   * Fired when a DJ set first starts\n   */\n  setStarted: () => void;\n  /**\n   * Fired when tracks have been stopped\n   */\n  setEnded: () => void;\n}\n\ntype Emitter = StrictEventEmitter<EventEmitter, MixstatusEvents>;\n\n/**\n * MixstatusProcessor is a configurable processor which when fed device state\n * will attempt to accurately determine events that happen within the DJ set.\n *\n * The following events are fired:\n *\n * - nowPlaying: The track is considered playing and on air to the audience.\n * - stopped:    The track was stopped / paused / went off-air.\n *\n * Additionally the following non-track status are reported:\n *\n * - setStarted: The first track has begun playing.\n * - setEnded:   The TimeBetweenSets has passed since any tracks were live.\n *\n * See Config for configuration options.\n *\n * Config options may be changed after the processor has been created and is\n * actively receiving state updates.\n */\nexport class MixstatusProcessor {\n  /**\n   * Used to fire track mix status events\n   */\n  #emitter: Emitter = new EventEmitter();\n  /**\n   * Records the most recent state of each player\n   */\n  #lastState = new Map<DeviceID, CDJStatus.State>();\n  /**\n   * Records when each device last started playing a track\n   */\n  #lastStartTime = new Map<DeviceID, number>();\n  /**\n   * Records when a device entered a 'may stop' state. If it's in the state for\n   * long enough it will be reported as stopped.\n   */\n  #lastStoppedTimes = new Map<DeviceID, number>();\n  /**\n   * Records which players have been reported as 'live'\n   */\n  #livePlayers = new Set<DeviceID>();\n  /**\n   * Incidates if we're currentiny in an active DJ set\n   */\n  #isSetActive = false;\n  /**\n   * When we are waiting for a set to end, use this to cancel the timer.\n   */\n  #cancelSetEnding?: () => void;\n  /**\n   * The configuration for this instance of the processor\n   */\n  #config: MixstatusConfig;\n\n  constructor(config?: Partial<MixstatusConfig>) {\n    this.#config = {...defaultConfig, ...config};\n  }\n\n  /**\n   * Update the configration\n   */\n  configure(config?: Partial<MixstatusConfig>) {\n    this.#config = {...this.#config, ...config};\n  }\n\n  // Bind public event emitter interface\n  on: Emitter['on'] = this.#emitter.addListener.bind(this.#emitter);\n  off: Emitter['off'] = this.#emitter.removeListener.bind(this.#emitter);\n  once: Emitter['once'] = this.#emitter.once.bind(this.#emitter);\n\n  /**\n   * Helper to account for the useOnAirStatus config. If not configured\n   * with this flag the state will always be determined as on air.\n   */\n  #onAir = (state: CDJStatus.State) =>\n    this.#config.useOnAirStatus ? state.isOnAir : true;\n\n  /**\n   * Report a player as 'live'. Will not report the state if the player has\n   * already previously been reported as live.\n   */\n  #promotePlayer = (state: CDJStatus.State) => {\n    const {deviceId} = state;\n\n    if (!this.#onAir(state) || !isPlaying(state)) {\n      return;\n    }\n\n    if (this.#livePlayers.has(deviceId)) {\n      return;\n    }\n\n    if (!this.#isSetActive) {\n      this.#isSetActive = true;\n      this.#emitter.emit('setStarted');\n    }\n\n    if (this.#cancelSetEnding) {\n      this.#cancelSetEnding();\n    }\n\n    this.#livePlayers.add(deviceId);\n\n    this.#emitter.emit('nowPlaying', state);\n  };\n\n  /**\n   * Locate the player that has been playing for the longest time and is onair,\n   * and report that device as now playing.\n   */\n  #promoteNextPlayer = () => {\n    const longestPlayingId = [...this.#lastStartTime.entries()]\n      .map(([deviceId, startedAt]) => ({\n        deviceId,\n        startedAt,\n        state: this.#lastState.get(deviceId),\n      }))\n      .filter(s => !this.#livePlayers.has(s.deviceId))\n      .filter(s => s.state && isPlaying(s.state))\n      .sort((a, b) => b.startedAt - a.startedAt)\n      .pop()?.deviceId;\n\n    // No other players currently playing?\n    if (longestPlayingId === undefined) {\n      this.#setMayStop();\n      return;\n    }\n\n    // We know this value is available since we have a live player playing ID\n    const nextPlayerState = this.#lastState.get(longestPlayingId)!;\n    this.#promotePlayer(nextPlayerState);\n  };\n\n  #markPlayerStopped = ({deviceId}: CDJStatus.State) => {\n    this.#lastStoppedTimes.delete(deviceId);\n    this.#lastStartTime.delete(deviceId);\n    this.#livePlayers.delete(deviceId);\n\n    this.#promoteNextPlayer();\n    this.#emitter.emit('stopped', {deviceId});\n  };\n\n  #setMayStop = async () => {\n    // We handle the set ending interupt as a async timeout as in the case with\n    // a set ending, the DJ may immediately turn off the CDJs, stopping state\n    // packets meaning we can't process on a heartbeat.\n    if (!this.#isSetActive) {\n      return;\n    }\n\n    // If any tracks are still playing the set has not ended\n    if ([...this.#lastState.values()].some(s => isPlaying(s) && this.#onAir(s))) {\n      return;\n    }\n\n    const shouldEnd = await new Promise<boolean>(resolve => {\n      const endTimeout = setTimeout(\n        () => resolve(true),\n        this.#config.timeBetweenSets * 1000\n      );\n      this.#cancelSetEnding = () => {\n        clearTimeout(endTimeout);\n        resolve(false);\n      };\n    });\n\n    this.#cancelSetEnding = undefined;\n\n    if (!shouldEnd || !this.#isSetActive) {\n      return;\n    }\n\n    this.#emitter.emit('setEnded');\n  };\n\n  /**\n   * Called to indicate that we think this player may be the first one to start\n   * playing. Will check if no other players are playing, if so it will report\n   * the player as now playing.\n   */\n  #playerMayBeFirst = (state: CDJStatus.State) => {\n    const otherPlayersPlaying = [...this.#lastState.values()]\n      .filter(otherState => otherState.deviceId !== state.deviceId)\n      .some(otherState => this.#onAir(otherState) && isPlaying(otherState));\n\n    if (otherPlayersPlaying) {\n      return;\n    }\n\n    this.#promotePlayer(state);\n  };\n\n  /**\n   * Called when the player is in a state where it is no longer playing, but\n   * may come back onair. Examples are slip pause, or 'cutting' a track on the\n   * mixer taking it offair.\n   */\n  #playerMayStop = ({deviceId}: CDJStatus.State) => {\n    this.#lastStoppedTimes.set(deviceId, Date.now());\n  };\n\n  /**\n   * Called to indicate that a device has reported a different playState than\n   * it had previously reported.\n   */\n  #handlePlaystateChange = (lastState: CDJStatus.State, state: CDJStatus.State) => {\n    const {deviceId} = state;\n\n    const isFollowingMaster =\n      this.#config.mode === MixstatusMode.FollowsMaster && state.isMaster;\n\n    const nowPlaying = isPlaying(state);\n    const wasPlaying = isPlaying(lastState);\n\n    const isNowPlaying = nowPlaying && !wasPlaying;\n\n    // Was this device in a 'may stop' state and it has begun on-air playing\n    // again?\n    if (this.#lastStoppedTimes.has(deviceId) && nowPlaying && this.#onAir(state)) {\n      this.#lastStoppedTimes.delete(deviceId);\n      return;\n    }\n\n    if (isNowPlaying && isFollowingMaster) {\n      this.#promotePlayer(state);\n    }\n\n    if (isNowPlaying) {\n      this.#lastStartTime.set(deviceId, Date.now());\n      this.#playerMayBeFirst(state);\n      return;\n    }\n\n    if (wasPlaying && isStopping(state)) {\n      this.#markPlayerStopped(state);\n      return;\n    }\n\n    if (wasPlaying && !nowPlaying) {\n      this.#playerMayStop(state);\n    }\n  };\n\n  #handleOnairChange = (state: CDJStatus.State) => {\n    const {deviceId} = state;\n\n    // Player may have just been brought on with nothing else playing\n    this.#playerMayBeFirst(state);\n\n    if (!this.#livePlayers.has(deviceId)) {\n      return;\n    }\n\n    if (!this.#onAir(state)) {\n      this.#playerMayStop(state);\n      return;\n    }\n\n    // Play has come back onair\n    this.#lastStoppedTimes.delete(deviceId);\n  };\n\n  /**\n   * Feed a CDJStatus state object to the mix state processor\n   */\n  handleState(state: CDJStatus.State) {\n    const {deviceId, playState} = state;\n\n    const lastState = this.#lastState.get(deviceId);\n    this.#lastState.set(deviceId, state);\n\n    // If this is the first time we've heard from this CDJ, and it is on air\n    // and playing, report it immediately. This is different from reporting the\n    // first playing track, as the CDJ will have already sent many states.\n    if (lastState === undefined && this.#onAir(state) && isPlaying(state)) {\n      this.#lastStartTime.set(deviceId, Date.now());\n      this.#playerMayBeFirst(state);\n      return;\n    }\n\n    // Play state has changed since this play last reported\n    if (lastState && lastState.playState !== playState) {\n      this.#handlePlaystateChange(lastState, state);\n    }\n\n    if (lastState && this.#onAir(lastState) !== this.#onAir(state)) {\n      this.#handleOnairChange(state);\n    }\n\n    // Are we simply following master?\n    if (\n      this.#config.mode === MixstatusMode.FollowsMaster &&\n      lastState?.isMaster === false &&\n      state.isMaster\n    ) {\n      this.#promotePlayer(state);\n      return;\n    }\n\n    // If a device has been playing for the required number of beats, we may be\n    // able to report it as live\n    const startedAt = this.#lastStartTime.get(deviceId);\n    const requiredPlayTime =\n      this.#config.beatsUntilReported *\n      bpmToSeconds(state.trackBPM!, state.sliderPitch) *\n      1000;\n\n    if (\n      this.#config.mode === MixstatusMode.SmartTiming &&\n      startedAt !== undefined &&\n      requiredPlayTime <= Date.now() - startedAt\n    ) {\n      this.#promotePlayer(state);\n    }\n\n    // If a device has been in a 'potentially stopped' state for long enough,\n    // we can mark the track as truely stopped.\n    const stoppedAt = this.#lastStoppedTimes.get(deviceId);\n    const requiredStopTime =\n      this.#config.allowedInterruptBeats *\n      bpmToSeconds(state.trackBPM!, state.sliderPitch) *\n      1000;\n\n    if (stoppedAt !== undefined && requiredStopTime <= Date.now() - stoppedAt) {\n      this.#markPlayerStopped(state);\n    }\n  }\n\n  /**\n   * Manually reports the track that has been playing the longest which has not\n   * yet been reported as live.\n   */\n  triggerNextTrack() {\n    this.#promoteNextPlayer();\n  }\n}\n","import {CDJStatus} from 'src/types';\n\nconst playingStates = [CDJStatus.PlayState.Playing, CDJStatus.PlayState.Looping];\n\nconst stoppingStates = [\n  CDJStatus.PlayState.Cued,\n  CDJStatus.PlayState.Ended,\n  CDJStatus.PlayState.Loading,\n];\n\n/**\n * Returns true if the the status reports a playing state.\n */\nexport const isPlaying = (s: CDJStatus.State) => playingStates.includes(s.playState);\n\n/**\n * Returns true if the status reports a stopping state.\n */\nexport const isStopping = (s: CDJStatus.State) => stoppingStates.includes(s.playState);\n","import * as Sentry from '@sentry/node';\nimport {SpanStatus} from '@sentry/tracing';\n\nimport {randomUUID} from 'crypto';\nimport dgram, {Socket} from 'dgram';\nimport {NetworkInterfaceInfoIPv4} from 'os';\n\nimport {ANNOUNCE_PORT, BEAT_PORT, DEFAULT_VCDJ_ID, STATUS_PORT} from 'src/constants';\nimport Control from 'src/control';\nimport Database from 'src/db';\nimport DeviceManager from 'src/devices';\nimport LocalDatabase from 'src/localdb';\nimport {MixstatusProcessor} from 'src/mixstatus';\nimport RemoteDatabase from 'src/remotedb';\nimport StatusEmitter from 'src/status';\nimport {Device, NetworkState} from 'src/types';\nimport {getMatchingInterface} from 'src/utils';\nimport {udpBind, udpClose} from 'src/utils/udp';\nimport {Announcer, getVirtualCDJ} from 'src/virtualcdj';\n\nconst connectErrorHelp =\n  'Network must be configured. Try using `autoconfigFromPeers` or `configure`';\n\nexport interface NetworkConfig {\n  /**\n   * The network interface to listen for devices on the network over\n   */\n  iface: NetworkInterfaceInfoIPv4;\n  /**\n   * The ID of the virtual CDJ to pose as.\n   *\n   * IMPORTANT:\n   *\n   * You will likely want to configure this to be > 6, however it is important to\n   * note, if you choose an ID within the 1-6 range, no other CDJ may exist on the\n   * network using that ID. you CAN NOT have 6 CDJs if you're using one of their slots.\n   *\n   * However, should you want to make metadata queries to a unanalized media\n   * device connected to the CDJ, or metadata queries for CD disc data, you MUST\n   * use a ID within the 1-6 range, as the CDJs will not respond to metadata\n   * requests outside of the range of 1-6\n   *\n   * Note that rekordbox analized media connected to the CDJ is accessed out of\n   * band of the networks remote database protocl, and is not limited by this\n   * restriction.\n   */\n  vcdjId: number;\n}\n\ninterface ConnectionService {\n  announcer: Announcer;\n  control: Control;\n  remotedb: RemoteDatabase;\n  localdb: LocalDatabase;\n  database: Database;\n}\n\ninterface ConstructOpts {\n  config?: NetworkConfig;\n  announceSocket: Socket;\n  beatSocket: Socket;\n  statusSocket: Socket;\n  deviceManager: DeviceManager;\n  statusEmitter: StatusEmitter;\n}\n\n/**\n * Services that are not accessible until connected\n */\ntype ConnectedServices =\n  | 'statusEmitter'\n  | 'control'\n  | 'db'\n  | 'localdb'\n  | 'remotedb'\n  | 'mixstatus';\n\nexport type ConnectedProlinkNetwork = ProlinkNetwork & {\n  [P in ConnectedServices]: NonNullable<ProlinkNetwork[P]>;\n} & {\n  state: NetworkState.Connected;\n  isConfigured: true;\n};\n\n/**\n * Brings the Prolink network online.\n *\n * This is the primary entrypoint for connecting to the prolink network.\n */\nexport async function bringOnline(config?: NetworkConfig) {\n  Sentry.setTag('connectionId', randomUUID());\n  const tx = Sentry.startTransaction({name: 'bringOnline'});\n\n  // Socket used to listen for devices on the network\n  const announceSocket = dgram.createSocket('udp4');\n\n  // Socket used to listen for beat timing information\n  const beatSocket = dgram.createSocket('udp4');\n\n  // Socket used to listen for status packets\n  const statusSocket = dgram.createSocket('udp4');\n\n  try {\n    await udpBind(announceSocket, ANNOUNCE_PORT, '0.0.0.0');\n    await udpBind(beatSocket, BEAT_PORT, '0.0.0.0');\n    await udpBind(statusSocket, STATUS_PORT, '0.0.0.0');\n  } catch (err) {\n    Sentry.captureException(err);\n    tx.setStatus(SpanStatus.Unavailable);\n    tx.finish();\n\n    throw err;\n  }\n\n  const deviceManager = new DeviceManager(announceSocket);\n  const statusEmitter = new StatusEmitter(statusSocket);\n\n  tx.finish();\n\n  const network = new ProlinkNetwork({\n    config,\n    announceSocket,\n    beatSocket,\n    statusSocket,\n    deviceManager,\n    statusEmitter,\n  });\n\n  return network;\n}\n\nexport class ProlinkNetwork {\n  #state: NetworkState = NetworkState.Online;\n\n  #announceSocket: Socket;\n  #beatSocket: Socket;\n  #statusSocket: Socket;\n  #deviceManager: DeviceManager;\n  #statusEmitter: StatusEmitter;\n\n  #config: null | NetworkConfig;\n  #connection: null | ConnectionService;\n  #mixstatus: null | MixstatusProcessor;\n\n  /**\n   * @internal\n   */\n  constructor({\n    config,\n    announceSocket,\n    beatSocket,\n    statusSocket,\n    deviceManager,\n    statusEmitter,\n  }: ConstructOpts) {\n    this.#config = config ?? null;\n\n    this.#announceSocket = announceSocket;\n    this.#beatSocket = beatSocket;\n    this.#statusSocket = statusSocket;\n    this.#deviceManager = deviceManager;\n    this.#statusEmitter = statusEmitter;\n\n    this.#connection = null;\n    this.#mixstatus = null;\n\n    // We always start online when constructing the network\n    this.#state = NetworkState.Online;\n  }\n\n  /**\n   * Configure / reconfigure the network with an explicit configuration.\n   *\n   * You may need to disconnect and re-connect the network after making a\n   * networking configuration change.\n   */\n  configure(config: NetworkConfig) {\n    this.#config = {...this.#config, ...config};\n  }\n\n  /**\n   * Wait for another device to show up on the network to determine which network\n   * interface to listen on.\n   *\n   * Defaults the Virtual CDJ ID to 5.\n   */\n  async autoconfigFromPeers() {\n    const tx = Sentry.startTransaction({name: 'autoConfigure'});\n    // wait for first device to appear on the network\n    const firstDevice = await new Promise<Device>(resolve =>\n      this.#deviceManager.once('connected', resolve)\n    );\n    const iface = getMatchingInterface(firstDevice.ip);\n\n    // Log addr and iface addr / mask for cases where it may have matched the\n    // wrong interface\n    tx.setTag('deviceName', firstDevice.name);\n    tx.setData('deviceAddr', firstDevice.ip.address);\n    tx.setData('ifaceAddr', iface?.address);\n\n    if (iface === null) {\n      tx.setStatus(SpanStatus.InternalError);\n      tx.setTag('noIfaceFound', 'yes');\n      tx.finish();\n\n      throw new Error('Unable to determine network interface');\n    }\n\n    this.#config = {...this.#config, vcdjId: DEFAULT_VCDJ_ID, iface};\n    tx.finish();\n  }\n\n  /**\n   * Connect to the network.\n   *\n   * The network must first have been configured (either with autoconfigFromPeers\n   * or manual configuration). This will then initialize all the network services.\n   */\n  connect() {\n    if (this.#config === null) {\n      throw new Error(connectErrorHelp);\n    }\n\n    const tx = Sentry.startTransaction({name: 'connect'});\n\n    // Create VCDJ for the interface's broadcast address\n    const vcdj = getVirtualCDJ(this.#config.iface, this.#config.vcdjId);\n\n    // Start announcing\n    const announcer = new Announcer(vcdj, this.#announceSocket, this.deviceManager);\n    announcer.start();\n\n    // Create remote and local databases\n    const remotedb = new RemoteDatabase(this.#deviceManager, vcdj);\n    const localdb = new LocalDatabase(vcdj, this.#deviceManager, this.#statusEmitter);\n\n    // Create unified database\n    const database = new Database(vcdj, localdb, remotedb, this.#deviceManager);\n\n    // Create controller service\n    const control = new Control(this.#beatSocket, vcdj);\n\n    this.#state = NetworkState.Connected;\n    this.#connection = {announcer, control, remotedb, localdb, database};\n\n    tx.finish();\n  }\n\n  /**\n   * Disconnect from the network\n   */\n  disconnect() {\n    if (this.#config === null) {\n      throw new Error(connectErrorHelp);\n    }\n\n    // Stop announcing ourself\n    this.#connection?.announcer.stop();\n\n    // Disconnect devices from the remote and local databases\n    for (const device of this.deviceManager.devices.values()) {\n      this.remotedb?.disconnectFromDevice(device);\n      this.localdb?.disconnectForDevice(device);\n    }\n\n    return Promise.all([\n      udpClose(this.#announceSocket),\n      udpClose(this.#statusSocket),\n      udpClose(this.#beatSocket),\n    ]);\n  }\n\n  /**\n   * Get the current NetworkState of the network.\n   *\n   * When the network is Online you may use the deviceManager to list and react to\n   * devices on the nettwork\n   *\n   * Once the network is Connected you may use the statusEmitter to listen for\n   * player status events, query the media databases of devices using the db\n   * service (or specifically query the localdb or remotedb).\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * Check if the network has been configured. You cannot connect to the network\n   * until it has been configured.\n   */\n  get isConfigured() {\n    return this.#config !== null;\n  }\n\n  /**\n   * Typescript discriminate helper. Refines the type of the network to one\n   * that reflects the connected status. Useful to avoid having to gaurd the\n   * service getters from nulls.\n   */\n  isConnected(): this is ConnectedProlinkNetwork {\n    return this.#state === NetworkState.Connected;\n  }\n\n  /**\n   * Get the {@link DeviceManager} service. This service is used to monitor and\n   * react to devices connecting and disconnecting from the prolink network.\n   */\n  get deviceManager() {\n    return this.#deviceManager;\n  }\n\n  /**\n   * Get the {@link StatusEmitter} service. This service is used to monitor\n   * status updates on each CDJ.\n   */\n  get statusEmitter() {\n    // Even though the status emitter service does not need to wait for the\n    // network to be Connected, it does not make sense to use it unless it is. So\n    // we artificially return null if we are not connected\n    return this.#state === NetworkState.Connected ? this.#statusEmitter : null;\n  }\n\n  /**\n   * Get the {@link Control} service. This service can be used to control the\n   * Playstate of CDJs on the network.\n   */\n  get control() {\n    return this.#connection?.control ?? null;\n  }\n\n  /**\n   * Get the {@link Database} service. This service is used to retrieve\n   * metadata and listings from devices on the network, automatically choosing the\n   * best strategy to access the data.\n   */\n  get db() {\n    return this.#connection?.database ?? null;\n  }\n\n  /**\n   * Get the {@link LocalDatabase} service. This service is used to query and sync\n   * metadata that is downloaded directly from the rekordbox database present\n   * on media connected to the CDJs.\n   */\n  get localdb() {\n    return this.#connection?.localdb ?? null;\n  }\n\n  /**\n   * Get the {@link RemoteDatabase} service. This service is used to query\n   * metadata directly from the database service running on Rekordbox and the CDJs\n   * themselves.\n   *\n   * NOTE: To use this service to access the CDJ remote database service, the\n   *       Virtual CDJ must report itself as an ID between 1 and 6. This means\n   *       there cannot be four physical CDJs on the network to access any CDJs\n   *       remote database.\n   */\n  get remotedb() {\n    return this.#connection?.remotedb ?? null;\n  }\n\n  /**\n   * Get (and initalize) the {@link MixstatusProcessor} service. This service can\n   * be used to monitor the 'status' of devices on the network as a whole.\n   */\n  get mixstatus() {\n    if (this.#connection === null) {\n      return null;\n    }\n\n    // Delay initialization of the mixstatus processor so that we don't consume\n    // status events unless we actually want to.\n    if (this.#mixstatus === null) {\n      this.#mixstatus = new MixstatusProcessor();\n      this.#statusEmitter.on('status', s => this.#mixstatus?.handleState(s));\n    }\n\n    return this.#mixstatus;\n  }\n}\n","import * as Sentry from '@sentry/node';\nimport {Span} from '@sentry/tracing';\n\nimport {Device, DeviceID, MediaSlot} from 'src/types';\nimport {getSlotName} from 'src/utils';\n\nimport {\n  fetchFile as fetchFileCall,\n  FileInfo,\n  getExports,\n  lookupPath,\n  makeProgramClient,\n  mountFilesystem,\n} from './programs';\nimport {RetryConfig, RpcConnection, RpcProgram} from './rpc';\nimport {mount, nfs} from './xdr';\n\nexport interface FetchProgress {\n  read: number;\n  total: number;\n}\n\ninterface ClientSet {\n  conn: RpcConnection;\n  mountClient: RpcProgram;\n  nfsClient: RpcProgram;\n}\n\n/**\n * The slot <-> mount name mapping is well known.\n */\nconst slotMountMapping = {\n  [MediaSlot.USB]: '/C/',\n  [MediaSlot.SD]: '/B/',\n  [MediaSlot.RB]: '/',\n} as const;\n\n/**\n * The module-level retry configuration for newly created RpcConnections.\n */\nlet retryConfig: RetryConfig = {};\n\n/**\n * This module maintains a singleton cached list of player addresses -> active\n * connections. It is not guaranteed that the connections in the cache will\n * still be connected.\n */\nconst clientsCache = new Map<string, ClientSet>();\n\n/**\n * Given a device address running a nfs and mountd RPC server, provide\n * RpcProgram clients that may be used to call these services.\n *\n * NOTE: This function will cache the clients for the address, recreating the\n * connections if the cached clients have disconnected.\n */\nasync function getClients(address: string) {\n  const cachedSet = clientsCache.get(address);\n\n  if (cachedSet !== undefined && cachedSet.conn.connected) {\n    return cachedSet;\n  }\n\n  // Cached socket is no longer connected. Remove and reconnect\n  if (cachedSet !== undefined) {\n    clientsCache.delete(address);\n  }\n\n  const conn = new RpcConnection(address, retryConfig);\n\n  const mountClient = await makeProgramClient(conn, {\n    id: mount.Program,\n    version: mount.Version,\n  });\n\n  const nfsClient = await makeProgramClient(conn, {\n    id: nfs.Program,\n    version: nfs.Version,\n  });\n\n  const set = {conn, mountClient, nfsClient};\n  clientsCache.set(address, set);\n\n  return set;\n}\n\ninterface GetRootHandleOptions {\n  device: Device;\n  slot: keyof typeof slotMountMapping;\n  mountClient: RpcProgram;\n  span?: Span;\n}\n\n/**\n * This module maintains a singleton cached list of (device address + slot) -> file\n * handles. The file handles may become stale in this list should the devices\n * connected to the players slot change.\n */\nconst rootHandleCache = new Map<string, Map<MediaSlot, Buffer>>();\n\n/**\n * Locate the root filehandle of the given device slot.\n *\n * NOTE: This function will cache the root handle for the device + slot. Should\n *       the device have changed the slot will not longer be valid (TODO,\n *       verify this). It is up to the caller to clear the cache and get the\n *       new root handle in that case.\n */\nasync function getRootHandle({device, slot, mountClient, span}: GetRootHandleOptions) {\n  const tx = span?.startChild({op: 'getRootHandle'});\n\n  const {address} = device.ip;\n\n  const deviceSlotCache = rootHandleCache.get(address) ?? new Map<MediaSlot, Buffer>();\n  const cachedRootHandle = deviceSlotCache.get(slot);\n\n  if (cachedRootHandle !== undefined) {\n    return cachedRootHandle;\n  }\n\n  const exports = await getExports(mountClient, tx);\n  const targetExport = exports.find(e => e.filesystem === slotMountMapping[slot]);\n\n  if (targetExport === undefined) {\n    return null;\n  }\n\n  const rootHandle = await mountFilesystem(mountClient, targetExport, tx);\n\n  deviceSlotCache.set(slot, rootHandle);\n  rootHandleCache.set(address, deviceSlotCache);\n\n  tx?.finish();\n\n  return rootHandle;\n}\n\ninterface FetchFileOptions {\n  device: Device;\n  slot: keyof typeof slotMountMapping;\n  path: string;\n  onProgress?: Parameters<typeof fetchFileCall>[2];\n  span?: Span;\n}\n\nconst badRoothandleError = (slot: MediaSlot, deviceId: DeviceID) =>\n  new Error(`The slot (${slot}) is not exported on Device ${deviceId}`);\n\n/**\n * Fetch a file from a devices NFS server.\n *\n * NOTE: The connection and root filehandle (The 'mounted' NFS export on the\n *       device) is cached to improve subsequent fetching performance. It's\n *       important that when the device disconnects you call the {@link\n *       resetDeviceCache} function.\n */\nexport async function fetchFile({\n  device,\n  slot,\n  path,\n  onProgress,\n  span,\n}: FetchFileOptions) {\n  const tx = span\n    ? span.startChild({op: 'fetchFile'})\n    : Sentry.startTransaction({name: 'fetchFile'});\n\n  const {mountClient, nfsClient} = await getClients(device.ip.address);\n  const rootHandle = await getRootHandle({device, slot, mountClient, span: tx});\n\n  if (rootHandle === null) {\n    throw badRoothandleError(slot, device.id);\n  }\n\n  // It's possible that our roothandle is no longer valid, if we fail to lookup\n  // a path lets first try and clear our roothandle cache\n  let fileInfo: FileInfo | null = null;\n\n  try {\n    fileInfo = await lookupPath(nfsClient, rootHandle, path, tx);\n  } catch {\n    rootHandleCache.delete(device.ip.address);\n    const rootHandle = await getRootHandle({device, slot, mountClient, span: tx});\n\n    if (rootHandle === null) {\n      throw badRoothandleError(slot, device.id);\n    }\n\n    // Desperately try once more to lookup the file\n    fileInfo = await lookupPath(nfsClient, rootHandle, path, tx);\n  }\n\n  const file = await fetchFileCall(nfsClient, fileInfo, onProgress, tx);\n\n  tx.setData('path', path);\n  tx.setData('slot', getSlotName(slot));\n  tx.setData('size', fileInfo.size);\n  tx.finish();\n\n  return file;\n}\n\n/**\n * Clear the cached NFS connection and root filehandle for the given device\n */\nexport function resetDeviceCache(device: Device) {\n  clientsCache.delete(device.ip.address);\n  rootHandleCache.delete(device.ip.address);\n}\n\n/**\n * Configure the retry strategy for making NFS calls using this module\n */\nexport function configureRetryStrategy(config: RetryConfig) {\n  retryConfig = config;\n\n  for (const client of clientsCache.values()) {\n    client.conn.retryConfig = config;\n  }\n}\n","import {Span} from '@sentry/tracing';\n\nimport {RpcConnection, RpcProgram} from './rpc';\nimport {flattenLinkedList} from './utils';\nimport {mount, nfs, portmap} from './xdr';\nimport {FetchProgress} from '.';\n\n/**\n * How many bytes of a file should we read at once.\n */\nconst READ_SIZE = 2048;\n\ninterface Program {\n  id: number;\n  version: number;\n}\n\n/**\n * Queries for the listening port of a RPC program\n */\nexport async function makeProgramClient(conn: RpcConnection, program: Program) {\n  const getPortData = new portmap.GetPort({\n    program: program.id,\n    version: program.version,\n    protocol: 17, // UDP protocol\n    port: 0,\n  });\n\n  const data = await conn.call({\n    port: 111,\n    program: portmap.Program,\n    version: portmap.Version,\n    procedure: portmap.Procedure.getPort().value,\n    data: getPortData.toXDR(),\n  });\n\n  const port = data.readInt32BE();\n\n  return new RpcProgram(conn, program.id, program.version, port);\n}\n\n/**\n * Export represents a NFS export on a remote system\n */\ninterface Export {\n  /**\n   * The name of the exported filesystem\n   */\n  filesystem: string;\n  /**\n   * The groups allowed to mount this filesystem\n   */\n  groups: string[];\n}\n\n/**\n * Attributes a remote file\n */\nexport interface FileInfo {\n  handle: Buffer;\n  name: string;\n  size: number;\n  type: 'null' | 'regular' | 'directory' | 'block' | 'char' | 'link';\n}\n\n/**\n * Request a list of export entries.\n */\nexport async function getExports(conn: RpcProgram, span?: Span) {\n  const tx = span?.startChild({op: 'getExports'});\n\n  const data = await conn.call({\n    procedure: mount.Procedure.export().value,\n    data: Buffer.alloc(0),\n  });\n\n  const entry = mount.ExportListResponse.fromXDR(data).next();\n  if (entry === undefined) {\n    return [];\n  }\n\n  const exports = flattenLinkedList(entry).map((entry: any) => ({\n    filesystem: entry.filesystem(),\n    groups: flattenLinkedList(entry.groups()).map((g: any) => g.name().toString()),\n  }));\n\n  tx?.finish();\n\n  return exports as Export[];\n}\n\n/**\n * Mount the specified export, returning the file handle.\n */\nexport async function mountFilesystem(\n  conn: RpcProgram,\n  {filesystem}: Export,\n  span?: Span\n) {\n  const tx = span?.startChild({op: 'mountFilesystem', data: {filesystem}});\n\n  const resp = await conn.call({\n    procedure: mount.Procedure.mount().value,\n    data: new mount.MountRequest({filesystem}).toXDR(),\n  });\n\n  const fileHandleResp = mount.FHStatus.fromXDR(resp);\n  if (fileHandleResp.arm() !== 'success') {\n    throw new Error('Failed to mount filesystem');\n  }\n\n  tx?.finish();\n\n  return fileHandleResp.success() as Buffer;\n}\n\n/**\n * Lookup a file within the directory of the provided file handle, returning\n * the FileInfo object if the file can be located.\n */\nexport async function lookupFile(\n  conn: RpcProgram,\n  handle: Buffer,\n  filename: string,\n  span?: Span\n) {\n  const tx = span?.startChild({op: 'lookupFile', description: filename});\n\n  const resp = await conn.call({\n    procedure: nfs.Procedure.lookup().value,\n    data: new nfs.DirectoryOpArgs({handle, filename}).toXDR(),\n  });\n\n  const fileResp = nfs.DirectoryOpResponse.fromXDR(resp);\n  if (fileResp.arm() !== 'success') {\n    throw new Error(`Failed file lookup of ${filename}`);\n  }\n\n  const fileHandle = fileResp.success().handle();\n  const attributes = fileResp.success().attributes();\n\n  const info: FileInfo = {\n    name: filename,\n    handle: fileHandle,\n    size: attributes.size(),\n    type: attributes.type().name,\n  };\n\n  tx?.finish();\n\n  return info;\n}\n\n/**\n * Lookup the absolute path to a file, given the root file handle and path,\n */\nexport async function lookupPath(\n  conn: RpcProgram,\n  rootHandle: Buffer,\n  filepath: string,\n  span?: Span\n) {\n  const tx = span?.startChild({op: 'lookupPath', description: filepath});\n\n  // There are times when the path includes a leading slash, sanitize that\n  const pathParts = filepath.replace(/^\\//, '').split('/');\n\n  let handle: Buffer = rootHandle;\n  let info: FileInfo;\n\n  while (pathParts.length !== 0) {\n    const filename = pathParts.shift()!;\n    const fileInfo = await lookupFile(conn, handle, filename, tx);\n\n    info = fileInfo;\n    handle = info.handle;\n  }\n\n  tx?.finish();\n\n  // We can gaurentee this will be set since we will have failed to lookup the\n  // file above\n  return info!;\n}\n\n/**\n * Fetch the specified file the remote NFS server. This will read the entire\n * file into memory.\n */\nexport async function fetchFile(\n  conn: RpcProgram,\n  file: FileInfo,\n  onProgress?: (progress: FetchProgress) => void,\n  span?: Span\n) {\n  const {handle, name, size} = file;\n  const data = Buffer.alloc(size);\n\n  const tx = span?.startChild({\n    op: 'download',\n    description: name,\n    data: {size},\n  });\n\n  let bytesRead = 0;\n\n  while (bytesRead < size) {\n    const readArgs = new nfs.ReadArgs({\n      handle,\n      offset: bytesRead,\n      count: READ_SIZE,\n      totalCount: 0,\n    });\n\n    const resp = await conn.call({\n      procedure: nfs.Procedure.read().value,\n      data: readArgs.toXDR(),\n    });\n\n    const dataResp = nfs.ReadResponse.fromXDR(resp);\n    if (dataResp.arm() !== 'success') {\n      throw new Error(`Failed to read file at offset ${bytesRead} / ${size}`);\n    }\n\n    const buffer = dataResp.success().data();\n\n    data.set(buffer, bytesRead);\n    bytesRead += buffer.length;\n\n    onProgress?.({read: bytesRead, total: size});\n  }\n\n  tx?.finish();\n\n  return data;\n}\n","import {Mutex} from 'async-mutex';\nimport promiseRetry from 'promise-retry';\nimport {timeout, TimeoutError} from 'promise-timeout';\nimport {OperationOptions} from 'retry';\n\nimport dgram, {Socket} from 'dgram';\n\nimport {udpClose, udpRead, udpSend} from 'src/utils/udp';\n\nimport {rpc} from './xdr';\n\n/**\n * The RPC auth stamp passed by the CDJs. It's unclear if this is actually\n * important, but I'm keeping the rpc calls as close to CDJ calls as I can.\n */\nconst CDJ_AUTH_STAMP = 0x967b8703;\n\nconst rpcAuthMessage = new rpc.UnixAuth({\n  stamp: CDJ_AUTH_STAMP,\n  name: '',\n  uid: 0,\n  gid: 0,\n  gids: [],\n});\n\ninterface RpcCall {\n  port: number;\n  program: number;\n  version: number;\n  procedure: number;\n  data: Buffer;\n}\n\n/**\n * Configuration for the retry strategy to use when making RPC calls\n *\n * @see https://www.npmjs.com/package/promise-retry#promiseretryfn-options\n */\nexport type RetryConfig = OperationOptions & {\n  /**\n   * Time in milliseconds to wait before a RPC transaction should timeout.\n   * @default 1000\n   */\n  transactionTimeout?: number;\n};\n\n/**\n * Generic RPC connection. Can be used to make RPC 2 calls to any program\n * specified in the RpcCall.\n */\nexport class RpcConnection {\n  address: string;\n  retryConfig: RetryConfig;\n  socket: Socket;\n  mutex: Mutex;\n  xid = 1;\n\n  constructor(address: string, retryConfig?: RetryConfig) {\n    this.address = address;\n    this.retryConfig = retryConfig ?? {};\n    this.socket = dgram.createSocket('udp4');\n    this.mutex = new Mutex();\n  }\n\n  get connected() {\n    // TODO: Figure out what logic we can do here to determine if the socket is\n    // still open.\n    return true;\n  }\n\n  setupRequest({program, version, procedure, data}: Omit<RpcCall, 'port'>) {\n    const auth = new rpc.Auth({\n      flavor: 1,\n      body: rpcAuthMessage.toXDR(),\n    });\n\n    const verifier = new rpc.Auth({\n      flavor: 0,\n      body: Buffer.alloc(0),\n    });\n\n    const request = new rpc.Request({\n      rpcVersion: rpc.Version,\n      programVersion: version,\n      program,\n      procedure,\n      auth,\n      verifier,\n      data,\n    });\n\n    const packet = new rpc.Packet({\n      xid: this.xid,\n      message: rpc.Message.request(request),\n    });\n\n    return packet.toXDR();\n  }\n\n  /**\n   * Execute a RPC transaction (call and response).\n   *\n   * If a transaction does not complete after the configured timeout it will be\n   * retried with the retry configuration.\n   */\n  async call({port, ...call}: RpcCall) {\n    this.xid++;\n\n    const callData = this.setupRequest(call);\n\n    // Function to execute the transaction\n    const executeCall = async () => {\n      await udpSend(this.socket, callData, 0, callData.length, port, this.address);\n      return udpRead(this.socket);\n    };\n\n    const {transactionTimeout, ...retryConfig} = this.retryConfig;\n\n    // Function to execute the transaction, with timeout if the transaction\n    // does not resolve after RESPONSE_RETRY_TIMEOUT.\n    const executeWithTimeout = () => timeout(executeCall(), transactionTimeout ?? 1000);\n\n    // Function to execute the transaction, with retries if the transaction times out.\n    const executeWithRetry = () =>\n      promiseRetry(retryConfig, async retry => {\n        try {\n          return await executeWithTimeout();\n        } catch (err) {\n          if (err instanceof TimeoutError) {\n            retry(err);\n          } else {\n            throw err;\n          }\n        }\n        return undefined;\n      });\n\n    // Execute the transaction exclusively to avoid async call races\n    const resp = await this.mutex.runExclusive(executeWithRetry);\n\n    // Decode the XDR response\n    const packet = rpc.Packet.fromXDR(resp);\n\n    const message = packet.message().response();\n    if (message.arm() !== 'accepted') {\n      throw new Error('RPC request was denied');\n    }\n\n    const body = message.accepted().response();\n    if (body.arm() !== 'success') {\n      throw new Error('RPC did not successfully return data');\n    }\n\n    return body.success() as Buffer;\n  }\n\n  async disconnect() {\n    await udpClose(this.socket);\n  }\n}\n\ntype RpcProgramCall = Pick<RpcCall, 'procedure' | 'data'>;\n\n/**\n * RpcProgram is constructed with specialization details for a specific RPC\n * program. This should be used to avoid having to repeat yourself for calls\n * made using the RpcConnection.\n */\nexport class RpcProgram {\n  program: number;\n  version: number;\n  port: number;\n  conn: RpcConnection;\n\n  constructor(conn: RpcConnection, program: number, version: number, port: number) {\n    this.conn = conn;\n    this.program = program;\n    this.version = version;\n    this.port = port;\n  }\n\n  call(data: RpcProgramCall) {\n    const {program, version, port} = this;\n    return this.conn.call({program, version, port, ...data});\n  }\n\n  disconnect() {\n    this.conn.disconnect();\n  }\n}\n","/**\n * Helper to flatten linked list structures into an array\n */\nexport const flattenLinkedList = (item: any): any => [\n  item,\n  ...(item.next() ? flattenLinkedList(item.next()) : []),\n];\n","import * as XDR from 'js-xdr';\nimport {calculatePadding, slicePadding} from 'js-xdr/lib/util';\n\n/**\n * A xdr type to read the rest of the data in the buffer\n */\nconst OpaqueData = {\n  read(io: any) {\n    return io.slice().buffer();\n  },\n\n  write(value: any, io: any) {\n    io.writeBufferPadded(value);\n  },\n\n  isValid(value: any) {\n    return Buffer.isBuffer(value);\n  },\n};\n\n/**\n * In the standard NFS protocol,strings are typically ASCII. For Pioneer\n * players, it is an UTF-16LE encoded string; This type handles conversion.\n */\nclass StringUTF16LE {\n  read(io: any) {\n    const length = XDR.Int.read(io);\n    const padding = calculatePadding(length);\n    const result = io.slice(length);\n\n    slicePadding(io, padding);\n\n    return result.buffer().toString('utf16le');\n  }\n\n  write(value: any, io: any) {\n    const data = Buffer.from(value, 'utf16le');\n    XDR.Int.write(data.length, io);\n    io.writeBufferPadded(data);\n  }\n\n  isValid(value: any) {\n    return typeof value === 'string';\n  }\n}\n\n/**\n * RPC XDR data types. This implemenets nearly the entire XDR spec for the\n * ONC-RPC protocol.\n */\nexport const rpc = XDR.config((xdr: any) => {\n  xdr.const('Version', 2);\n\n  xdr.enum('MessageType', {\n    request: 0,\n    response: 1,\n  });\n\n  xdr.enum('ResponseStatus', {\n    accepted: 0,\n    denied: 1,\n  });\n\n  xdr.enum('AcceptStatus', {\n    success: 0,\n    programUnavailable: 1,\n    programMismatch: 2,\n    processUnavailable: 3,\n    garbageArguments: 4,\n    systemError: 5,\n  });\n\n  xdr.enum('RejectStatus', {\n    mismatch: 0,\n    authError: 1,\n  });\n\n  xdr.enum('AuthStatus', {\n    ok: 0,\n    badCredentials: 1,\n    rjectedCredentials: 2,\n    badVerification: 3,\n    rejectedVerification: 4,\n    tooWeak: 5,\n    invalidResponse: 6,\n    failed: 7,\n  });\n\n  xdr.struct('UnixAuth', [\n    ['stamp', xdr.uint()],\n    ['name', xdr.string(255)],\n    ['uid', xdr.uint()],\n    ['gid', xdr.uint()],\n    ['gids', xdr.varArray(xdr.uint(), 16)],\n  ]);\n\n  xdr.struct('Auth', [\n    ['flavor', xdr.uint()],\n    ['body', xdr.varOpaque(400)],\n  ]);\n\n  xdr.struct('Request', [\n    ['rpcVersion', xdr.uint()],\n    ['program', xdr.uint()],\n    ['programVersion', xdr.uint()],\n    ['procedure', xdr.uint()],\n    ['auth', xdr.lookup('Auth')],\n    ['verifier', xdr.lookup('Auth')],\n    ['data', OpaqueData],\n  ]);\n\n  xdr.struct('MismatchInfo', [\n    ['low', xdr.uint()],\n    ['high', xdr.uint()],\n  ]);\n\n  xdr.union('ResponseData', {\n    switchOn: xdr.lookup('AcceptStatus'),\n    defaultArm: xdr.void(),\n    switches: [\n      ['success', 'success'],\n      ['programMismatch', 'programMismatch'],\n    ],\n    arms: {\n      success: OpaqueData,\n      programMismatch: xdr.lookup('MismatchInfo'),\n    },\n  });\n\n  xdr.struct('AcceptedResponse', [\n    ['verifier', xdr.lookup('Auth')],\n    ['response', xdr.lookup('ResponseData')],\n  ]);\n\n  xdr.union('RejectedResponse', {\n    switchOn: xdr.lookup('RejectStatus'),\n    switches: [\n      ['mismatch', 'mismatch'],\n      ['authError', 'authError'],\n    ],\n    arms: {\n      mismatch: xdr.lookup('MismatchInfo'),\n      authError: xdr.lookup('AuthStatus'),\n    },\n  });\n\n  xdr.union('Response', {\n    switchOn: xdr.lookup('ResponseStatus'),\n    switches: [\n      ['accepted', 'accepted'],\n      ['denied', 'denied'],\n    ],\n    arms: {\n      accepted: xdr.lookup('AcceptedResponse'),\n      denied: xdr.void(),\n    },\n  });\n\n  xdr.union('Message', {\n    switchOn: xdr.lookup('MessageType'),\n    switches: [\n      ['request', 'request'],\n      ['response', 'response'],\n    ],\n    arms: {\n      request: xdr.lookup('Request'),\n      response: xdr.lookup('Response'),\n    },\n  });\n\n  xdr.struct('Packet', [\n    ['xid', xdr.uint()],\n    ['message', xdr.lookup('Message')],\n  ]);\n});\n\n/**\n * Portmap RPC XDR types\n */\nexport const portmap = XDR.config((xdr: any) => {\n  xdr.const('Program', 100000);\n  xdr.const('Version', 2);\n\n  xdr.enum('Procedure', {\n    getPort: 3,\n  });\n\n  xdr.struct('GetPort', [\n    ['program', xdr.uint()],\n    ['version', xdr.uint()],\n    ['protocol', xdr.uint()],\n    ['port', xdr.uint()],\n  ]);\n});\n\n/**\n * Mount RPC XDR types\n */\nexport const mount = XDR.config((xdr: any) => {\n  xdr.const('Program', 100005);\n  xdr.const('Version', 1);\n\n  xdr.enum('Procedure', {\n    mount: 1,\n    export: 5,\n  });\n\n  xdr.typedef('Path', new StringUTF16LE());\n  xdr.typedef('Filehandle', xdr.opaque(32));\n\n  xdr.struct('MountRequest', [['filesystem', xdr.lookup('Path')]]);\n\n  xdr.struct('Groups', [\n    ['name', xdr.string(255)],\n    ['next', xdr.option(xdr.lookup('Groups'))],\n  ]);\n\n  xdr.struct('ExportList', [\n    ['filesystem', xdr.lookup('Path')],\n    ['groups', xdr.option(xdr.lookup('Groups'))],\n    ['next', xdr.option(xdr.lookup('ExportList'))],\n  ]);\n\n  xdr.union('FHStatus', {\n    switchOn: xdr.uint(),\n    defaultArm: xdr.void(),\n    switches: [[0, 'success']],\n    arms: {\n      success: xdr.lookup('Filehandle'),\n    },\n  });\n\n  xdr.struct('ExportListResponse', [['next', xdr.option(xdr.lookup('ExportList'))]]);\n});\n\n/**\n * NFS RPC XDR types\n */\nexport const nfs = XDR.config((xdr: any) => {\n  xdr.const('Program', 100003);\n  xdr.const('Version', 2);\n\n  xdr.enum('Procedure', {\n    lookup: 4,\n    read: 6,\n  });\n\n  xdr.typedef('Filename', new StringUTF16LE());\n  xdr.typedef('Filehandle', xdr.opaque(32));\n  xdr.typedef('NFSData', xdr.varOpaque(8192));\n\n  xdr.enum('FileType', {\n    null: 0,\n    regular: 1,\n    directory: 2,\n    block: 3,\n    char: 4,\n    link: 5,\n  });\n\n  xdr.struct('TimeValue', [\n    ['seconds', xdr.uint()],\n    ['useconds', xdr.uint()],\n  ]);\n\n  xdr.struct('FileAttributes', [\n    ['type', xdr.lookup('FileType')],\n    ['mode', xdr.uint()],\n    ['nlink', xdr.uint()],\n    ['uid', xdr.uint()],\n    ['gid', xdr.uint()],\n    ['size', xdr.uint()],\n    ['blocksize', xdr.uint()],\n    ['rdev', xdr.uint()],\n    ['blocks', xdr.uint()],\n    ['fsid', xdr.uint()],\n    ['fileid', xdr.uint()],\n    ['atime', xdr.lookup('TimeValue')],\n    ['mtime', xdr.lookup('TimeValue')],\n    ['ctime', xdr.lookup('TimeValue')],\n  ]);\n\n  xdr.struct('DirectoryOpArgs', [\n    ['handle', xdr.lookup('Filehandle')],\n    ['filename', xdr.lookup('Filename')],\n  ]);\n\n  xdr.struct('DirectoryOpResponseBody', [\n    ['handle', xdr.lookup('Filehandle')],\n    ['attributes', xdr.lookup('FileAttributes')],\n  ]);\n\n  xdr.union('DirectoryOpResponse', {\n    switchOn: xdr.uint(),\n    defaultArm: xdr.void(),\n    switches: [[0, 'success']],\n    arms: {\n      success: xdr.lookup('DirectoryOpResponseBody'),\n    },\n  });\n\n  xdr.struct('ReadArgs', [\n    ['handle', xdr.lookup('Filehandle')],\n    ['offset', xdr.uint()],\n    ['count', xdr.uint()],\n    ['totalCount', xdr.uint()],\n  ]);\n\n  xdr.struct('ReadBody', [\n    ['attributes', xdr.lookup('FileAttributes')],\n    ['data', xdr.lookup('NFSData')],\n  ]);\n\n  xdr.union('ReadResponse', {\n    switchOn: xdr.uint(),\n    defaultArm: xdr.void(),\n    switches: [[0, 'success']],\n    arms: {\n      success: xdr.lookup('ReadBody'),\n    },\n  });\n});\n","/**\n * All remote database messages include this 4 byte magic value.\n */\nexport const REMOTEDB_MAGIC = 0x872349ae;\n\n/**\n * The consistent port on which we can query the remote db server for the port\n */\nexport const REMOTEDB_SERVER_QUERY_PORT = 12523;\n","import {PromiseReadable} from 'promise-readable';\n\nconst NULL_CHAR = '\\0';\n\n/**\n * Field type is a leading byte that indicates what the field is.\n */\nexport enum FieldType {\n  UInt8 = 0x0f,\n  UInt16 = 0x10,\n  UInt32 = 0x11,\n  Binary = 0x14,\n  String = 0x26,\n}\n\n/**\n * The generic interface for all field types\n */\nexport interface BaseField {\n  /**\n   * The raw field data\n   */\n  data: Buffer;\n  /**\n   * Corce the field into a buffer. This differes from reading the data\n   * property in that it will include the field type header.\n   */\n  readonly buffer: Buffer;\n}\n\nexport class BaseField {\n  /**\n   * Declares the type of field this class represents\n   */\n  static type: FieldType;\n\n  /**\n   * The number of bytes to read for this field. If the field is not a fixed size,\n   * set this to a function which will recieve the UInt32 value just after\n   * reading the field type, returning the next number of bytes to read.\n   */\n  static bytesToRead: number | ((reportedLength: number) => number);\n\n  // The constructor property (which is used to access the class from an\n  // instance of it) must be set to the BaseClass object so we can access the\n  // `.type` property.\n  //\n  // @see https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n  //\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  ['constructor']: typeof BaseField;\n}\n\nexport type NumberField<T extends number = number> = BaseField & {\n  /**\n   * The fields number value\n   */\n  value: T;\n};\n\nexport type StringField<T extends string = string> = BaseField & {\n  /**\n   * The fields decoded string value\n   */\n  value: T;\n};\n\nexport type BinaryField = BaseField & {\n  /**\n   * The binary value encapsulated in the field\n   */\n  value: Buffer;\n};\n\nexport type Field = NumberField | StringField | BinaryField;\n\ntype NumberFieldType = FieldType.UInt32 | FieldType.UInt16 | FieldType.UInt8;\n\nconst numberNameMap = Object.fromEntries(\n  Object.entries(FieldType).map(e => [e[1], e[0]])\n);\n\nconst numberBufferInfo = {\n  [FieldType.UInt8]: [1, 'writeUInt8', 'readUInt8'],\n  [FieldType.UInt16]: [2, 'writeUInt16BE', 'readUInt16BE'],\n  [FieldType.UInt32]: [4, 'writeUInt32BE', 'readUInt32BE'],\n} as const;\n\nfunction parseNumber(value: number | Buffer, type: NumberFieldType): [number, Buffer] {\n  const [bytes, writeFn, readFn] = numberBufferInfo[type];\n  const data = Buffer.alloc(bytes);\n\n  if (typeof value === 'number') {\n    data[writeFn](value);\n    return [value, data];\n  }\n\n  return [value[readFn](), value];\n}\n\nfunction makeVariableBuffer(type: FieldType, fieldData: Buffer, lengthHeader?: number) {\n  // Add 4 bytes for length header and 1 byte for type header.\n  const data = Buffer.alloc(fieldData.length + 4 + 1);\n  data.writeUInt8(type);\n  data.writeUInt32BE(lengthHeader ?? fieldData.length, 0x01);\n\n  fieldData.copy(data, 0x05);\n\n  return data;\n}\n\nconst makeNumberField = (type: NumberFieldType) => {\n  const Number = class extends BaseField implements NumberField {\n    static type = type;\n    static bytesToRead = numberBufferInfo[type][0];\n\n    value: number;\n\n    constructor(value: number | Buffer) {\n      super();\n      const [number, data] = parseNumber(value, type);\n      this.data = data;\n      this.value = number;\n    }\n\n    get buffer() {\n      return Buffer.from([type, ...this.data]);\n    }\n  };\n\n  // We use the name property in readField to create helpful error messages\n  Object.defineProperty(Number, 'name', {value: numberNameMap[type]});\n\n  return Number;\n};\n\n/**\n * Field representing a UInt8\n */\nexport const UInt8 = makeNumberField(FieldType.UInt8);\n\n/**\n * Field representing a UInt16\n */\nexport const UInt16 = makeNumberField(FieldType.UInt16);\n\n/**\n * Field representing a UInt32\n */\nexport const UInt32 = makeNumberField(FieldType.UInt32);\n\n/**\n * Field representing a null-terminated big endian UTF-16 string\n */\nexport class String extends BaseField implements StringField {\n  static type = FieldType.String as const;\n\n  // Compute the number of bytes in the string given the length of the string.\n  // A UTF-16 string takes 2 bytes per character.\n  static bytesToRead = (length: number) => length * 2;\n\n  value: string;\n\n  constructor(value: Buffer | string) {\n    super();\n    if (typeof value === 'string') {\n      this.value = value;\n      this.data = Buffer.from(value + NULL_CHAR, 'utf16le').swap16();\n      return;\n    }\n\n    // Slice off the last two bytes to remove the trailing null bytes\n    this.value = Buffer.from(value).swap16().slice(0, -2).toString('utf16le');\n    this.data = value;\n  }\n\n  get buffer() {\n    return makeVariableBuffer(FieldType.String, this.data, this.data.length / 2);\n  }\n}\n\n/**\n * Field representing binary data\n */\nexport class Binary extends BaseField implements BinaryField {\n  static type = FieldType.Binary as const;\n  static bytesToRead = (bytes: number) => bytes;\n\n  value: Buffer;\n\n  constructor(value: Buffer) {\n    super();\n    this.value = this.data = value;\n  }\n\n  get buffer() {\n    return makeVariableBuffer(FieldType.Binary, this.data);\n  }\n}\n\nconst fieldMap = {\n  [FieldType.UInt8]: UInt8,\n  [FieldType.UInt16]: UInt16,\n  [FieldType.UInt32]: UInt32,\n  [FieldType.Binary]: Binary,\n  [FieldType.String]: String,\n} as const;\n\n/**\n * Helper to read from stream.\n *\n * NOTE: I suspect the typescript interface on PromiseReadable may be wrong, as\n * I'm not sure when this would return a string. We'll play it safe for now.\n */\nasync function read(stream: PromiseReadable<any>, bytes: number) {\n  const data = await stream.read(bytes);\n\n  if (data instanceof Buffer) {\n    return data;\n  }\n\n  throw new Error('Expected buffer from stream read');\n}\n\n/**\n * Read a single field from a socket stream.\n */\nexport async function readField<\n  T extends FieldType,\n  F extends InstanceType<(typeof fieldMap)[T]>,\n>(stream: PromiseReadable<any>, expect: T): Promise<F> {\n  const typeData = await read(stream, 1);\n  const Field = fieldMap[typeData[0] as FieldType];\n\n  if (Field.type !== expect) {\n    throw new Error(`Expected ${fieldMap[expect].name} but got ${Field.name}`);\n  }\n\n  let nextByteCount: number;\n\n  if (typeof Field.bytesToRead === 'number') {\n    nextByteCount = Field.bytesToRead;\n  } else {\n    // Read the field length as a UInt32 when we do not know the field length\n    // from the type\n    const lengthData = await read(stream, 4);\n    nextByteCount = Field.bytesToRead(lengthData.readUInt32BE());\n  }\n\n  const data = nextByteCount === 0 ? Buffer.alloc(0) : await read(stream, nextByteCount);\n\n  return new Field(data) as F;\n}\n","import * as Sentry from '@sentry/node';\nimport {Span} from '@sentry/tracing';\nimport {Mutex} from 'async-mutex';\nimport * as ip from 'ip-address';\nimport PromiseSocket from 'promise-socket';\n\nimport {Socket} from 'net';\n\nimport DeviceManager from 'src/devices';\nimport {Device, DeviceID, MediaSlot, TrackType} from 'src/types';\n\nimport {getMessageName, MessageType, Request, Response} from './message/types';\nimport {REMOTEDB_SERVER_QUERY_PORT} from './constants';\nimport {readField, UInt32} from './fields';\nimport {Message} from './message';\nimport {HandlerArgs, HandlerReturn, queryHandlers} from './queries';\n\ntype Await<T> = T extends PromiseLike<infer U> ? U : T;\n\n/**\n * Menu target specifies where a menu should be \"rendered\" This differes based\n * on the request being made.\n */\nexport enum MenuTarget {\n  Main = 0x01,\n}\n\n/**\n * Used to specify where to lookup data when making queries\n */\nexport interface QueryDescriptor {\n  menuTarget: MenuTarget;\n  trackSlot: MediaSlot;\n  trackType: TrackType;\n}\n\n/**\n * Used internally when making queries.\n */\nexport type LookupDescriptor = QueryDescriptor & {\n  targetDevice: Device;\n  hostDevice: Device;\n};\n\n/**\n * Used to specify the query type that is being made\n */\nexport type Query = keyof typeof queryHandlers;\nexport const Query = Request;\n\nconst QueryInverse = Object.fromEntries(Object.entries(Query).map(e => [e[1], e[0]]));\n\n/**\n * Returns a string representation of a remote query\n */\nexport function getQueryName(query: Query) {\n  return QueryInverse[query];\n}\n\n/**\n * Options used to make a remotedb query\n */\ninterface QueryOpts<T extends Query> {\n  queryDescriptor: QueryDescriptor;\n  /**\n   * The query type to make\n   */\n  query: T;\n  /**\n   * Arguments to pass to the query. These are query speciifc\n   */\n  args: HandlerArgs<T>;\n  /**\n   * The sentry span to assicate the query with\n   */\n  span?: Span;\n}\n\n/**\n * Queries the remote device for the port that the remote database server is\n * listening on for requests.\n */\nasync function getRemoteDBServerPort(deviceIp: ip.Address4) {\n  const conn = new PromiseSocket(new Socket());\n  await conn.connect(REMOTEDB_SERVER_QUERY_PORT, deviceIp.address);\n\n  // Magic request packet asking the device to report it's remoteDB port\n  const data = Buffer.from([\n    ...[0x00, 0x00, 0x00, 0x0f],\n    ...Buffer.from('RemoteDBServer', 'ascii'),\n    0x00,\n  ]);\n\n  await conn.write(data);\n  const resp = await conn.read();\n\n  if (typeof resp !== 'object') {\n    throw new Error('Invalid response from remotedb');\n  }\n\n  if (resp.length !== 2) {\n    throw new Error(`Expected 2 bytes, got ${resp.length}`);\n  }\n\n  return resp.readUInt16BE();\n}\n\n/**\n * Manages a connection to a single device\n */\nexport class Connection {\n  #socket: PromiseSocket<Socket>;\n  #txId = 0;\n  #lock = new Mutex();\n\n  device: Device;\n\n  constructor(device: Device, socket: PromiseSocket<Socket>) {\n    this.#socket = socket;\n    this.device = device;\n  }\n\n  async writeMessage(message: Message, span: Span) {\n    const tx = span.startChild({\n      op: 'writeMessage',\n      description: getMessageName(message.type),\n    });\n\n    message.transactionId = ++this.#txId;\n    await this.#socket.write(message.buffer);\n    tx.finish();\n  }\n\n  readMessage<T extends Response>(expect: T, span: Span) {\n    return this.#lock.runExclusive(() => Message.fromStream(this.#socket, expect, span));\n  }\n\n  close() {\n    this.#socket.destroy();\n  }\n}\n\nexport class QueryInterface {\n  #conn: Connection;\n  #hostDevice: Device;\n  #lock: Mutex;\n\n  constructor(conn: Connection, lock: Mutex, hostDevice: Device) {\n    this.#conn = conn;\n    this.#lock = lock;\n    this.#hostDevice = hostDevice;\n  }\n\n  /**\n   * Make a query to the remote database connection.\n   */\n  async query<T extends Query>(opts: QueryOpts<T>): Promise<Await<HandlerReturn<T>>> {\n    const {query, queryDescriptor, args, span} = opts;\n    const conn = this.#conn;\n\n    const queryName = getQueryName(opts.query);\n\n    const tx = span\n      ? span.startChild({op: 'remoteQuery', description: queryName})\n      : Sentry.startTransaction({name: 'remoteQuery', description: queryName});\n\n    const lookupDescriptor: LookupDescriptor = {\n      ...queryDescriptor,\n      hostDevice: this.#hostDevice,\n      targetDevice: this.#conn.device,\n    };\n\n    // TODO: Figure out why typescirpt can't understand our query type discriminate\n    // for args here. The interface for this actual query funciton discrimites just\n    // fine.\n    const anyArgs = args as any;\n\n    const handler = queryHandlers[query];\n\n    const releaseLock = await this.#lock.acquire();\n    const response = await handler({conn, lookupDescriptor, span: tx, args: anyArgs});\n    releaseLock();\n    tx.finish();\n\n    return response as Await<HandlerReturn<T>>;\n  }\n}\n\n/**\n * Service that maintains remote database connections with devices on the network.\n */\nexport default class RemoteDatabase {\n  #hostDevice: Device;\n  #deviceManager: DeviceManager;\n\n  /**\n   * Active device connection map\n   */\n  #connections = new Map<DeviceID, Connection>();\n  /**\n   * Locks for each device when locating the connection\n   */\n  #deviceLocks = new Map<DeviceID, Mutex>();\n\n  constructor(deviceManager: DeviceManager, hostDevice: Device) {\n    this.#deviceManager = deviceManager;\n    this.#hostDevice = hostDevice;\n  }\n\n  /**\n   * Open a connection to the specified device for querying\n   */\n  connectToDevice = async (device: Device) => {\n    const tx = Sentry.startTransaction({name: 'connectRemotedb', data: {device}});\n\n    const {ip} = device;\n\n    const dbPort = await getRemoteDBServerPort(ip);\n\n    const socket = new PromiseSocket(new Socket());\n    await socket.connect(dbPort, ip.address);\n\n    // Send required preamble to open communications with the device\n    const preamble = new UInt32(0x01);\n    await socket.write(preamble.buffer);\n\n    // Read the response. It should be a UInt32 field with the value 0x01.\n    // There is some kind of problem if not.\n    const data = await readField(socket, UInt32.type);\n\n    if (data.value !== 0x01) {\n      throw new Error(`Expected 0x01 during preamble handshake. Got ${data.value}`);\n    }\n\n    // Send introduction message to set context for querying\n    const intro = new Message({\n      transactionId: 0xfffffffe,\n      type: MessageType.Introduce,\n      args: [new UInt32(this.#hostDevice.id)],\n    });\n\n    await socket.write(intro.buffer);\n    const resp = await Message.fromStream(socket, MessageType.Success, tx);\n\n    if (resp.type !== MessageType.Success) {\n      throw new Error(`Failed to introduce self to device ID: ${device.id}`);\n    }\n\n    this.#connections.set(device.id, new Connection(device, socket));\n    tx.finish();\n  };\n\n  /**\n   * Disconnect from the specified device\n   */\n  disconnectFromDevice = async (device: Device) => {\n    const tx = Sentry.startTransaction({name: 'disconnectFromDevice', data: {device}});\n\n    const conn = this.#connections.get(device.id);\n\n    if (conn === undefined) {\n      return;\n    }\n\n    const goodbye = new Message({\n      transactionId: 0xfffffffe,\n      type: MessageType.Disconnect,\n      args: [],\n    });\n\n    await conn.writeMessage(goodbye, tx);\n\n    conn.close();\n    this.#connections.delete(device.id);\n    tx.finish();\n  };\n\n  /**\n   * Gets the remote database query interface for the given device.\n   *\n   * If we have not already established a connection with the specified device,\n   * we will attempt to first connect.\n   *\n   * @returns null if the device does not export a remote database service\n   */\n  async get(deviceId: DeviceID) {\n    const device = this.#deviceManager.devices.get(deviceId);\n    if (device === undefined) {\n      return null;\n    }\n\n    const lock =\n      this.#deviceLocks.get(device.id) ??\n      this.#deviceLocks.set(device.id, new Mutex()).get(device.id)!;\n\n    const releaseLock = await lock.acquire();\n\n    let conn = this.#connections.get(deviceId);\n    if (conn === undefined) {\n      await this.connectToDevice(device);\n    }\n\n    conn = this.#connections.get(deviceId)!;\n    releaseLock();\n\n    // NOTE: We pass the same lock we use for this device to the query\n    // interface to ensure all query interfaces use the same lock.\n\n    return new QueryInterface(conn, lock, this.#hostDevice);\n  }\n}\n","import {Span, SpanStatus} from '@sentry/tracing';\nimport {PromiseReadable} from 'promise-readable';\n\nimport {REMOTEDB_MAGIC} from 'src/remotedb/constants';\nimport {\n  Binary,\n  Field,\n  FieldType,\n  readField,\n  UInt8,\n  UInt16,\n  UInt32,\n} from 'src/remotedb/fields';\nimport {responseTransform} from 'src/remotedb/message/response';\nimport {getMessageName, MessageType, Response} from 'src/remotedb/message/types';\n\n/**\n * Argument types are used in argument list fields. This is essentially\n * duplicating the field type, but has different values for whatever reason.\n *\n * There do not appear to be argument types for UInt8 and UInt16. At least, no\n * messages include these field types as arguments as far as we know.\n */\nenum ArgumentType {\n  String = 0x02,\n  Binary = 0x03,\n  UInt32 = 0x06,\n}\n\n/**\n * The message argument list always containts 12 slots\n */\nconst ARG_COUNT = 12;\n\nconst fieldArgsMap = {\n  [FieldType.UInt32]: ArgumentType.UInt32,\n  [FieldType.String]: ArgumentType.String,\n  [FieldType.Binary]: ArgumentType.Binary,\n\n  // The following two field types do not have associated argument types (see\n  // the note in ArgumentType), but we declare them here to make typescript happy\n  // when mapping these values over.\n  [FieldType.UInt8]: 0x00,\n  [FieldType.UInt16]: 0x00,\n};\n\nconst argsFieldMap = {\n  [ArgumentType.UInt32]: FieldType.UInt32,\n  [ArgumentType.String]: FieldType.String,\n  [ArgumentType.Binary]: FieldType.Binary,\n};\n\ninterface Options<T extends MessageType> {\n  transactionId?: number;\n  type: T;\n  args: Field[];\n}\n\ntype ResponseType<T> = T extends Response ? T : never;\ntype Data<T> = ReturnType<(typeof responseTransform)[ResponseType<T>]>;\n\n/**\n * Representation of a set of fields sequenced into a known message format.\n */\nexport class Message<T extends MessageType = MessageType> {\n  /**\n   * Read a single mesasge via a readable stream\n   */\n  static async fromStream<T extends Response>(\n    stream: PromiseReadable<any>,\n    expect: T,\n    span: Span\n  ) {\n    const tx = span.startChild({\n      op: 'readFromStream',\n      description: getMessageName(expect),\n    });\n\n    // 01. Read magic bytes\n    const magicHeader = await readField(stream, FieldType.UInt32);\n\n    if (magicHeader.value !== REMOTEDB_MAGIC) {\n      throw new Error('Did not recieve expected magic value. Corrupt message');\n    }\n\n    // 02. Read transaction ID\n    const txId = await readField(stream, FieldType.UInt32);\n\n    // 03. Read message type\n    const messageType = await readField(stream, FieldType.UInt16);\n\n    // 04. Read argument count\n    const argCount = await readField(stream, FieldType.UInt8);\n\n    // 05. Read argument list\n    const argList = await readField(stream, FieldType.Binary);\n\n    // 06. Read all argument fields in\n    const args: Field[] = new Array(argCount.value);\n\n    for (let i = 0; i < argCount.value; ++i) {\n      // XXX: There is a small quirk in a few message response types that send\n      //      binary data, but if the binary data is empty the field will not\n      //      be sent.\n      if (argList.value[i] === ArgumentType.Binary && args[i - 1]?.value === 0) {\n        args[i] = new Binary(Buffer.alloc(0));\n        continue;\n      }\n\n      args[i] = await readField(stream, argsFieldMap[argList.value[i] as ArgumentType]);\n    }\n\n    if (messageType.value !== expect) {\n      const expected = expect.toString(16);\n      const actual = messageType.value.toString(16);\n\n      tx.setStatus(SpanStatus.FailedPrecondition);\n      tx.finish();\n\n      throw new Error(`Expected message type 0x${expected}, got 0x${actual}`);\n    }\n\n    tx.finish();\n\n    return new Message({\n      transactionId: txId.value,\n      type: messageType.value as T,\n      args,\n    });\n  }\n\n  /**\n   * The transaction ID is used to associate responses to their requests.\n   */\n  transactionId?: number;\n\n  readonly type: T;\n  readonly args: Field[];\n\n  constructor({transactionId, type, args}: Options<T>) {\n    this.transactionId = transactionId;\n    this.type = type;\n    this.args = args;\n  }\n\n  /**\n   * The byte serialization of the message\n   */\n  get buffer() {\n    // Determine the argument list from the list of fields\n    const argList = Buffer.alloc(ARG_COUNT, 0x00);\n    argList.set(this.args.map(arg => fieldArgsMap[arg.constructor.type]));\n\n    // XXX: Following the parsing quirk for messages that contain binary data\n    //      but are _empty_, we check for binary fields with UInt32 fields\n    //      before with the value of 0 (indicating \"an empty binary field\").\n    const args = this.args.reduce<Field[]>((args, arg, i) => {\n      const prevArg = this.args[i - 1];\n\n      const isEmptyBuffer =\n        arg.constructor.type === FieldType.Binary &&\n        i !== 0 &&\n        prevArg.constructor.type === FieldType.UInt32 &&\n        prevArg.value === 0;\n\n      return isEmptyBuffer ? args : [...args, arg];\n    }, []);\n\n    const fields = [\n      new UInt32(REMOTEDB_MAGIC),\n      new UInt32(this.transactionId ?? 0),\n      new UInt16(this.type),\n      new UInt8(this.args.length),\n      new Binary(argList),\n      ...args,\n    ];\n\n    return Buffer.concat(fields.map(f => f.buffer));\n  }\n\n  /**\n   * The JS representation of the message.\n   *\n   * Currently only supports representing response messages.\n   */\n  get data(): Data<T> {\n    const type = this.type as ResponseType<T>;\n\n    if (!Object.values(Response).includes(type)) {\n      throw new Error('Representation of non-responses is not currently supported');\n    }\n\n    return responseTransform[type](this.args) as Data<T>;\n  }\n}\n","import * as Sentry from '@sentry/node';\n\nimport {Field, NumberField, StringField} from 'src/remotedb/fields';\n\n/**\n * Item types associated to the MenuItem message type.\n */\nexport enum ItemType {\n  Path = 0x0000,\n  Folder = 0x0001,\n  AlbumTitle = 0x0002,\n  Disc = 0x0003,\n  TrackTitle = 0x0004,\n  Genre = 0x0006,\n  Artist = 0x0007,\n  Playlist = 0x0008,\n  Rating = 0x000a,\n  Duration = 0x000b,\n  Tempo = 0x000d,\n  Label = 0x000e,\n  Key = 0x000f,\n  BitRate = 0x0010,\n  Year = 0x0011,\n  Comment = 0x0023,\n  HistoryPlaylist = 0x0024,\n  OrigianlArtist = 0x0028,\n  Remixer = 0x0029,\n  DateAdded = 0x002e,\n  Unknown01 = 0x002f,\n  Unknown02 = 0x002a,\n\n  ColorNone = 0x0013,\n  ColorPink = 0x0014,\n  ColorRed = 0x0015,\n  ColorOrange = 0x0016,\n  ColorYellow = 0x0017,\n  ColorGreen = 0x0018,\n  ColorAqua = 0x0019,\n  ColorBlue = 0x001a,\n  ColorPurple = 0x001b,\n\n  MenuGenre = 0x0080,\n  MenuArtist = 0x0081,\n  MenuAlbum = 0x0082,\n  MenuTrack = 0x0083,\n  MenuPlaylist = 0x0084,\n  MenuBPM = 0x0085,\n  MenuRating = 0x0086,\n  MenuYear = 0x0087,\n  MenuRemixer = 0x0088,\n  MenuLabel = 0x0089,\n  MenuOriginal = 0x008a,\n  MenuKey = 0x008b,\n  MenuColor = 0x008e,\n  MenuFolder = 0x0090,\n  MenuSearch = 0x0091,\n  MenuTime = 0x0092,\n  MenuBit = 0x0093,\n  MenuFilename = 0x0094,\n  MenuHistory = 0x0095,\n  MenuAll = 0x00a0,\n\n  TrackTitleAlbum = 0x0204,\n  TrackTitleGenre = 0x0604,\n  TrackTitleArtist = 0x0704,\n  TrackTitleRating = 0x0a04,\n  TrackTitleTime = 0x0b04,\n  TrackTitleBPM = 0x0d04,\n  TrackTitleLabel = 0x0e04,\n  TrackTitleKey = 0x0f04,\n  TrackTitleBitRate = 0x1004,\n  TrackTitleColor = 0x1a04,\n  TrackTitleComment = 0x2304,\n  TrackTitleOriginalArtist = 0x2804,\n  TrackTitleRemixer = 0x2904,\n  TrackTitleDJPlayCount = 0x2a04,\n  MenuTrackTitleDateAdded = 0x2e04,\n}\n\n/**\n * All items have 12 arguments of these types\n */\ntype ItemArgs = [\n  NumberField, // Parent ID, such as an artist for a track item.\n  NumberField, // Main ID, such as rekordbox for a track item.\n  NumberField, // Length in bytes of Label 1.\n  StringField, // Label 1 main text\n  NumberField, // Length in bytes of Label 2.\n  StringField, // Label 2 (secondary text, e.g. artist name for playlist entries)\n  NumberField<ItemType>,\n  NumberField, // Some type of flags\n  NumberField, // Only holds artwork ID?\n  NumberField,\n  NumberField,\n  NumberField,\n];\n\n/**\n * Convert a message item argument lists to a structured intermediate object\n * for more clear access.\n */\nconst makeItemData = (args: ItemArgs) => ({\n  parentId: args[0].value,\n  mainId: args[1].value,\n  label1: args[3].value,\n  label2: args[5].value,\n  type: args[6].value,\n  artworkId: args[8].value,\n});\n\ntype ItemData = ReturnType<typeof makeItemData>;\n\n/**\n * Generic transformer for items that include just an id and label\n */\nconst mapIdName = (a: ItemData) => ({\n  id: a.mainId,\n  name: a.label1,\n});\n\n/**\n * Maps item types to structured objects\n */\nconst transformItem = {\n  [ItemType.Path]: (a: ItemData) => ({path: a.label1}),\n  [ItemType.TrackTitle]: (a: ItemData) => ({\n    id: a.mainId,\n    title: a.label1,\n    artworkId: a.artworkId,\n  }),\n  [ItemType.AlbumTitle]: mapIdName,\n  [ItemType.Artist]: mapIdName,\n  [ItemType.Genre]: mapIdName,\n  [ItemType.Label]: mapIdName,\n  [ItemType.Key]: mapIdName,\n  [ItemType.OrigianlArtist]: mapIdName,\n  [ItemType.Remixer]: mapIdName,\n  [ItemType.BitRate]: (a: ItemData) => ({bitrate: a.mainId}),\n  [ItemType.Comment]: (a: ItemData) => ({comment: a.label1}),\n  [ItemType.Year]: (a: ItemData) => ({year: Number(a.label1)}),\n  [ItemType.Rating]: (a: ItemData) => ({rating: a.mainId}),\n  [ItemType.Tempo]: (a: ItemData) => ({bpm: a.mainId / 100}),\n  [ItemType.Duration]: (a: ItemData) => ({duration: a.mainId}),\n  [ItemType.Unknown01]: (_: ItemData) => null,\n  [ItemType.Unknown02]: (_: ItemData) => null,\n\n  [ItemType.ColorNone]: mapIdName,\n  [ItemType.ColorPink]: mapIdName,\n  [ItemType.ColorRed]: mapIdName,\n  [ItemType.ColorOrange]: mapIdName,\n  [ItemType.ColorYellow]: mapIdName,\n  [ItemType.ColorGreen]: mapIdName,\n  [ItemType.ColorAqua]: mapIdName,\n  [ItemType.ColorBlue]: mapIdName,\n  [ItemType.ColorPurple]: mapIdName,\n\n  [ItemType.Folder]: mapIdName,\n  [ItemType.Playlist]: mapIdName,\n\n  // TODO: All of these item types are missing\n  [ItemType.Disc]: (a: ItemData) => a,\n\n  [ItemType.HistoryPlaylist]: (a: ItemData) => a,\n  [ItemType.DateAdded]: (a: ItemData) => a,\n  [ItemType.MenuGenre]: (a: ItemData) => a,\n  [ItemType.MenuArtist]: (a: ItemData) => a,\n  [ItemType.MenuAlbum]: (a: ItemData) => a,\n  [ItemType.MenuTrack]: (a: ItemData) => a,\n  [ItemType.MenuPlaylist]: (a: ItemData) => a,\n  [ItemType.MenuBPM]: (a: ItemData) => a,\n  [ItemType.MenuRating]: (a: ItemData) => a,\n  [ItemType.MenuYear]: (a: ItemData) => a,\n  [ItemType.MenuRemixer]: (a: ItemData) => a,\n  [ItemType.MenuLabel]: (a: ItemData) => a,\n  [ItemType.MenuOriginal]: (a: ItemData) => a,\n  [ItemType.MenuKey]: (a: ItemData) => a,\n  [ItemType.MenuColor]: (a: ItemData) => a,\n  [ItemType.MenuFolder]: (a: ItemData) => a,\n  [ItemType.MenuSearch]: (a: ItemData) => a,\n  [ItemType.MenuTime]: (a: ItemData) => a,\n  [ItemType.MenuBit]: (a: ItemData) => a,\n  [ItemType.MenuFilename]: (a: ItemData) => a,\n  [ItemType.MenuHistory]: (a: ItemData) => a,\n  [ItemType.MenuAll]: (a: ItemData) => a,\n  [ItemType.TrackTitleAlbum]: (a: ItemData) => a,\n  [ItemType.TrackTitleGenre]: (a: ItemData) => a,\n  [ItemType.TrackTitleArtist]: (a: ItemData) => a,\n  [ItemType.TrackTitleRating]: (a: ItemData) => a,\n  [ItemType.TrackTitleTime]: (a: ItemData) => a,\n  [ItemType.TrackTitleBPM]: (a: ItemData) => a,\n  [ItemType.TrackTitleLabel]: (a: ItemData) => a,\n  [ItemType.TrackTitleKey]: (a: ItemData) => a,\n  [ItemType.TrackTitleBitRate]: (a: ItemData) => a,\n  [ItemType.TrackTitleColor]: (a: ItemData) => a,\n  [ItemType.TrackTitleComment]: (a: ItemData) => a,\n  [ItemType.TrackTitleOriginalArtist]: (a: ItemData) => a,\n  [ItemType.TrackTitleRemixer]: (a: ItemData) => a,\n  [ItemType.TrackTitleDJPlayCount]: (a: ItemData) => a,\n  [ItemType.MenuTrackTitleDateAdded]: (a: ItemData) => a,\n};\n\n/**\n * Represents a generic Item, specialized to a specific item by providing a\n * ItemType to the template.\n */\nexport type Item<T extends ItemType> = ReturnType<(typeof transformItem)[T]> & {type: T};\n\n/**\n * Maps ItemTypes to Items\n */\nexport type Items = {\n  [T in keyof typeof transformItem]: Item<T>;\n};\n\n/**\n * Translate a list of fields for an item response into a structure object,\n * making items more clear to work with.\n */\nexport const fieldsToItem = (args: Field[]) => {\n  const itemData = makeItemData(args as ItemArgs);\n  const {type} = itemData;\n\n  let transformer = transformItem[type];\n\n  // Typescript gives us safety, but it is possible there is an itemType we're\n  // not aware of yet.\n  if (transformer === undefined) {\n    transformer = () => null;\n\n    Sentry.captureMessage(\n      `No item transformer registered for item type ${type}`,\n      Sentry.Severity.Error\n    );\n  }\n\n  return {...transformer(itemData), type} as Items[ItemType];\n};\n","import {makeCueLoopEntry} from 'src/localdb/utils';\nimport {Field} from 'src/remotedb/fields';\nimport {fieldsToItem} from 'src/remotedb/message/item';\nimport {Response} from 'src/remotedb/message/types';\nimport {\n  BeatGrid,\n  CueAndLoop,\n  HotcueButton,\n  WaveformDetailed,\n  WaveformHD,\n  WaveformPreview,\n} from 'src/types';\nimport {\n  convertWaveformHDData,\n  extractBitMask,\n  extractColor,\n  makeOffsetArray,\n} from 'src/utils/converters';\n\n/**\n * Generic null converter, for responses with no data.\n */\nconst nullConverter = (_args: Field[]) => null;\n\n/**\n * Converts setup success messages, which primarily includes the number of\n * items available upon the next request.\n */\nconst convertSuccess = (args: Field[]) => ({\n  itemsAvailable: args[1].value as number,\n});\n\n/**\n * Converts artwork to a buffer. Will be mempty for empty artwork\n */\nconst convertArtwork = (args: Field[]) => args[3].value as Buffer;\n\n/**\n * Converts the beat grid binary response to a BeatGrid array.\n */\nconst convertBeatGrid = (args: Field[]): BeatGrid => {\n  const BEATGRID_START = 0x14;\n  const data = (args[3].value as Buffer).slice(BEATGRID_START);\n\n  type Count = BeatGrid[number]['count'];\n\n  return makeOffsetArray(data.length, 0x10).map(byteOffset => ({\n    offset: data.readUInt32LE(byteOffset + 4),\n    bpm: data.readUInt16LE(byteOffset + 2) / 100,\n    count: data[byteOffset] as Count,\n  }));\n};\n\n/**\n * Converts preview waveform data\n */\nconst convertWaveformPreview = (args: Field[]): WaveformPreview => {\n  const data = args[3].value as Buffer;\n\n  // TODO: The last 100 bytes in the data array is a tiny waveform preview\n  const PREVIEW_DATA_LEN = 800;\n\n  return makeOffsetArray(PREVIEW_DATA_LEN, 0x02).map(byteOffset => ({\n    height: data[byteOffset],\n    whiteness: data[byteOffset + 1] / 7,\n  }));\n};\n\n/**\n * Converts detailed waveform data.\n */\nconst convertWaveformDetailed = (args: Field[]): WaveformDetailed => {\n  const data = args[3].value as Buffer;\n\n  // Every byte reperesents one segment of the waveform, and there are 150\n  // segments per second of audio. (These seem to correspond to 'half frames'\n  // following the seconds in the player display.) Each byte encodes both a\n  // color and height.\n  //\n  // |  7  6  5  |  4  3  2  1  0 |\n  // [ whiteness |     height     ]\n  const whitenessMask = 0b11100000; // prettier-ignore\n  const heightMask    = 0b00011111; // prettier-ignore\n\n  return Array.from(data).map(b => ({\n    height: extractBitMask(b, heightMask),\n    whiteness: extractColor(b, whitenessMask),\n  }));\n};\n\n/**\n * Converts HD waveform data.\n */\nconst convertWaveformHD = (args: Field[]): WaveformHD => {\n  // TODO: Verify this 0x34 offset is correct\n  const WAVEFORM_START = 0x34;\n  const data = (args[3].value as Buffer).slice(WAVEFORM_START);\n\n  // TODO: This response is also used for the HD waveform previews, however\n  // those have a much more complex data structure.\n\n  return convertWaveformHDData(data);\n};\n\n/**\n * Converts old-style cue / loop / hotcue / hotloop data.\n */\nconst convertCueAndLoops = (args: Field[]): CueAndLoop[] => {\n  const data = args[3].value as Buffer;\n\n  return makeOffsetArray(data.length, 0x24)\n    .map(byteOffset => {\n      const entry = data.slice(byteOffset, byteOffset + 0x24);\n\n      const isLoop = !!entry[0];\n      const isCue = !!entry[1];\n      const button = entry[2] === 0 ? false : (entry[2] as HotcueButton);\n\n      const offsetInFrames = entry.readUInt32LE(0x0c);\n      const lengthInFrames = entry.readUInt32LE(0x10) - offsetInFrames;\n\n      // NOTE: The offset and length are reported as 1/150th second increments.\n      //       We convert these to milliseconds here.\n      const offset = (offsetInFrames / 150) * 1000;\n      const length = (lengthInFrames / 150) * 1000;\n\n      return makeCueLoopEntry(isCue, isLoop, offset, length, button);\n    })\n    .filter((c): c is CueAndLoop => c !== null);\n};\n\n/**\n * Converts new-style cue / loop / hotcue / hotloop data, including labels and\n * colors.\n */\nconst convertAdvCueAndLoops = (args: Field[]): CueAndLoop[] => {\n  const data = args[3].value as Buffer;\n  const entries = [];\n\n  for (let offset = 0; offset < data.length; ) {\n    const length = data.readUInt32LE(offset);\n    entries.push(data.slice(offset, offset + length));\n    offset += length;\n  }\n\n  return entries\n    .map(entry => {\n      // Deleted cue point\n      if (entry[6] === 0x00) {\n        return null;\n      }\n\n      // The layout here is minorly different from the basic cue and loops,\n      // so we unfortunately cannot reuse that logic.\n      const button = entry[4] === 0 ? false : (entry[4] as HotcueButton);\n      const isCue = entry[6] === 0x01;\n      const isLoop = entry[6] === 0x02;\n\n      const offsetInFrames = entry.readUInt32LE(0x0c);\n      const lengthInFrames = entry.readUInt32LE(0x10) - offsetInFrames;\n\n      // NOTE: The offset and length are reported as 1/150th second increments.\n      //       We convert these to milliseconds here.\n      const offset = (offsetInFrames / 150) * 1000;\n      const length = (lengthInFrames / 150) * 1000;\n\n      const basicEntry = makeCueLoopEntry(isCue, isLoop, offset, length, button);\n\n      // It seems the label may not always be included, if the entry is only 0x38\n      // bytes long, exclude color and comment\n      if (entry.length === 0x38) {\n        return basicEntry;\n      }\n\n      const labelByteLength = entry.readUInt16LE(0x48);\n      const label = entry\n        .slice(0x4a, 0x4a + labelByteLength)\n        .slice(0, -2)\n        .toString('utf16le');\n\n      const color = entry[0x4a + labelByteLength + 0x04];\n\n      return {...basicEntry, color, label};\n    })\n    .filter((c): c is CueAndLoop => c !== null);\n};\n\nexport const responseTransform = {\n  [Response.Success]: convertSuccess,\n  [Response.Error]: nullConverter,\n  [Response.MenuHeader]: nullConverter,\n  [Response.MenuFooter]: nullConverter,\n\n  [Response.MenuItem]: fieldsToItem,\n  [Response.Artwork]: convertArtwork,\n  [Response.BeatGrid]: convertBeatGrid,\n  [Response.CueAndLoop]: convertCueAndLoops,\n  [Response.WaveformPreview]: convertWaveformPreview,\n  [Response.WaveformDetailed]: convertWaveformDetailed,\n  [Response.WaveformHD]: convertWaveformHD,\n  [Response.AdvCueAndLoops]: convertAdvCueAndLoops,\n} as const;\n","/**\n * Used for control messages with the remote database\n */\nexport enum ControlRequest {\n  Introduce = 0x0000,\n  Disconnect = 0x0100,\n  RenderMenu = 0x3000,\n}\n\n/**\n * Used to setup renders for specific Menus\n */\nexport enum MenuRequest {\n  MenuRoot = 0x1000,\n  MenuGenre = 0x1001,\n  MenuArtist = 0x1002,\n  MenuAlbum = 0x1003,\n  MenuTrack = 0x1004,\n  MenuBPM = 0x1006,\n  MenuRating = 0x1007,\n  MenuYear = 0x1008,\n  MenuLabel = 0x100a,\n  MenuColor = 0x100d,\n  MenuTime = 0x1010,\n  MenuBitrate = 0x1011,\n  MenuHistory = 0x1012,\n  MenuFilename = 0x1013,\n  MenuKey = 0x1014,\n  MenuOriginalArtist = 0x1302,\n  MenuRemixer = 0x1602,\n  MenuPlaylist = 0x1105,\n  MenuArtistsOfGenre = 0x1101,\n  MenuAlbumsOfArtist = 0x1102,\n  MenuTracksOfAlbum = 0x1103,\n  MenuTracksOfRating = 0x1107,\n  MenuYearsOfDecade = 0x1108,\n  MenuArtistsOfLabel = 0x110a,\n  MenuTracksOfColor = 0x110d,\n  MenuTracksOfTime = 0x1110,\n  MenuTracksOfHistory = 0x1112,\n  MenuDistancesOfKey = 0x1114,\n  MenuAlbumsOfOriginalArtist = 0x1402,\n  MenuAlbumsOfRemixer = 0x1702,\n  MenuAlbumsOfGenreAndArtist = 0x1201,\n  MenuTracksOfArtistAndAlbum = 0x1202,\n  MenuTracksOfBPMPercentRange = 0x1206,\n  MenuTracksOfDecadeAndYear = 0x1208,\n  MenuAlbumsOfLabelAndArtist = 0x120a,\n  MenuTracksNearKey = 0x1214,\n  MenuTracksOfOriginalArtistAndAlbum = 0x1502,\n  MenuTracksOfRemixerAndAlbum = 0x1802,\n  MenuTracksOfGenreArtistAndAlbum = 0x1301,\n  MenuTracksOfLabelArtistAndAlbum = 0x130a,\n  MenuSearch = 0x1300,\n  MenuFolder = 0x2006,\n}\n\n/**\n * Request message types used to obtain specfiic track information\n */\nexport enum DataRequest {\n  GetMetadata = 0x2002,\n  GetArtwork = 0x2003,\n  GetWaveformPreview = 0x2004,\n  GetTrackInfo = 0x2102,\n  GetGenericMetadata = 0x2202,\n  GetCueAndLoops = 0x2104,\n  GetBeatGrid = 0x2204,\n  GetWaveformDetailed = 0x2904,\n  GetAdvCueAndLoops = 0x2b04,\n  GetWaveformHD = 0x2c04,\n}\n\n/**\n * Response message types for messages sent back by the server.\n */\nexport enum Response {\n  Success = 0x4000,\n  Error = 0x4003,\n  Artwork = 0x4002,\n  MenuItem = 0x4101,\n  MenuHeader = 0x4001,\n  MenuFooter = 0x4201,\n  BeatGrid = 0x4602,\n  CueAndLoop = 0x4702,\n  WaveformPreview = 0x4402,\n  WaveformDetailed = 0x4a02,\n  AdvCueAndLoops = 0x4e02,\n  WaveformHD = 0x4f02,\n}\n\n/**\n * Request message types, only sent to the device.\n */\nexport type Request = ControlRequest | MenuRequest | DataRequest;\n\nexport const Request = {\n  ...ControlRequest,\n  ...MenuRequest,\n  ...DataRequest,\n} as const;\n\n/**\n * All Known message types. These are used for both request and response messages.\n */\nexport type MessageType = ControlRequest | MenuRequest | DataRequest | Response;\n\nexport const MessageType = {\n  ...ControlRequest,\n  ...MenuRequest,\n  ...DataRequest,\n  ...Response,\n} as const;\n\nconst MessageTypeInverse = Object.fromEntries(\n  Object.entries(MessageType).map(e => [e[1], e[0]])\n);\n\n/**\n * Returns a string representation of a message type\n */\nexport function getMessageName(type: MessageType) {\n  return MessageTypeInverse[type];\n}\n","import {Span} from '@sentry/tracing';\n\nimport * as entities from 'src/entities';\n\nimport {Item, Items, ItemType} from './message/item';\nimport {Request, Response} from './message/types';\nimport {Binary, UInt32} from './fields';\nimport {Message} from './message';\nimport {fieldFromDescriptor, findColor, renderItems} from './utils';\nimport {Connection, LookupDescriptor, Query} from '.';\n\n/**\n * This module contains logic for each type of query to understand what\n * arguments are required, and how to transform the resulting Items into\n * something useful.\n */\n\ninterface HandlerOpts<A extends Record<string, unknown> = Record<string, unknown>> {\n  conn: Connection;\n  lookupDescriptor: LookupDescriptor;\n  span: Span;\n  args: A;\n}\n\n// Track lookups are so common that we specify an alias specifically for track\n// lookup query options.\n\ntype TrackQueryOpts = HandlerOpts<{\n  /**\n   * The ID of the track to query for\n   */\n  trackId: number;\n}>;\n\n/**\n * Lookup track metadata from rekordbox and coerce it into a Track entity\n */\nasync function getMetadata(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetMetadata,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const resp = await conn.readMessage(Response.Success, span);\n\n  // We'll get back these specific items when rendering out the items\n  //\n  // NOTE: We actually also get back a color, but we'll find that one later,\n  // since each color is it's own item type.\n  type MetadataItems =\n    | ItemType.AlbumTitle\n    | ItemType.TrackTitle\n    | ItemType.Genre\n    | ItemType.Artist\n    | ItemType.Rating\n    | ItemType.Duration\n    | ItemType.Tempo\n    | ItemType.Label\n    | ItemType.Key\n    | ItemType.Comment\n    | ItemType.BitRate\n    | ItemType.Remixer\n    | ItemType.Year\n    | ItemType.OrigianlArtist;\n\n  const items = renderItems<MetadataItems>(\n    conn,\n    lookupDescriptor,\n    resp.data.itemsAvailable,\n    span\n  );\n\n  // NOTE: We do a bit of any-ing here to help typescript understand we're\n  // discriminating the type by our object key\n  const trackItems: Pick<Items, MetadataItems> = {} as any;\n  for await (const item of items) {\n    trackItems[item.type] = item as any;\n  }\n\n  // Translate our trackItems into a (partial) Track entity.\n  const track: entities.Track = {\n    id: trackItems[ItemType.TrackTitle].id,\n    title: trackItems[ItemType.TrackTitle].title,\n    duration: trackItems[ItemType.Duration].duration,\n    tempo: trackItems[ItemType.Tempo].bpm,\n    comment: trackItems[ItemType.Comment].comment,\n    rating: trackItems[ItemType.Rating].rating,\n    year: trackItems?.[ItemType.Year]?.year,\n    bitrate: trackItems?.[ItemType.BitRate]?.bitrate,\n\n    artwork: {id: trackItems[ItemType.TrackTitle].artworkId},\n    album: trackItems[ItemType.AlbumTitle],\n    artist: trackItems[ItemType.Artist],\n    genre: trackItems[ItemType.Genre],\n    key: trackItems[ItemType.Key],\n    color: findColor(Object.values(trackItems))!,\n    label: trackItems[ItemType.Label] ?? null,\n    remixer: trackItems?.[ItemType.Remixer] ?? null,\n    originalArtist: trackItems?.[ItemType.OrigianlArtist] ?? null,\n    composer: null,\n\n    fileName: '',\n    filePath: '',\n\n    beatGrid: null,\n    cueAndLoops: null,\n    waveformHd: null,\n  };\n\n  return track;\n}\n\n/**\n * Lookup generic metadata for an unanalyzed track\n */\nasync function getGenericMetadata(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetGenericMetadata,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const resp = await conn.readMessage(Response.Success, span);\n\n  // NOTE: We actually also get back a color, but we'll find that one later,\n  // since each color is it's own item type.\n  type GenericMetadtaItems =\n    | ItemType.AlbumTitle\n    | ItemType.TrackTitle\n    | ItemType.Genre\n    | ItemType.Artist\n    | ItemType.Rating\n    | ItemType.Duration\n    | ItemType.Tempo\n    | ItemType.BitRate\n    | ItemType.Comment;\n\n  const items = renderItems<GenericMetadtaItems>(\n    conn,\n    lookupDescriptor,\n    resp.data.itemsAvailable,\n    span\n  );\n\n  // NOTE: We do a bit of any-ing here to help typescript understand we're\n  // discriminating the type by our object key\n  const fileItems: Pick<Items, GenericMetadtaItems> = {} as any;\n  for await (const item of items) {\n    fileItems[item.type] = item as any;\n  }\n\n  // Translate our fileItems into a (partial) Track entity.\n  const track: entities.Track = {\n    id: fileItems[ItemType.TrackTitle].id,\n    title: fileItems[ItemType.TrackTitle].title,\n    duration: fileItems[ItemType.Duration].duration,\n    tempo: fileItems[ItemType.Tempo].bpm,\n    comment: fileItems[ItemType.Comment].comment,\n    rating: fileItems[ItemType.Rating].rating,\n    bitrate: fileItems[ItemType.BitRate].bitrate,\n\n    artwork: {id: fileItems[ItemType.TrackTitle].artworkId},\n    album: fileItems?.[ItemType.AlbumTitle],\n    artist: fileItems[ItemType.Artist],\n    genre: fileItems[ItemType.Genre],\n    color: findColor(Object.values(fileItems))!,\n\n    fileName: '',\n    filePath: '',\n\n    key: null,\n    label: null,\n    remixer: null,\n    originalArtist: null,\n    composer: null,\n\n    beatGrid: null,\n    cueAndLoops: null,\n    waveformHd: null,\n  };\n\n  return track;\n}\n\n/**\n * Lookup the artwork image given the artworkId obtained from a track\n */\nasync function getArtwork(opts: HandlerOpts<{artworkId: number}>) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {artworkId} = args;\n\n  const request = new Message({\n    type: Request.GetArtwork,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(artworkId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const art = await conn.readMessage(Response.Artwork, span);\n\n  return art.data;\n}\n\n/**\n * Lookup the beatgrid for the specified trackId\n */\nasync function getBeatgrid(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetBeatGrid,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const grid = await conn.readMessage(Response.BeatGrid, span);\n\n  return grid.data;\n}\n\n/**\n * Lookup the waveform preview for the specified trackId\n */\nasync function getWaveformPreview(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetWaveformPreview,\n    args: [\n      fieldFromDescriptor(lookupDescriptor),\n      new UInt32(0),\n      new UInt32(trackId),\n      new UInt32(0),\n      new Binary(Buffer.alloc(0)),\n    ],\n  });\n\n  await conn.writeMessage(request, span);\n  const waveformPreview = await conn.readMessage(Response.WaveformPreview, span);\n\n  return waveformPreview.data;\n}\n\n/**\n * Lookup the detailed waveform for the specified trackId\n */\nasync function getWaveformDetailed(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetWaveformDetailed,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId), new UInt32(0)],\n  });\n\n  await conn.writeMessage(request, span);\n  const waveformDetailed = await conn.readMessage(Response.WaveformDetailed, span);\n\n  return waveformDetailed.data;\n}\n\n/**\n * Lookup the HD (nexus2) waveform for the specified trackId\n */\nasync function getWaveformHD(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetWaveformHD,\n    args: [\n      fieldFromDescriptor(lookupDescriptor),\n      new UInt32(trackId),\n      new UInt32(Buffer.from('PWV5').readUInt32LE()),\n      new UInt32(Buffer.from('EXT\\0').readUInt32LE()),\n    ],\n  });\n\n  await conn.writeMessage(request, span);\n  const waveformHD = await conn.readMessage(Response.WaveformHD, span);\n\n  return waveformHD.data;\n}\n\n/**\n * Lookup the [hot]cue points and [hot]loops for a track\n */\nasync function getCueAndLoops(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetCueAndLoops,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const cueAndLoops = await conn.readMessage(Response.CueAndLoop, span);\n\n  return cueAndLoops.data;\n}\n\n/**\n * Lookup the \"advanced\" (nexus2) [hot]cue points and [hot]loops for a track\n */\nasync function getCueAndLoopsAdv(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetAdvCueAndLoops,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId), new UInt32(0)],\n  });\n\n  await conn.writeMessage(request, span);\n  const advCueAndLoops = await conn.readMessage(Response.AdvCueAndLoops, span);\n\n  return advCueAndLoops.data;\n}\n\n/**\n * Lookup the track information, currently just returns the track path\n */\nasync function getTrackInfo(opts: TrackQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n  const {trackId} = args;\n\n  const request = new Message({\n    type: Request.GetTrackInfo,\n    args: [fieldFromDescriptor(lookupDescriptor), new UInt32(trackId)],\n  });\n\n  await conn.writeMessage(request, span);\n  const resp = await conn.readMessage(Response.Success, span);\n\n  type TrackInfoItems =\n    | ItemType.TrackTitle\n    | ItemType.Path\n    | ItemType.Duration\n    | ItemType.Tempo\n    | ItemType.Comment\n    | ItemType.Unknown01;\n\n  const items = renderItems<TrackInfoItems>(\n    conn,\n    lookupDescriptor,\n    resp.data.itemsAvailable,\n    span\n  );\n\n  const infoItems: Pick<Items, TrackInfoItems> = {} as any;\n  for await (const item of items) {\n    infoItems[item.type] = item as any;\n  }\n\n  return infoItems[ItemType.Path].path;\n}\n\ntype PlaylistQueryOpts = HandlerOpts<{\n  /**\n   * The ID of the playlist to query for. May be left blank to query the root\n   * playlist folder.\n   */\n  id?: number;\n  /**\n   * When querying for a playlist folder this must be true.\n   */\n  isFolderRequest: boolean;\n}>;\n\n/**\n * Lookup playlist entries\n */\nasync function getPlaylist(opts: PlaylistQueryOpts) {\n  const {conn, lookupDescriptor, span, args} = opts;\n\n  // XXX: The or operator is correct here to coerece `0` into null to keep a\n  // consistent representation of parentId.\n  const parentId = args.id || null;\n\n  // TODO: Maybe sort could become a parameter\n  const sort = new UInt32(0);\n  const id = new UInt32(parentId ?? 0);\n  const isFolder = new UInt32(args.isFolderRequest ? 0x1 : 0x0);\n\n  const request = new Message({\n    type: Request.MenuPlaylist,\n    args: [fieldFromDescriptor(lookupDescriptor), sort, id, isFolder],\n  });\n\n  await conn.writeMessage(request, span);\n  const resp = await conn.readMessage(Response.Success, span);\n\n  type PlaylistItemTypes = ItemType.Folder | ItemType.Playlist | ItemType.TrackTitle;\n\n  const items = renderItems<PlaylistItemTypes>(\n    conn,\n    lookupDescriptor,\n    resp.data.itemsAvailable,\n    span\n  );\n\n  const playlistItems: Array<Item<PlaylistItemTypes>> = [];\n  for await (const item of items) {\n    playlistItems.push(item);\n  }\n\n  const folders: entities.Playlist[] = (playlistItems as Array<Item<ItemType.Folder>>)\n    .filter(item => item.type === ItemType.Folder)\n    .map(({id, name}) => ({isFolder: true, id, name, parentId}));\n\n  const playlists: entities.Playlist[] = (playlistItems as Array<Item<ItemType.Playlist>>)\n    .filter(item => item.type === ItemType.Playlist)\n    .map(({id, name}) => ({isFolder: false, id, name, parentId}));\n\n  const trackEntries = (playlistItems as Array<Item<ItemType.TrackTitle>>).filter(\n    item => item.type === ItemType.TrackTitle\n  );\n\n  return {folders, playlists, trackEntries};\n}\n\nexport const queryHandlers = {\n  [Request.GetMetadata]: getMetadata,\n  [Request.GetArtwork]: getArtwork,\n  [Request.GetWaveformPreview]: getWaveformPreview,\n  [Request.GetTrackInfo]: getTrackInfo,\n  [Request.GetGenericMetadata]: getGenericMetadata,\n  [Request.GetCueAndLoops]: getCueAndLoops,\n  [Request.GetBeatGrid]: getBeatgrid,\n  [Request.GetWaveformDetailed]: getWaveformDetailed,\n  [Request.GetAdvCueAndLoops]: getCueAndLoopsAdv,\n  [Request.GetWaveformHD]: getWaveformHD,\n  [Request.MenuPlaylist]: getPlaylist,\n\n  // TODO: Add queries for all different kinds of menu requests\n};\n\nexport type Handler<T extends Query> = (typeof queryHandlers)[T];\n\nexport type HandlerArgs<T extends Query> = Parameters<Handler<T>>[0]['args'];\nexport type HandlerReturn<T extends Query> = ReturnType<Handler<T>>;\n","import {Span} from '@sentry/tracing';\n\nimport {Items, ItemType} from './message/item';\nimport {MessageType} from './message/types';\nimport {UInt32} from './fields';\nimport {Message} from './message';\nimport {Connection, LookupDescriptor} from '.';\n\n/**\n * Specifies the number of items we should request at a time in menu render\n * requests.\n */\nconst LIMIT = 64;\n\nexport const fieldFromDescriptor = ({\n  hostDevice,\n  menuTarget,\n  trackSlot,\n  trackType,\n}: LookupDescriptor) =>\n  new UInt32(Buffer.of(hostDevice.id, menuTarget, trackSlot, trackType));\n\nexport const makeRenderMessage = (\n  descriptor: LookupDescriptor,\n  offset: number,\n  count: number,\n  total: number\n) =>\n  new Message({\n    type: MessageType.RenderMenu,\n    args: [\n      fieldFromDescriptor(descriptor),\n      new UInt32(offset),\n      new UInt32(count),\n      new UInt32(0),\n      new UInt32(total),\n      new UInt32(0x0c),\n    ],\n  });\n\n/**\n * Async generator to page through menu results after a successful lookup\n * request.\n */\nexport async function* renderItems<T extends ItemType = ItemType>(\n  conn: Connection,\n  descriptor: LookupDescriptor,\n  total: number,\n  span: Span\n) {\n  let itemsRead = 0;\n\n  while (itemsRead < total) {\n    // Request another page of items\n    if (itemsRead % LIMIT === 0) {\n      // XXX: itemsRead + count should NOT exceed the total. A larger value\n      // will push the offset back to accomadate for the extra items, ensuring\n      // we always recieve count items.\n      const count = Math.min(LIMIT, total - itemsRead);\n      const message = makeRenderMessage(descriptor, itemsRead, count, total);\n\n      await conn.writeMessage(message, span);\n      await conn.readMessage(MessageType.MenuHeader, span);\n    }\n\n    // Read each item. Ignoring headers and footers, we will determine when to\n    // stop by counting the items read until we reach the total items.\n    const resp = await conn.readMessage(MessageType.MenuItem, span);\n\n    yield resp.data as Items[T];\n    itemsRead++;\n\n    // When we've reached the end of a page we must read the footer\n    if (itemsRead % LIMIT === 0 || itemsRead === total) {\n      await conn.readMessage(MessageType.MenuFooter, span);\n    }\n  }\n}\n\nconst colors = [\n  ItemType.ColorNone,\n  ItemType.ColorPink,\n  ItemType.ColorRed,\n  ItemType.ColorOrange,\n  ItemType.ColorYellow,\n  ItemType.ColorGreen,\n  ItemType.ColorAqua,\n  ItemType.ColorBlue,\n  ItemType.ColorPurple,\n] as const;\n\nconst colorSet = new Set(colors);\n\ntype ColorType = (typeof colors)[number];\n\n/**\n * Locate the color item in an item list\n */\nexport const findColor = (items: Array<Items[ItemType]>) =>\n  items.filter(item => colorSet.has(item.type as any)).pop() as Items[ColorType];\n","import {Mutex} from 'async-mutex';\nimport StrictEventEmitter from 'strict-event-emitter-types';\n\nimport {Socket} from 'dgram';\nimport {EventEmitter} from 'events';\n\nimport {STATUS_PORT} from 'src/constants';\nimport {CDJStatus, MediaSlotInfo} from 'src/types';\nimport {udpSend} from 'src/utils/udp';\n\nimport {makeMediaSlotRequest} from './media';\nimport {mediaSlotFromPacket, statusFromPacket} from './utils';\n\ninterface StatusEvents {\n  /**\n   * Fired each time the CDJ reports its status\n   */\n  status: (status: CDJStatus.State) => void;\n  /**\n   * Fired when the CDJ reports its media slot status\n   */\n  mediaSlot: (info: MediaSlotInfo) => void;\n}\n\ntype Emitter = StrictEventEmitter<EventEmitter, StatusEvents>;\n\ntype MediaSlotOptions = Parameters<typeof makeMediaSlotRequest>[0];\n\n/**\n * The status emitter will report every time a device status is recieved\n */\nclass StatusEmitter {\n  #statusSocket: Socket;\n  /**\n   * The EventEmitter which reports the device status\n   */\n  #emitter: Emitter = new EventEmitter();\n  /**\n   * Lock used to avoid media slot query races\n   */\n  #mediaSlotQueryLock = new Mutex();\n\n  /**\n   * @param statusSocket A UDP socket to recieve CDJ status packets on\n   */\n  constructor(statusSocket: Socket) {\n    this.#statusSocket = statusSocket;\n    statusSocket.on('message', this.#handleStatus);\n  }\n\n  // Bind public event emitter interface\n  on: Emitter['on'] = this.#emitter.addListener.bind(this.#emitter);\n  off: Emitter['off'] = this.#emitter.removeListener.bind(this.#emitter);\n  once: Emitter['once'] = this.#emitter.once.bind(this.#emitter);\n\n  #handleStatus = (message: Buffer) => {\n    const status = statusFromPacket(message);\n\n    if (status !== undefined) {\n      return this.#emitter.emit('status', status);\n    }\n\n    // Media slot status is also reported on this socket\n    const mediaSlot = mediaSlotFromPacket(message);\n\n    if (mediaSlot !== undefined) {\n      return this.#emitter.emit('mediaSlot', mediaSlot);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Retrieve media slot status information.\n   */\n  async queryMediaSlot(options: MediaSlotOptions) {\n    const request = makeMediaSlotRequest(options);\n\n    const media = await this.#mediaSlotQueryLock.runExclusive(async () => {\n      await udpSend(this.#statusSocket, request, STATUS_PORT, options.device.ip.address);\n      return new Promise<MediaSlotInfo>(resolve => this.once('mediaSlot', resolve));\n    });\n\n    return media;\n  }\n}\n\nexport default StatusEmitter;\n","import {PROLINK_HEADER} from 'src/constants';\nimport {Device, MediaSlot} from 'src/types';\nimport {buildName} from 'src/utils';\n\ninterface Options {\n  /**\n   * The device asking for media info\n   */\n  hostDevice: Device;\n  /**\n   * The target device. This is the device we'll be querying for details of\n   * it's media slot.\n   */\n  device: Device;\n  /**\n   * The specific slot\n   */\n  slot: MediaSlot;\n}\n\n/**\n * Get information about the media connected to the specifed slot on the\n * device.\n */\nexport const makeMediaSlotRequest = ({hostDevice, device, slot}: Options) =>\n  Uint8Array.from([\n    ...PROLINK_HEADER,\n    ...[0x05],\n    ...buildName(hostDevice),\n    ...[0x01, 0x00],\n    ...[hostDevice.id],\n    ...[0x00, 0x0c],\n    ...hostDevice.ip.toArray(),\n    ...[0x00, 0x00, 0x00, device.id],\n    ...[0x00, 0x00, 0x00, slot],\n  ]);\n","import {DeviceID, MediaSlot, TrackType} from 'src/types';\n\n/**\n * Status flag bitmasks\n */\nexport enum StatusFlag {\n  OnAir = 1 << 3,\n  Sync = 1 << 4,\n  Master = 1 << 5,\n  Playing = 1 << 6,\n}\n\n/**\n * Play state flags\n */\nexport enum PlayState {\n  Empty = 0x00,\n  Loading = 0x02,\n  Playing = 0x03,\n  Looping = 0x04,\n  Paused = 0x05,\n  Cued = 0x06,\n  Cuing = 0x07,\n  PlatterHeld = 0x08,\n  Searching = 0x09,\n  SpunDown = 0x0e,\n  Ended = 0x11,\n}\n\n/**\n * Represents various details about the current state of the CDJ.\n */\nexport interface State {\n  /**\n   * The device reporting this status.\n   */\n  deviceId: number;\n  /**\n   * The ID of the track loaded on the device.\n   *\n   * 0 When no track is loaded.\n   */\n  trackId: number;\n  /**\n   * The device ID the track is loaded from.\n   *\n   * For example if you have two CDJs and you've loaded a track over the 'LINK',\n   * this will be the ID of the player with the USB media device connected to it.\n   */\n  trackDeviceId: DeviceID;\n  /**\n   * The MediaSlot the track is loaded from. For example a SD card or USB device.\n   */\n  trackSlot: MediaSlot;\n  /**\n   * The TrackType of the track, for example a CD or Rekordbox analyzed track.\n   */\n  trackType: TrackType;\n  /**\n   * The current play state of the CDJ.\n   */\n  playState: PlayState;\n  /**\n   * Whether the CDJ is currently reporting itself as 'on-air'.\n   *\n   * This is indicated by the red ring around the platter on the CDJ Nexus models.\n   * A DJM mixer must be ont he network for the CDJ to report this as true.\n   */\n  isOnAir: boolean;\n  /**\n   * Whether the CDJ is synced.\n   */\n  isSync: boolean;\n  /**\n   * Whether the CDJ is the master player.\n   */\n  isMaster: boolean;\n  /**\n   * Whether the CDJ is in an emergency state (emergecy loop / emergency mode\n   * on newer players)\n   */\n  isEmergencyMode: boolean;\n  /**\n   * The BPM of the loaded track. null if no track is loaded or the BPM is unknown.\n   */\n  trackBPM: number | null;\n  /**\n   * The \"effective\" pitch of the plyaer. This is reported anytime the jogwheel is\n   * nudged, the CDJ spins down by pausing with the vinyl stop knob not at 0, or\n   * by holding the platter.\n   */\n  effectivePitch: number;\n  /**\n   * The current slider pitch\n   */\n  sliderPitch: number;\n  /**\n   * The current beat within the measure. 1-4. 0 when no track is loaded.\n   */\n  beatInMeasure: number;\n  /**\n   * Number of beats remaining until the next cue point is reached. Null if there\n   * is no next cue point\n   */\n  beatsUntilCue: number | null;\n  /**\n   * The beat 'timestamp' of the track. Can be used to compute absolute track time\n   * given the slider pitch.\n   */\n  beat: number | null;\n  /**\n   * A counter that increments for every status packet sent.\n   */\n  packetNum: number;\n}\n","import {PROLINK_HEADER} from 'src/constants';\nimport {CDJStatus, MediaSlotInfo} from 'src/types';\n\nconst MAX_INT32 = Math.pow(2, 32) - 1;\nconst MAX_INT16 = Math.pow(2, 16) - 1;\nconst MAX_INT9 = Math.pow(2, 9) - 1;\n\nexport function statusFromPacket(packet: Buffer) {\n  if (packet.indexOf(PROLINK_HEADER) !== 0) {\n    throw new Error('CDJ status packet does not start with the expected header');\n  }\n\n  // Rekordbox sends some short status packets that we can just ignore.\n  if (packet.length < 0xc8) {\n    return undefined;\n  }\n\n  // No track loaded: BPM = MAX_INT16\n  const rawBPM = packet.readUInt16BE(0x92);\n  const trackBPM = rawBPM === MAX_INT16 ? null : rawBPM / 100;\n\n  // No next cue: beatsUntilCue = MAX_INT9\n  const rawBeatsUntilCue = packet.readUInt16BE(0xa4);\n  const beatsUntilCue = rawBeatsUntilCue === MAX_INT9 ? null : rawBeatsUntilCue;\n\n  // No track loaded: beat = MAX_INT32\n  const rawBeat = packet.readUInt32BE(0xa0);\n  const beat = rawBeat === MAX_INT32 ? null : rawBeat;\n\n  const status: CDJStatus.State = {\n    deviceId: packet[0x21],\n    trackId: packet.readUInt32BE(0x2c),\n    trackDeviceId: packet[0x28],\n    trackSlot: packet[0x29],\n    trackType: packet[0x2a],\n    playState: packet[0x7b],\n    isOnAir: (packet[0x89] & CDJStatus.StatusFlag.OnAir) !== 0,\n    isSync: (packet[0x89] & CDJStatus.StatusFlag.Sync) !== 0,\n    isMaster: (packet[0x89] & CDJStatus.StatusFlag.Master) !== 0,\n    isEmergencyMode: !!packet[0xba],\n    trackBPM,\n    sliderPitch: calcPitch(packet.slice(0x8d, 0x8d + 3)),\n    effectivePitch: calcPitch(packet.slice(0x99, 0x99 + 3)),\n    beatInMeasure: packet[0xa6],\n    beatsUntilCue,\n    beat,\n    packetNum: packet.readUInt32BE(0xc8),\n  };\n\n  return status;\n}\n\nexport function mediaSlotFromPacket(packet: Buffer) {\n  if (packet.indexOf(PROLINK_HEADER) !== 0) {\n    throw new Error('CDJ media slot packet does not start with the expected header');\n  }\n\n  if (packet[0x0a] !== 0x06) {\n    return undefined;\n  }\n\n  const name = packet\n    .slice(0x2c, 0x0c + 40)\n    .toString()\n    .replace(/\\0/g, '');\n\n  const createdDate = new Date(\n    packet\n      .slice(0x6c, 0x6c + 24)\n      .toString()\n      .replace(/\\0/g, '')\n  );\n\n  const deviceId = packet[0x27];\n  const slot = packet[0x2b];\n\n  const trackCount = packet.readUInt16BE(0xa6);\n  const tracksType = packet[0xaa];\n  const hasSettings = !!packet[0xab];\n  const playlistCount = packet.readUInt16BE(0xae);\n  const color = packet.readUInt8(0xa8);\n  const totalBytes = packet.readBigUInt64BE(0xb0);\n  const freeBytes = packet.readBigUInt64BE(0xb8);\n\n  const info: MediaSlotInfo = {\n    deviceId,\n    slot,\n    name,\n    color,\n    createdDate,\n    freeBytes,\n    totalBytes,\n    tracksType,\n    trackCount,\n    playlistCount,\n    hasSettings,\n  };\n\n  return info;\n}\n\n/**\n * calcPitch converts a uint24 byte value into a flaot32 pitch.\n *\n * The pitch information ranges from 0x000000 (meaning -100%, complete stop) to\n * 0x200000 (+100%).\n */\nfunction calcPitch(pitch: Buffer) {\n  const value = Buffer.from([0x0, ...pitch]).readUInt32BE();\n  const relativeZero = 0x100000;\n\n  const computed = ((value - relativeZero) / relativeZero) * 100;\n\n  return +computed.toFixed(2);\n}\n","import type {Address4} from 'ip-address';\n\nimport type {Playlist, Track} from './entities';\n\nexport * as CDJStatus from 'src/status/types';\n\n/**\n * Re-export various types for the types only compile target\n */\n\nexport type {\n  Album,\n  Artist,\n  Artwork,\n  Color,\n  Genre,\n  Key,\n  Label,\n  Playlist,\n  Track,\n} from './entities';\nexport type {HydrationProgress} from './localdb/rekordbox';\nexport type {MixstatusConfig, MixstatusProcessor} from './mixstatus';\nexport type {ConnectedProlinkNetwork, NetworkConfig, ProlinkNetwork} from './network';\nexport type {FetchProgress} from './nfs';\n\n/**\n * Known device types on the network\n */\nexport enum DeviceType {\n  CDJ = 0x01,\n  Mixer = 0x03,\n  Rekordbox = 0x04,\n}\n\n/**\n * The 8-bit identifier of the device on the network\n */\nexport type DeviceID = number;\n\n/**\n * Represents a device on the prolink network.\n */\nexport interface Device {\n  name: string;\n  id: DeviceID;\n  type: DeviceType;\n  macAddr: Uint8Array;\n  ip: Address4;\n  lastActive?: Date;\n}\n\n/**\n * Details of a particular media slot on the CDJ\n */\nexport interface MediaSlotInfo {\n  /**\n   * The device the slot physically exists on\n   */\n  deviceId: DeviceID;\n  /**\n   * The slot type\n   */\n  slot: MediaSlot;\n  /**\n   * The name of the media connected\n   */\n  name: string;\n  /**\n   * The rekordbox configured color of the media connected\n   */\n  color: MediaColor;\n  /**\n   * Creation date\n   */\n  createdDate: Date;\n  /**\n   * Number of free bytes available on the media\n   */\n  freeBytes: bigint;\n  /**\n   * Number of bytes used on the media\n   */\n  totalBytes: bigint;\n  /**\n   * Specifies the available tracks type on the media\n   */\n  tracksType: TrackType;\n  /**\n   * Total number of rekordbox tracks on the media. Will be zero if there is\n   * no rekordbox database on the media\n   */\n  trackCount: number;\n  /**\n   * Same as track count, except for playlists\n   */\n  playlistCount: number;\n  /**\n   * True when a rekordbox 'my settings' file has been exported to the media\n   */\n  hasSettings: boolean;\n}\n\nexport enum MediaColor {\n  Default = 0x00,\n  Pink = 0x01,\n  Red = 0x02,\n  Orange = 0x03,\n  Yellow = 0x04,\n  Green = 0x05,\n  Aqua = 0x06,\n  Blue = 0x07,\n  Purple = 0x08,\n}\n\n/**\n * A slot where media is present on the CDJ\n */\nexport enum MediaSlot {\n  Empty = 0x00,\n  CD = 0x01,\n  SD = 0x02,\n  USB = 0x03,\n  RB = 0x04,\n}\n\n/**\n * Track type flags\n */\nexport enum TrackType {\n  None = 0x00,\n  RB = 0x01,\n  Unanalyzed = 0x02,\n  AudioCD = 0x05,\n}\n\n/**\n * A beat grid is a series of offsets from the start of the track. Each offset\n * indicates what count within the measure it is along with the BPM.\n */\nexport type BeatGrid = Array<{\n  /**\n   * Offset from the beginning of track in milliseconds of this beat.\n   */\n  offset: number;\n  /**\n   * The count of this particular beat within the measure\n   */\n  count: 1 | 2 | 3 | 4;\n  /**\n   * The BPM at this beat.\n   */\n  bpm: number;\n}>;\n\n/**\n * A waveform segment contains a height and 'whiteness' value.\n */\ninterface WaveformSegment {\n  /**\n   * The height this segment in the waveform. Ranges from 0 - 31.\n   */\n  height: number;\n  /**\n   * The level of \"whiteness\" of the waveform. 0 being completely blue, and 1\n   * being completely white.\n   */\n  whiteness: number;\n}\n\n/**\n * A HD waveform segment contains the height of the waveform, and it's color\n * represented as RGB values.\n */\ninterface WaveformHDSegment {\n  /**\n   * The height this segment in the waveform. Ranges from 0 - 31.\n   */\n  height: number;\n  /**\n   * the RGB value, each channel ranges from 0-1 for the segment.\n   */\n  color: [number, number, number];\n}\n\n/**\n * The waveform preview will be 400 segments of data.\n */\nexport type WaveformPreview = WaveformSegment[];\n\n/**\n * Detailed waveforms have 150 segments per second of audio (150 'half frames'\n * per second of audio).\n */\nexport type WaveformDetailed = WaveformSegment[];\n\n/**\n * HD waveforms have 150 segments per second of audio (150 'half frames' per\n * second of audio).\n */\nexport type WaveformHD = WaveformHDSegment[];\n\n/**\n * The result of looking up track waveforms\n */\nexport interface Waveforms {\n  /**\n   * The full-size and full-color waveform\n   */\n  waveformHd: WaveformHD;\n\n  // TODO: Add other waveform types\n}\n\n/**\n * A hotcue button label\n */\nexport enum HotcueButton {\n  A = 1,\n  B,\n  C,\n  D,\n  E,\n  F,\n  G,\n  H,\n}\n\n/**\n * When a custom color is not configured the cue point will be one of these\n * colors.\n */\nexport enum CueColor {\n  None = 0x00,\n  Blank = 0x15,\n  Magenta = 0x31,\n  Violet = 0x38,\n  Fuchsia = 0x3c,\n  LightSlateBlue = 0x3e,\n  Blue = 0x01,\n  SteelBlue = 0x05,\n  Aqua = 0x09,\n  SeaGreen = 0x0e,\n  Teal = 0x12,\n  Green = 0x16,\n  Lime = 0x1a,\n  Olive = 0x1e,\n  Yellow = 0x20,\n  Orange = 0x26,\n  Red = 0x2a,\n  Pink = 0x2d,\n}\n\n/**\n * Represents a single cue point. On older exports the label and color may be\n * undefined.\n */\nexport interface CuePoint {\n  type: 'cue_point';\n  /**\n   * Number of milliseconds from the start of the track.\n   */\n  offset: number;\n  /**\n   * The comment associated to the cue point\n   */\n  label?: string;\n  /**\n   * RGB values of the hotcue color\n   */\n  color?: CueColor;\n}\n\ntype BareCuePoint = Omit<CuePoint, 'type'>;\n\n/**\n * A loop, similar to a cue point, but includes a length.\n */\nexport type Loop = BareCuePoint & {\n  type: 'loop';\n  /**\n   * The length in milliseconds of the loop\n   */\n  length: number;\n};\n\n/**\n * A hotcue is like a cue point, but also includes the button it is assigned to.\n */\nexport type Hotcue = BareCuePoint & {\n  type: 'hot_cue';\n  /**\n   * Which hotcue button this hotcue is assigned to.\n   */\n  button: HotcueButton;\n};\n\n/**\n * A hot loop, this is the union of a hotcue and a loop.\n */\nexport type Hotloop = {type: 'hot_loop'} & (Omit<Hotcue, 'type'> & Omit<Loop, 'type'>);\n\nexport type CueAndLoop = CuePoint | Loop | Hotcue | Hotloop;\n\n/**\n * Represents the contents of a playlist\n */\nexport interface PlaylistContents {\n  /**\n   * The playlists in this playlist.\n   */\n  playlists: Playlist[];\n  /**\n   * The folders in this playlist.\n   */\n  folders: Playlist[];\n  /**\n   * The tracks in this playlist. This is an AsyncIterator as looking up track\n   * metadata may be slow when connected to the remote database.\n   */\n  tracks: AsyncIterable<Track>;\n  /**\n   * The total number of tracks in this playlist.\n   */\n  totalTracks: number;\n}\n\nexport enum NetworkState {\n  /**\n   * The network is offline when we don't have an open connection to the network\n   * (no connection to the announcment and or status UDP socket is present).\n   */\n  Offline,\n  /**\n   * The network is online when we have opened sockets to the network, but have\n   * not yet started announcing ourselves as a virtual CDJ.\n   */\n  Online,\n  /**\n   * The network is connected once we have heard from another device on the network\n   */\n  Connected,\n  /**\n   * The network may have failed to connect if we aren't able to open the\n   * announcment and or status UDP socket.\n   */\n  Failed,\n}\n\n/**\n * Mixstatus reporting modes specify how the mixstatus processor will determine when a new\n * track is 'now playing'.\n */\nexport enum MixstatusMode {\n  /**\n   * Tracks will be smartly marked as playing following rules:\n   *\n   * - The track that has been in the play state with the CDJ in the \"on air\" state\n   *   for the longest period of time (allowing for a configurable length of\n   *   interruption with allowedInterruptBeats) is considered to be the active\n   *   track that incoming tracks will be compared against.\n   *\n   * - A incoming track will immediately be reported as nowPlaying if it is on\n   *   air, playing, and the last active track has been cued.\n   *\n   * - A incoming track will be reported as nowPlaying if the active track has\n   *   not been on air or has not been playing for the configured\n   *   allowedInterruptBeats.\n   *\n   * - A incoming track will be reported as nowPlaying if it has played\n   *   consecutively (with allowedInterruptBeats honored for the incoming track)\n   *   for the configured beatsUntilReported.\n   */\n  SmartTiming,\n  /**\n   * Tracks will not be reported after the beatsUntilReported AND will ONLY\n   * be reported if the other track has gone into a non-playing play state, or\n   * taken off air (when useOnAirStatus is enabled).\n   */\n  WaitsForSilence,\n  /**\n   * The track will simply be reported only after the player becomes master.\n   */\n  FollowsMaster,\n}\n","import {WaveformHD} from 'src/types';\n\n/**\n * Extracts a specific bitmask, shifting it to the bitmask.\n */\nexport const extractBitMask = (val: number, mask: number): number =>\n  (val & mask) >> Math.log2(mask & -mask);\n\n/**\n * Pioneer colors are 3 bits, convert this to a percentage.\n */\nexport const extractColor = (val: number, mask: number): number =>\n  extractBitMask(val, mask) / 0b111;\n\n/**\n * Utility to generate an filled with byte offsets for each segment\n */\nexport const makeOffsetArray = (byteLength: number, segmentSize: number) =>\n  new Array(byteLength / segmentSize).fill(null).map((_, i) => i * segmentSize);\n\n/**\n * Convert raw waveform HD data into the structured WaveformHD type\n */\nexport const convertWaveformHDData = (data: Buffer): WaveformHD => {\n  // Two byte bit representation for the color waveform.\n  //\n  // | f  e  d | c  b  a | 9  8  7 | 6  5  4  3  2 | 1   0 |\n  // [   red   |  green  |   blue  |     height    | ~ | ~ ]\n  const redMask    = 0b11100000_00000000; // prettier-ignore\n  const greenMask  = 0b00011100_00000000; // prettier-ignore\n  const blueMask   = 0b00000011_10000000; // prettier-ignore\n  const heightMask = 0b00000000_01111100; // prettier-ignore\n\n  const ec = extractColor;\n\n  return makeOffsetArray(data.length, 0x02)\n    .map(byteOffset => data.readUInt16BE(byteOffset))\n    .map(v => ({\n      height: extractBitMask(v, heightMask),\n      color: [ec(v, redMask), ec(v, greenMask), ec(v, blueMask)],\n    }));\n};\n","import * as ip from 'ip-address';\n\nimport {NetworkInterfaceInfo, NetworkInterfaceInfoIPv4, networkInterfaces} from 'os';\n\nimport {Device, MediaSlot, TrackType} from 'src/types';\n\n/**\n * Get the byte representation of the device name\n */\nexport function buildName(device: Device): Uint8Array {\n  const name = new Uint8Array(20);\n  name.set(Buffer.from(device.name, 'ascii'));\n\n  return name;\n}\n\n/**\n * Determines the interface that routes the given address by comparing the\n * masked addresses. This type of information is generally determined through\n * the kernels routing table, but for sake of cross-platform compatibility, we\n * do some rudimentary lookup.\n */\nexport function getMatchingInterface(ipAddr: ip.Address4) {\n  const flatList = Object.entries(networkInterfaces()).reduce(\n    (acc, [name, info]) =>\n      info !== undefined ? acc.concat(info.map(i => ({...i, name}))) : acc,\n    [] as Array<{name: string} & NetworkInterfaceInfo>\n  );\n\n  let matchedIface: (NetworkInterfaceInfoIPv4 & {name: string}) | null = null;\n  let matchedSubnet = 0;\n\n  for (const iface of flatList) {\n    const {internal, cidr} = iface;\n\n    if (iface.family !== 'IPv4' || internal || cidr === null) {\n      continue;\n    }\n\n    const ifaceAddr = new ip.Address4(cidr);\n\n    if (ipAddr.isInSubnet(ifaceAddr) && ifaceAddr.subnetMask > matchedSubnet) {\n      matchedIface = iface;\n      matchedSubnet = ifaceAddr.subnetMask;\n    }\n  }\n\n  return matchedIface;\n}\n\n/**\n * Given a BPM and pitch value, compute how many seconds per beat\n */\nexport function bpmToSeconds(bpm: number, pitch: number) {\n  const bps = ((pitch / 100) * bpm + bpm) / 60;\n  return 1 / bps;\n}\n\nconst slotNames = Object.fromEntries(\n  Object.entries(MediaSlot).map(e => [e[1], e[0].toLowerCase()])\n);\n\n/**\n * Returns a string representation of a media slot\n */\nexport function getSlotName(slot: MediaSlot) {\n  return slotNames[slot];\n}\n\nconst trackTypeNames = Object.fromEntries(\n  Object.entries(TrackType).map(e => [e[1], e[0].toLowerCase()])\n);\n\n/**\n * Returns a string representation of a track type\n */\nexport function getTrackTypeName(type: TrackType) {\n  return trackTypeNames[type];\n}\n","import {BindOptions, Socket} from 'dgram';\nimport {AddressInfo} from 'net';\n\n/**\n * Async version of upd socket bind\n */\nexport function udpBind(\n  conn: Socket,\n  port?: number,\n  address?: string\n): Promise<AddressInfo>;\nexport function udpBind(conn: Socket, options: BindOptions): Promise<AddressInfo>;\nexport function udpBind(conn: Socket, arg1?: any, arg2?: any): Promise<AddressInfo> {\n  return new Promise((resolve, reject) => {\n    conn.once('error', reject);\n    conn.once('listening', () => {\n      conn.off('error', reject);\n      resolve(conn.address());\n    });\n\n    if (arg2 !== undefined) {\n      conn.bind(arg1, arg2);\n    } else {\n      conn.bind(arg1);\n    }\n  });\n}\n\n/**\n * Async version of udp socket read\n */\nexport function udpRead(conn: Socket) {\n  return new Promise<Buffer>(resolve => conn.once('message', resolve));\n}\n\n/**\n * Async version of udp socket send\n */\nexport function udpSend(\n  conn: Socket,\n  msg: Buffer | string | Uint8Array | any[],\n  port: number,\n  address: string\n): Promise<number>;\nexport function udpSend(\n  conn: Socket,\n  msg: Buffer | string | Uint8Array,\n  offset: number,\n  length: number,\n  port: number,\n  address: string\n): Promise<number>;\nexport function udpSend(\n  conn: Socket,\n  arg1: any,\n  arg2: any,\n  arg3: any,\n  arg4?: any,\n  arg5?: any\n): Promise<number> {\n  return new Promise((resolve, reject) => {\n    try {\n      if (arg4 !== undefined) {\n        conn.send(arg1, arg2, arg3, arg4, arg5, (err, sent) =>\n          err ? reject(err) : resolve(sent)\n        );\n      } else {\n        conn.send(arg1, arg2, arg3, (err, sent) => (err ? reject(err) : resolve(sent)));\n      }\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Async version of udp socket close\n */\nexport function udpClose(conn: Socket) {\n  return new Promise((resolve, reject) => {\n    try {\n      conn.once('close', resolve);\n      conn.close();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n","import * as ip from 'ip-address';\n\nimport {Socket} from 'dgram';\nimport {NetworkInterfaceInfoIPv4} from 'os';\n\nimport {\n  ANNOUNCE_INTERVAL,\n  ANNOUNCE_PORT,\n  PROLINK_HEADER,\n  VIRTUAL_CDJ_FIRMWARE,\n  VIRTUAL_CDJ_NAME,\n} from 'src/constants';\nimport DeviceManager from 'src/devices';\nimport {Device, DeviceID, DeviceType} from 'src/types';\nimport {buildName} from 'src/utils';\n\n/**\n * Constructs a virtual CDJ Device.\n */\nexport const getVirtualCDJ = (iface: NetworkInterfaceInfoIPv4, id: DeviceID): Device => ({\n  id,\n  name: VIRTUAL_CDJ_NAME,\n  type: DeviceType.CDJ,\n  ip: new ip.Address4(iface.address),\n  macAddr: new Uint8Array(iface.mac.split(':').map(s => parseInt(s, 16))),\n});\n\n/**\n * Returns a mostly empty-state status packet. This is currently used to report\n * the virtual CDJs status, which *seems* to be required for the CDJ to send\n * metadata about some unanalyzed mp3 files.\n */\nexport function makeStatusPacket(device: Device): Uint8Array {\n  // NOTE: It seems that byte 0x68 and 0x75 MUST be 1 in order for the CDJ to\n  //       correctly report mp3 metadata (again, only for some files).\n  //       See https://github.com/brunchboy/dysentery/issues/15\n  // NOTE: Byte 0xb6 MUST be 1 in order for the CDJ to not think that our\n  //       device is \"running an older firmware\"\n  //\n  // prettier-ignore\n  const b = new Uint8Array([\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x03, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0xff, 0xfe, 0x00, 0x10, 0x00, 0x00,\n    0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  ]);\n\n  // The following items get replaced in this format:\n  //\n  //  - 0x00: 10 byte header\n  //  - 0x0B: 20 byte device name\n  //  - 0x21: 01 byte device ID\n  //  - 0x24: 01 byte device ID\n  //  - 0x7C: 04 byte firmware string\n\n  b.set(PROLINK_HEADER, 0x0b);\n  b.set(Buffer.from(device.name, 'ascii'), 0x0b);\n  b.set(new Uint8Array([device.id]), 0x21);\n  b.set(new Uint8Array([device.id]), 0x24);\n  b.set(Buffer.from(VIRTUAL_CDJ_FIRMWARE, 'ascii'), 0x7c);\n\n  return b;\n}\n\n/**\n * constructs the announce packet that is sent on the prolink network to\n * announce a devices existence.\n */\nexport function makeAnnouncePacket(deviceToAnnounce: Device): Uint8Array {\n  const d = deviceToAnnounce;\n\n  // unknown padding bytes\n  const unknown1 = [0x01, 0x02];\n  const unknown2 = [0x01, 0x00, 0x00, 0x00];\n\n  // The packet blow is constructed in the followig format:\n  //\n  //  - 0x00: 10 byte header\n  //  - 0x0A: 02 byte announce packet type\n  //  - 0x0c: 20 byte device name\n  //  - 0x20: 02 byte unknown\n  //  - 0x22: 02 byte packet length\n  //  - 0x24: 01 byte for the player ID\n  //  - 0x25: 01 byte for the player type\n  //  - 0x26: 06 byte mac address\n  //  - 0x2C: 04 byte IP address\n  //  - 0x30: 04 byte unknown\n  //  - 0x34: 01 byte for the player type\n  //  - 0x35: 01 byte final padding\n\n  const parts = [\n    ...PROLINK_HEADER,\n    ...[0x06, 0x00],\n    ...buildName(d),\n    ...unknown1,\n    ...[0x00, 0x36],\n    ...[d.id],\n    ...[d.type],\n    ...d.macAddr,\n    ...d.ip.toArray(),\n    ...unknown2,\n    ...[d.type],\n    ...[0x00],\n  ];\n\n  return Uint8Array.from(parts);\n}\n\n/**\n * the announcer service is used to report our fake CDJ to the prolink network,\n * as if it was a real CDJ.\n */\nexport class Announcer {\n  /**\n   * The announce socket to use to make the announcments\n   */\n  #announceSocket: Socket;\n  /**\n   * The device manager service used to determine which devices to announce\n   * ourselves to.\n   */\n  #deviceManager: DeviceManager;\n  /**\n   * The virtual CDJ device to announce\n   */\n  #vcdj: Device;\n  /**\n   * The interval handle used to stop announcing\n   */\n  #intervalHandle?: NodeJS.Timeout;\n\n  constructor(vcdj: Device, announceSocket: Socket, deviceManager: DeviceManager) {\n    this.#vcdj = vcdj;\n    this.#announceSocket = announceSocket;\n    this.#deviceManager = deviceManager;\n  }\n\n  start() {\n    const announcePacket = makeAnnouncePacket(this.#vcdj);\n\n    const announceToDevice = (device: Device) =>\n      this.#announceSocket.send(announcePacket, ANNOUNCE_PORT, device.ip.address);\n\n    this.#intervalHandle = setInterval(\n      () => [...this.#deviceManager.devices.values()].forEach(announceToDevice),\n      ANNOUNCE_INTERVAL\n    );\n  }\n\n  stop() {\n    if (this.#intervalHandle !== undefined) {\n      clearInterval(this.#intervalHandle);\n    }\n  }\n}\n","module.exports = require(\"@sentry/node\");","module.exports = require(\"@sentry/tracing\");","module.exports = require(\"async-mutex\");","module.exports = require(\"better-sqlite3-multiple-ciphers\");","module.exports = require(\"events\");","module.exports = require(\"ip-address\");","module.exports = require(\"js-xdr\");","module.exports = require(\"js-xdr/lib/util\");","module.exports = require(\"kaitai-struct\");","module.exports = require(\"kaitai-struct/KaitaiStream\");","module.exports = require(\"lodash\");","module.exports = require(\"promise-retry\");","module.exports = require(\"promise-socket\");","module.exports = require(\"promise-timeout\");","module.exports = require(\"crypto\");","module.exports = require(\"dgram\");","module.exports = require(\"net\");","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}